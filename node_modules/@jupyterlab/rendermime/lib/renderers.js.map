{"version":3,"file":"renderers.js","sourceRoot":"","sources":["../../../../rendermime/src/renderers.ts"],"names":[],"mappings":"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","sourcesContent":["/*-----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport {\n  ansi_to_html, escape_for_html\n} from 'ansi_up';\n\nimport * as marked\n  from 'marked';\n\nimport {\n  ISanitizer\n} from '@jupyterlab/apputils';\n\nimport {\n  Mode, CodeMirrorEditor\n} from '@jupyterlab/codemirror';\n\nimport {\n  URLExt\n} from '@jupyterlab/coreutils';\n\nimport {\n  IRenderMime\n} from '@jupyterlab/rendermime-interfaces';\n\nimport {\n  removeMath, replaceMath\n} from './latex';\n\n\n/**\n * Render HTML into a host node.\n *\n * @params options - The options for rendering.\n *\n * @returns A promise which resolves when rendering is complete.\n */\nexport\nfunction renderHTML(options: renderHTML.IOptions): Promise<void> {\n  // Unpack the options.\n  let {\n    host, source, trusted, sanitizer, resolver, linkHandler,\n    shouldTypeset, latexTypesetter\n  } = options;\n\n  // Bail early if the source is empty.\n  if (!source) {\n    host.textContent = '';\n    return Promise.resolve(undefined);\n  }\n\n  // Sanitize the source if it is not trusted. This removes all\n  // `<script>` tags as well as other potentially harmful HTML.\n  if (!trusted) {\n    source = sanitizer.sanitize(source);\n  }\n\n  // Set the inner HTML of the host.\n  host.innerHTML = source;\n\n  if (host.getElementsByTagName('script').length > 0) {\n    console.warn('JupyterLab does not execute inline JavaScript in HTML output');\n  }\n\n  // TODO - arbitrary script execution is disabled for now.\n  // Eval any script tags contained in the HTML. This is not done\n  // automatically by the browser when script tags are created by\n  // setting `innerHTML`. The santizer should have removed all of\n  // the script tags for untrusted source, but this extra trusted\n  // check is just extra insurance.\n  // if (trusted) {\n  //   // TODO do we really want to run scripts? Because if so, there\n  //   // is really no difference between this and a JS mime renderer.\n  //   Private.evalInnerHTMLScriptTags(host);\n  // }\n\n  // Handle default behavior of nodes.\n  Private.handleDefaults(host);\n\n  // Patch the urls if a resolver is available.\n  let promise: Promise<void>;\n  if (resolver) {\n    promise = Private.handleUrls(host, resolver, linkHandler);\n  } else {\n    promise = Promise.resolve(undefined);\n  }\n\n  // Return the final rendered promise.\n  return promise.then(() => {\n    if (shouldTypeset && latexTypesetter ) { latexTypesetter.typeset(host); }\n  });\n}\n\n\n/**\n * The namespace for the `renderHTML` function statics.\n */\nexport\nnamespace renderHTML {\n  /**\n   * The options for the `renderHTML` function.\n   */\n  export\n  interface IOptions {\n    /**\n     * The host node for the rendered HTML.\n     */\n    host: HTMLElement;\n\n    /**\n     * The HTML source to render.\n     */\n    source: string;\n\n    /**\n     * Whether the source is trusted.\n     */\n    trusted: boolean;\n\n    /**\n     * The html sanitizer for untrusted source.\n     */\n    sanitizer: ISanitizer;\n\n    /**\n     * An optional url resolver.\n     */\n    resolver: IRenderMime.IResolver | null;\n\n    /**\n     * An optional link handler.\n     */\n    linkHandler: IRenderMime.ILinkHandler | null;\n\n    /**\n     * Whether the node should be typeset.\n     */\n    shouldTypeset: boolean;\n\n    /**\n     * The LaTeX typesetter for the application.\n     */\n    latexTypesetter: IRenderMime.ILatexTypesetter | null;\n  }\n}\n\n\n/**\n * Render an image into a host node.\n *\n * @params options - The options for rendering.\n *\n * @returns A promise which resolves when rendering is complete.\n */\nexport\nfunction renderImage(options: renderImage.IRenderOptions): Promise<void> {\n  // Unpack the options.\n  let { host, mimeType, source, width, height, unconfined } = options;\n\n  // Clear the content in the host.\n  host.textContent = '';\n\n  // Create the image element.\n  let img = document.createElement('img');\n\n  // Set the source of the image.\n  img.src = `data:${mimeType};base64,${source}`;\n\n  // Set the size of the image if provided.\n  if (typeof height === 'number') {\n    img.height = height;\n  }\n  if (typeof width === 'number') {\n    img.width = width;\n  }\n\n  if (unconfined === true) {\n    img.classList.add('jp-mod-unconfined');\n  }\n\n  // Add the image to the host.\n  host.appendChild(img);\n\n  // Return the rendered promise.\n  return Promise.resolve(undefined);\n}\n\n\n/**\n * The namespace for the `renderImage` function statics.\n */\nexport\nnamespace renderImage {\n  /**\n   * The options for the `renderImage` function.\n   */\n  export\n  interface IRenderOptions {\n    /**\n     * The image node to update with the content.\n     */\n    host: HTMLElement;\n\n    /**\n     * The mime type for the image.\n     */\n    mimeType: string;\n\n    /**\n     * The base64 encoded source for the image.\n     */\n    source: string;\n\n    /**\n     * The optional width for the image.\n     */\n    width?: number;\n\n    /**\n     * The optional height for the image.\n     */\n    height?: number;\n\n    /**\n     * Whether the image should be unconfined.\n     */\n    unconfined?: boolean;\n  }\n}\n\n\n/**\n * Render LaTeX into a host node.\n *\n * @params options - The options for rendering.\n *\n * @returns A promise which resolves when rendering is complete.\n */\nexport\nfunction renderLatex(options: renderLatex.IRenderOptions): Promise<void> {\n  // Unpack the options.\n  let { host, source, shouldTypeset, latexTypesetter } = options;\n\n  // Set the source on the node.\n  host.textContent = source;\n\n  // Typeset the node if needed.\n  if (shouldTypeset && latexTypesetter) {\n    latexTypesetter.typeset(host);\n  }\n\n  // Return the rendered promise.\n  return Promise.resolve(undefined);\n}\n\n\n/**\n * The namespace for the `renderLatex` function statics.\n */\nexport\nnamespace renderLatex {\n  /**\n   * The options for the `renderLatex` function.\n   */\n  export\n  interface IRenderOptions {\n    /**\n     * The host node for the rendered LaTeX.\n     */\n    host: HTMLElement;\n\n    /**\n     * The LaTeX source to render.\n     */\n    source: string;\n\n    /**\n     * Whether the node should be typeset.\n     */\n    shouldTypeset: boolean;\n\n    /**\n     * The LaTeX typesetter for the application.\n     */\n    latexTypesetter: IRenderMime.ILatexTypesetter | null;\n  }\n}\n\n\n/**\n * Render Markdown into a host node.\n *\n * @params options - The options for rendering.\n *\n * @returns A promise which resolves when rendering is complete.\n */\nexport\nfunction renderMarkdown(options: renderMarkdown.IRenderOptions): Promise<void> {\n  // Unpack the options.\n  let {\n    host, source, trusted, sanitizer, resolver, linkHandler,\n    latexTypesetter, shouldTypeset\n  } = options;\n\n  // Clear the content if there is no source.\n  if (!source) {\n    host.textContent = '';\n    return Promise.resolve(undefined);\n  }\n\n  // Separate math from normal markdown text.\n  let parts = removeMath(source);\n\n  // Render the markdown and handle sanitization.\n  return Private.renderMarked(parts['text']).then(content => {\n    // Restore the math content in the rendered markdown.\n    content = replaceMath(content, parts['math']);\n\n    // Santize the content it is not trusted.\n    if (!trusted) {\n      content = sanitizer.sanitize(content);\n    }\n\n    // Set the inner HTML of the host.\n    host.innerHTML = content;\n\n    if (host.getElementsByTagName('script').length > 0) {\n      console.warn('JupyterLab does not execute inline JavaScript in HTML output');\n    }\n\n    // TODO arbitrary script execution is disabled for now.\n    // Eval any script tags contained in the HTML. This is not done\n    // automatically by the browser when script tags are created by\n    // setting `innerHTML`. The santizer should have removed all of\n    // the script tags for untrusted source, but this extra trusted\n    // check is just extra insurance.\n    // if (trusted) {\n    //   // TODO really want to run scripts?\n    //   Private.evalInnerHTMLScriptTags(host);\n    // }\n\n    // Handle default behavior of nodes.\n    Private.handleDefaults(host);\n\n    // Apply ids to the header nodes.\n    Private.headerAnchors(host);\n\n    // Patch the urls if a resolver is available.\n    let promise: Promise<void>;\n    if (resolver) {\n      promise = Private.handleUrls(host, resolver, linkHandler);\n    } else {\n      promise = Promise.resolve(undefined);\n    }\n\n    // Return the rendered promise.\n    return promise;\n  }).then(() => {\n    if (shouldTypeset && latexTypesetter) {\n      latexTypesetter.typeset(host);\n    }\n  });\n}\n\n\n/**\n * The namespace for the `renderMarkdown` function statics.\n */\nexport\nnamespace renderMarkdown {\n  /**\n   * The options for the `renderMarkdown` function.\n   */\n  export\n  interface IRenderOptions {\n    /**\n     * The host node for the rendered Markdown.\n     */\n    host: HTMLElement;\n\n    /**\n     * The Markdown source to render.\n     */\n    source: string;\n\n    /**\n     * Whether the source is trusted.\n     */\n    trusted: boolean;\n\n    /**\n     * The html sanitizer for untrusted source.\n     */\n    sanitizer: ISanitizer;\n\n    /**\n     * An optional url resolver.\n     */\n    resolver: IRenderMime.IResolver | null;\n\n    /**\n     * An optional link handler.\n     */\n    linkHandler: IRenderMime.ILinkHandler | null;\n\n    /**\n     * Whether the node should be typeset.\n     */\n    shouldTypeset: boolean;\n\n    /**\n     * The LaTeX typesetter for the application.\n     */\n    latexTypesetter: IRenderMime.ILatexTypesetter | null;\n  }\n}\n\n/**\n * Render SVG into a host node.\n *\n * @params options - The options for rendering.\n *\n * @returns A promise which resolves when rendering is complete.\n */\nexport\nfunction renderSVG(options: renderSVG.IRenderOptions): Promise<void> {\n  // Unpack the options.\n  let {\n    host, source, trusted, resolver, linkHandler,\n    shouldTypeset, latexTypesetter, unconfined\n  } = options;\n\n  // Clear the content if there is no source.\n  if (!source) {\n    host.textContent = '';\n    return Promise.resolve(undefined);\n  }\n\n  // Display a message if the source is not trusted.\n  if (!trusted) {\n    host.textContent = 'Cannot display an untrusted SVG. Maybe you need to run the cell?';\n    return Promise.resolve(undefined);\n  }\n\n  // Set the inner HTML of the host.\n  host.innerHTML = source;\n\n  if (unconfined === true) {\n    host.classList.add('jp-mod-unconfined');\n  }\n\n  // TODO\n  // what about script tags inside the svg?\n\n  // Patch the urls if a resolver is available.\n  let promise: Promise<void>;\n  if (resolver) {\n    promise = Private.handleUrls(host, resolver, linkHandler);\n  } else {\n    promise = Promise.resolve(undefined);\n  }\n\n  // Return the final rendered promise.\n  return promise.then(() => {\n    if (shouldTypeset && latexTypesetter) { latexTypesetter.typeset(host); }\n  });\n}\n\n\n/**\n * The namespace for the `renderSVG` function statics.\n */\nexport\nnamespace renderSVG {\n  /**\n   * The options for the `renderSVG` function.\n   */\n  export\n  interface IRenderOptions {\n    /**\n     * The host node for the rendered SVG.\n     */\n    host: HTMLElement;\n\n    /**\n     * The SVG source.\n     */\n    source: string;\n\n    /**\n     * Whether the source is trusted.\n     */\n    trusted: boolean;\n\n    /**\n     * An optional url resolver.\n     */\n    resolver: IRenderMime.IResolver | null;\n\n    /**\n     * An optional link handler.\n     */\n    linkHandler: IRenderMime.ILinkHandler | null;\n\n    /**\n     * Whether the node should be typeset.\n     */\n    shouldTypeset: boolean;\n\n    /**\n     * Whether the svg should be unconfined.\n     */\n    unconfined?: boolean;\n\n    /**\n     * The LaTeX typesetter for the application.\n     */\n    latexTypesetter: IRenderMime.ILatexTypesetter | null;\n  }\n}\n\n\n/**\n * Render text into a host node.\n *\n * @params options - The options for rendering.\n *\n * @returns A promise which resolves when rendering is complete.\n */\nexport\nfunction renderText(options: renderText.IRenderOptions): Promise<void> {\n  // Unpack the options.\n  let { host, source } = options;\n\n  // Escape the terminal codes and HTML tags.\n  let data = escape_for_html(source);\n\n  // Create the HTML content.\n  let content = ansi_to_html(data, { use_classes: true });\n\n  // Set the inner HTML for the host node.\n  host.innerHTML = `<pre>${content}</pre>`;\n\n  // Return the rendered promise.\n  return Promise.resolve(undefined);\n}\n\n\n/**\n * The namespace for the `renderText` function statics.\n */\nexport\nnamespace renderText {\n  /**\n   * The options for the `renderText` function.\n   */\n  export\n  interface IRenderOptions {\n    /**\n     * The host node for the text content.\n     */\n    host: HTMLElement;\n\n    /**\n     * The source text to render.\n     */\n    source: string;\n  }\n}\n\n\n/**\n * The namespace for module implementation details.\n */\nnamespace Private {\n  // This is disabled for now until we decide we actually really\n  // truly want to allow arbitrary script execution.\n  /**\n   * Eval the script tags contained in a host populated by `innerHTML`.\n   *\n   * When script tags are created via `innerHTML`, the browser does not\n   * evaluate them when they are added to the page. This function works\n   * around that by creating new equivalent script nodes manually, and\n   * replacing the originals.\n   */\n  // export\n  // function evalInnerHTMLScriptTags(host: HTMLElement): void {\n  //   // Create a snapshot of the current script nodes.\n  //   let scripts = toArray(host.getElementsByTagName('script'));\n\n  //   // Loop over each script node.\n  //   for (let script of scripts) {\n  //     // Skip any scripts which no longer have a parent.\n  //     if (!script.parentNode) {\n  //       continue;\n  //     }\n\n  //     // Create a new script node which will be clone.\n  //     let clone = document.createElement('script');\n\n  //     // Copy the attributes into the clone.\n  //     let attrs = script.attributes;\n  //     for (let i = 0, n = attrs.length; i < n; ++i) {\n  //       let { name, value } = attrs[i];\n  //       clone.setAttribute(name, value);\n  //     }\n\n  //     // Copy the text content into the clone.\n  //     clone.textContent = script.textContent;\n\n  //     // Replace the old script in the parent.\n  //     script.parentNode.replaceChild(clone, script);\n  //   }\n  // }\n\n  /**\n   * Render markdown for the specified content.\n   *\n   * @param content - The string of markdown to render.\n   *\n   * @return A promise which resolves with the rendered content.\n   */\n  export\n  function renderMarked(content: string): Promise<string> {\n    initializeMarked();\n    return new Promise<string>((resolve, reject) => {\n      marked(content, (err: any, content: string) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(content);\n        }\n      });\n    });\n  }\n\n  /**\n   * Handle the default behavior of nodes.\n   */\n  export\n  function handleDefaults(node: HTMLElement): void {\n    // Handle anchor elements.\n    let anchors = node.getElementsByTagName('a');\n    for (let i = 0; i < anchors.length; i++) {\n      let path = anchors[i].href;\n      if (URLExt.isLocal(path)) {\n        anchors[i].target = '_self';\n      } else {\n        anchors[i].target = '_blank';\n      }\n    }\n\n    // Handle image elements.\n    let imgs = node.getElementsByTagName('img');\n    for (let i = 0; i < imgs.length; i++) {\n      if (!imgs[i].alt) {\n        imgs[i].alt = 'Image';\n      }\n    }\n  }\n\n  /**\n   * Resolve the relative urls in element `src` and `href` attributes.\n   *\n   * @param node - The head html element.\n   *\n   * @param resolver - A url resolver.\n   *\n   * @param linkHandler - An optional link handler for nodes.\n   *\n   * @returns a promise fulfilled when the relative urls have been resolved.\n   */\n  export\n  function handleUrls(node: HTMLElement, resolver: IRenderMime.IResolver, linkHandler: IRenderMime.ILinkHandler | null): Promise<void> {\n    // Set up an array to collect promises.\n    let promises: Promise<void>[] = [];\n\n    // Handle HTML Elements with src attributes.\n    let nodes = node.querySelectorAll('*[src]');\n    for (let i = 0; i < nodes.length; i++) {\n      promises.push(handleAttr(nodes[i] as HTMLElement, 'src', resolver));\n    }\n\n    // Handle anchor elements.\n    let anchors = node.getElementsByTagName('a');\n    for (let i = 0; i < anchors.length; i++) {\n      promises.push(handleAnchor(anchors[i], resolver, linkHandler));\n    }\n\n    // Handle link elements.\n    let links = node.getElementsByTagName('link');\n    for (let i = 0; i < links.length; i++) {\n      promises.push(handleAttr(links[i], 'href', resolver));\n    }\n\n    // Wait on all promises.\n    return Promise.all(promises).then(() => undefined);\n  }\n\n  /**\n   * Apply ids to headers.\n   */\n  export\n  function headerAnchors(node: HTMLElement): void {\n    let headerNames = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'];\n    for (let headerType of headerNames) {\n      let headers = node.getElementsByTagName(headerType);\n      for (let i=0; i < headers.length; i++) {\n        let header = headers[i];\n        header.id = header.innerHTML.replace(/ /g, '-');\n        let anchor = document.createElement('a');\n        anchor.target = '_self';\n        anchor.textContent = '¶';\n        anchor.href = '#' + header.id;\n        anchor.classList.add('jp-InternalAnchorLink');\n        header.appendChild(anchor);\n      }\n    }\n  }\n\n  /**\n   * Handle a node with a `src` or `href` attribute.\n   */\n  function handleAttr(node: HTMLElement, name: 'src' | 'href', resolver: IRenderMime.IResolver): Promise<void> {\n    let source = node.getAttribute(name);\n    if (!source || URLExt.parse(source).protocol === 'data:') {\n      return Promise.resolve(undefined);\n    }\n    node.setAttribute(name, '');\n    return resolver.resolveUrl(source).then(path => {\n      return resolver.getDownloadUrl(path);\n    }).then(url => {\n      node.setAttribute(name, url);\n    }).catch(err => {\n      // If there was an error getting the url,\n      // just make it an empty link.\n      node.setAttribute(name, '');\n    });\n  }\n\n  /**\n   * Handle an anchor node.\n   */\n  function handleAnchor(anchor: HTMLAnchorElement, resolver: IRenderMime.IResolver, linkHandler: IRenderMime.ILinkHandler | null): Promise<void> {\n    // Get the link path without the location prepended.\n    // (e.g. \"./foo.md#Header 1\" vs \"http://localhost:8888/foo.md#Header 1\")\n    let href = anchor.getAttribute('href');\n    // Bail if it is not a file-like url.\n    if (!href || href.indexOf('://') !== -1 && href.indexOf('//') === 0) {\n      return Promise.resolve(undefined);\n    }\n    // Remove the hash until we can handle it.\n    let hash = anchor.hash;\n    if (hash) {\n      // Handle internal link in the file.\n      if (hash === href) {\n        anchor.target = '_self';\n        return Promise.resolve(undefined);\n      }\n      // For external links, remove the hash until we have hash handling.\n      href = href.replace(hash, '');\n    }\n    // Get the appropriate file path.\n    return resolver.resolveUrl(href).then(path => {\n      // Handle the click override.\n      if (linkHandler && URLExt.isLocal(path)) {\n        linkHandler.handleLink(anchor, path);\n      }\n      // Get the appropriate file download path.\n      return resolver.getDownloadUrl(path);\n    }).then(url => {\n      // Set the visible anchor.\n      anchor.href = url + hash;\n    }).catch(err => {\n      // If there was an error getting the url,\n      // just make it an empty link.\n      anchor.href = '';\n    });\n  }\n\n  let markedInitialized = false;\n\n  /**\n   * Support GitHub flavored Markdown, leave sanitizing to external library.\n   */\n  function initializeMarked(): void {\n    if (markedInitialized) {\n      return;\n    }\n    markedInitialized = true;\n    marked.setOptions({\n      gfm: true,\n      sanitize: false,\n      tables: true,\n      // breaks: true; We can't use GFM breaks as it causes problems with tables\n      langPrefix: `cm-s-${CodeMirrorEditor.defaultConfig.theme} language-`,\n      highlight: (code, lang, callback) => {\n        let cb = (err: Error | null, code: string) => {\n          if (callback) {\n            callback(err, code);\n          }\n          return code;\n        };\n        if (!lang) {\n          // no language, no highlight\n          return cb(null, code);\n        }\n        Mode.ensure(lang).then(spec => {\n          let el = document.createElement('div');\n          if (!spec) {\n            console.log(`No CodeMirror mode: ${lang}`);\n            return cb(null, code);\n          }\n          try {\n            Mode.run(code, spec.mime, el);\n            return cb(null, el.innerHTML);\n          } catch (err) {\n            console.log(`Failed to highlight ${lang} code`, err);\n            return cb(err, code);\n          }\n        }).catch(err => {\n          console.log(`No CodeMirror mode: ${lang}`);\n          console.log(`Require CodeMirror mode error: ${err}`);\n          return cb(null, code);\n        });\n        return code;\n      }\n    });\n  }\n}\n"]}