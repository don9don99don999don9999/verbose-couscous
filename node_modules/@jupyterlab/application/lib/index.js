"use strict";
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
// Local CSS must be loaded prior to loading other libs.
require("../style/index.css");
var coreutils_1 = require("@jupyterlab/coreutils");
var apputils_1 = require("@jupyterlab/apputils");
var docregistry_1 = require("@jupyterlab/docregistry");
var services_1 = require("@jupyterlab/services");
var application_1 = require("@phosphor/application");
var disposable_1 = require("@phosphor/disposable");
var mimerenderers_1 = require("./mimerenderers");
var shell_1 = require("./shell");
var shell_2 = require("./shell");
exports.ApplicationShell = shell_2.ApplicationShell;
var layoutrestorer_1 = require("./layoutrestorer");
exports.ILayoutRestorer = layoutrestorer_1.ILayoutRestorer;
exports.LayoutRestorer = layoutrestorer_1.LayoutRestorer;
var router_1 = require("./router");
exports.IRouter = router_1.IRouter;
exports.Router = router_1.Router;
/**
 * JupyterLab is the main application class. It is instantiated once and shared.
 */
var JupyterLab = /** @class */ (function (_super) {
    __extends(JupyterLab, _super);
    /**
     * Construct a new JupyterLab object.
     */
    function JupyterLab(options) {
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, { shell: new shell_1.ApplicationShell() }) || this;
        _this._dirtyCount = 0;
        _this._info = __assign({}, JupyterLab.defaultInfo, options);
        if (_this._info.devMode) {
            _this.shell.addClass('jp-mod-devMode');
        }
        _this.serviceManager = new services_1.ServiceManager();
        var linker = new apputils_1.CommandLinker({ commands: _this.commands });
        _this.commandLinker = linker;
        var registry = _this.docRegistry = new docregistry_1.DocumentRegistry();
        registry.addModelFactory(new docregistry_1.Base64ModelFactory());
        if (options.mimeExtensions) {
            var plugins = mimerenderers_1.createRendermimePlugins(options.mimeExtensions);
            plugins.forEach(function (plugin) { _this.registerPlugin(plugin); });
        }
        return _this;
    }
    Object.defineProperty(JupyterLab.prototype, "isDirty", {
        /**
         * Whether the application is dirty.
         */
        get: function () {
            return this._dirtyCount > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JupyterLab.prototype, "info", {
        /**
         * The information about the application.
         */
        get: function () {
            return this._info;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JupyterLab.prototype, "restored", {
        /**
         * Promise that resolves when state is first restored, returning layout description.
         *
         * #### Notes
         * This is just a reference to `shell.restored`.
         */
        get: function () {
            return this.shell.restored;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Set the application state to dirty.
     *
     * @returns A disposable used to clear the dirty state for the caller.
     */
    JupyterLab.prototype.setDirty = function () {
        var _this = this;
        this._dirtyCount++;
        return new disposable_1.DisposableDelegate(function () {
            _this._dirtyCount = Math.max(0, _this._dirtyCount - 1);
        });
    };
    /**
     * Register plugins from a plugin module.
     *
     * @param mod - The plugin module to register.
     */
    JupyterLab.prototype.registerPluginModule = function (mod) {
        var _this = this;
        var data = mod.default;
        // Handle commonjs exports.
        if (!mod.hasOwnProperty('__esModule')) {
            data = mod;
        }
        if (!Array.isArray(data)) {
            data = [data];
        }
        data.forEach(function (item) { _this.registerPlugin(item); });
    };
    /**
     * Register the plugins from multiple plugin modules.
     *
     * @param mods - The plugin modules to register.
     */
    JupyterLab.prototype.registerPluginModules = function (mods) {
        var _this = this;
        mods.forEach(function (mod) { _this.registerPluginModule(mod); });
    };
    return JupyterLab;
}(application_1.Application));
exports.JupyterLab = JupyterLab;
/**
 * The namespace for `JupyterLab` class statics.
 */
(function (JupyterLab) {
    /**
     * The default application info.
     */
    JupyterLab.defaultInfo = {
        name: coreutils_1.PageConfig.getOption('appName') || 'JupyterLab',
        namespace: coreutils_1.PageConfig.getOption('appNamespace'),
        version: coreutils_1.PageConfig.getOption('appVersion') || 'unknown',
        devMode: coreutils_1.PageConfig.getOption('devMode').toLowerCase() === 'true',
        deferred: { patterns: [], matches: [] },
        disabled: { patterns: [], matches: [] },
        mimeExtensions: [],
        urls: {
            page: coreutils_1.PageConfig.getOption('pageUrl'),
            public: coreutils_1.PageConfig.getOption('publicUrl'),
            settings: coreutils_1.PageConfig.getOption('settingsUrl'),
            themes: coreutils_1.PageConfig.getOption('themesUrl')
        },
        directories: {
            appSettings: coreutils_1.PageConfig.getOption('appSettingsDir'),
            schemas: coreutils_1.PageConfig.getOption('schemasDir'),
            static: coreutils_1.PageConfig.getOption('staticDir'),
            templates: coreutils_1.PageConfig.getOption('templatesDir'),
            themes: coreutils_1.PageConfig.getOption('themesDir'),
            userSettings: coreutils_1.PageConfig.getOption('userSettingsDir'),
            serverRoot: coreutils_1.PageConfig.getOption('serverRoot')
        },
        filesCached: coreutils_1.PageConfig.getOption('cacheFiles').toLowerCase() === 'true'
    };
})(JupyterLab = exports.JupyterLab || (exports.JupyterLab = {}));
exports.JupyterLab = JupyterLab;
