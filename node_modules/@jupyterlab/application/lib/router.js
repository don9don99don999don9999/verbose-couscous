"use strict";
/*-----------------------------------------------------------------------------
| Copyright (c) Jupyter Development Team.
| Distributed under the terms of the Modified BSD License.
|----------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
var coreutils_1 = require("@jupyterlab/coreutils");
var coreutils_2 = require("@phosphor/coreutils");
var disposable_1 = require("@phosphor/disposable");
var signaling_1 = require("@phosphor/signaling");
/* tslint:disable */
/**
 * The URL Router token.
 */
exports.IRouter = new coreutils_2.Token('@jupyterlab/application:IRouter');
/**
 * A static class that routes URLs within the application.
 */
var Router = /** @class */ (function () {
    /**
     * Create a URL router.
     */
    function Router(options) {
        this._routed = new signaling_1.Signal(this);
        this._rules = new Map();
        this.base = options.base;
        this.commands = options.commands;
    }
    Object.defineProperty(Router.prototype, "routed", {
        /**
         * A signal emitted when the router routes a route.
         */
        get: function () {
            return this._routed;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Register to route a path pattern to a command.
     *
     * @param options - The route registration options.
     *
     * @returns A disposable that removes the registered rul from the router.
     */
    Router.prototype.register = function (options) {
        var command = options.command, pattern = options.pattern;
        var rank = 'rank' in options ? options.rank : 100;
        var rules = this._rules;
        rules.set(pattern, { command: command, rank: rank });
        return new disposable_1.DisposableDelegate(function () { rules.delete(pattern); });
    };
    /**
     * Route a specific path to an action.
     *
     * @param url - The URL string that will be routed.
     *
     * #### Notes
     * If a pattern is matched, its command will be invoked with arguments that
     * match the `IRouter.ICommandArgs` interface.
     */
    Router.prototype.route = function (url) {
        var _this = this;
        var parsed = coreutils_1.URLExt.parse(url.replace(this.base, ''));
        var args = { path: parsed.pathname, search: parsed.search };
        var matches = [];
        // Collect all rules that match the URL.
        this._rules.forEach(function (rule, pattern) {
            if (parsed.pathname.match(pattern)) {
                matches.push(rule);
            }
        });
        // Order the matching rules by rank and execute them.
        matches.sort(function (a, b) { return a.rank - b.rank; }).forEach(function (rule) {
            // Ignore the results of each executed promise.
            _this.commands.execute(rule.command, args).catch(function (reason) {
                console.warn("Routing " + url + " using " + rule.command + " failed:", reason);
            });
        });
        this._routed.emit(args);
    };
    return Router;
}());
exports.Router = Router;
