{"version":3,"file":"layoutrestorer.js","sourceRoot":"","sources":["../../../../application/src/layoutrestorer.ts"],"names":[],"mappings":"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","sourcesContent":["/*-----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\n\nimport {\n  InstanceTracker\n} from '@jupyterlab/apputils';\n\nimport {\n  IStateDB\n} from '@jupyterlab/coreutils';\n\nimport {\n  CommandRegistry\n} from '@phosphor/commands';\n\nimport {\n  JSONObject, PromiseDelegate, ReadonlyJSONObject, Token\n} from '@phosphor/coreutils';\n\nimport {\n  AttachedProperty\n} from '@phosphor/properties';\n\nimport {\n  DockPanel, Widget\n} from '@phosphor/widgets';\n\nimport {\n  ApplicationShell\n} from './shell';\n\n\n\n/* tslint:disable */\n/**\n * The layout restorer token.\n */\nexport\nconst ILayoutRestorer = new Token<ILayoutRestorer>('@jupyterlab/application:ILayoutRestorer');\n/* tslint:enable */\n\n\n/**\n * A static class that restores the widgets of the application when it reloads.\n */\nexport\ninterface ILayoutRestorer {\n  /**\n   * A promise resolved when the layout restorer is ready to receive signals.\n   */\n  restored: Promise<void>;\n\n  /**\n   * Add a widget to be tracked by the layout restorer.\n   */\n  add(widget: Widget, name: string): void;\n\n  /**\n   * Restore the widgets of a particular instance tracker.\n   *\n   * @param tracker - The instance tracker whose widgets will be restored.\n   *\n   * @param options - The restoration options.\n   */\n  restore(tracker: InstanceTracker<any>, options: ILayoutRestorer.IRestoreOptions<any>): void;\n}\n\n\n/**\n * A namespace for the layout restorer.\n */\nexport\nnamespace ILayoutRestorer {\n  /**\n   * The state restoration configuration options.\n   */\n  export\n  interface IRestoreOptions<T extends Widget> {\n    /**\n     * The command to execute when restoring instances.\n     */\n    command: string;\n\n    /**\n     * A function that returns the args needed to restore an instance.\n     */\n    args: (widget: T) => ReadonlyJSONObject;\n\n    /**\n     * A function that returns a unique persistent name for this instance.\n     */\n    name: (widget: T) => string;\n\n    /**\n     * The point after which it is safe to restore state.\n     *\n     * #### Notes\n     * By definition, this promise or promises will happen after the application\n     * has `started`.\n     */\n    when?: Promise<any> | Array<Promise<any>>;\n  }\n}\n\n\n/**\n * The state database key for restorer data.\n */\nconst KEY = 'layout-restorer:data';\n\n\n/**\n * The default implementation of a layout restorer.\n *\n * #### Notes\n * The lifecycle for state restoration is subtle. The sequence of events is:\n *\n * 1. The layout restorer plugin is instantiated and makes a `fetch` call to\n *    the database that stores the layout restoration data. The `fetch` call\n *    returns a promise that resolves in step 6, below.\n *\n * 2. Other plugins that care about state restoration require the layout\n *    restorer as a dependency.\n *\n * 3. As each load-time plugin initializes (which happens before the lab\n *    application has `started`), it instructs the layout restorer whether\n *    the restorer ought to `restore` its state by passing in its tracker.\n *    Alternatively, a plugin that does not require its own instance tracker\n *    (because perhaps it only creates a single widget, like a command palette),\n *    can simply `add` its widget along with a persistent unique name to the\n *    layout restorer so that its layout state can be restored when the lab\n *    application restores.\n *\n * 4. After all the load-time plugins have finished initializing, the lab\n *    application `started` promise will resolve. This is the `first`\n *    promise that the layout restorer waits for. By this point, all of the\n *    plugins that care about restoration will have instructed the layout\n *    restorer to `restore` their state.\n *\n * 5. The layout restorer will then instruct each plugin's instance tracker\n *    to restore its state and reinstantiate whichever widgets it wants. The\n *    tracker returns a promise to the layout restorer that resolves when it\n *    has completed restoring the tracked widgets it cares about.\n *\n * 6. As each instance tracker finishes restoring the widget instances it cares\n *    about, it resolves the promise that was made to the layout restorer\n *    (in step 5). After all of the promises that the restorer is awaiting have\n *    resolved, the restorer then resolves the outstanding `fetch` promise\n *    (from step 1) and hands off a layout state object to the application\n *    shell's `restoreLayout` method for restoration.\n *\n * 7. Once the application shell has finished restoring the layout, the\n *    JupyterLab application's `restored` promise is resolved.\n *\n * Of particular note are steps 5 and 6: since state restoration of plugins\n * is accomplished by executing commands, the command that is used to restore\n * the state of each plugin must return a promise that only resolves when the\n * widget has been created and added to the plugin's instance tracker.\n */\nexport\nclass LayoutRestorer implements ILayoutRestorer {\n  /**\n   * Create a layout restorer.\n   */\n  constructor(options: LayoutRestorer.IOptions) {\n    this._registry = options.registry;\n    this._state = options.state;\n    this._first = options.first;\n    this._first\n      .then(() => { this._firstDone = true; })\n      .then(() => Promise.all(this._promises))\n      .then(() => {\n        this._promisesDone = true;\n\n        // Release the tracker set.\n        this._trackers.clear();\n      })\n      .then(() => { this._restored.resolve(void 0); });\n  }\n\n  /**\n   * A promise resolved when the layout restorer is ready to receive signals.\n   */\n  get restored(): Promise<void> {\n    return this._restored.promise;\n  }\n\n  /**\n   * Add a widget to be tracked by the layout restorer.\n   */\n  add(widget: Widget, name: string): void {\n    Private.nameProperty.set(widget, name);\n    this._widgets.set(name, widget);\n    widget.disposed.connect(this._onWidgetDisposed, this);\n  }\n\n  /**\n   * Fetch the layout state for the application.\n   *\n   * #### Notes\n   * Fetching the layout relies on all widget restoration to be complete, so\n   * calls to `fetch` are guaranteed to return after restoration is complete.\n   */\n  fetch(): Promise<ApplicationShell.ILayout> {\n    const blank: ApplicationShell.ILayout = {\n      fresh: true, mainArea: null, leftArea: null, rightArea: null\n    };\n    let layout = this._state.fetch(KEY);\n\n    return Promise.all([layout, this.restored]).then(([data]) => {\n      if (!data) {\n        return blank;\n      }\n\n      const { main, left, right } = data as Private.ILayout;\n\n      // If any data exists, then this is not a fresh session.\n      const fresh = false;\n\n      // Rehydrate main area.\n      const mainArea = this._rehydrateMainArea(main);\n\n      // Rehydrate left area.\n      const leftArea = this._rehydrateSideArea(left);\n\n      // Rehydrate right area.\n      const rightArea = this._rehydrateSideArea(right);\n\n      return { fresh, mainArea, leftArea, rightArea };\n    }).catch(() => blank); // Let fetch fail gracefully; return blank slate.\n  }\n\n  /**\n   * Restore the widgets of a particular instance tracker.\n   *\n   * @param tracker - The instance tracker whose widgets will be restored.\n   *\n   * @param options - The restoration options.\n   */\n  restore(tracker: InstanceTracker<Widget>, options: ILayoutRestorer.IRestoreOptions<Widget>): Promise<any> {\n    const warning = 'restore() can only be called before `first` has resolved.';\n\n    if (this._firstDone) {\n      console.warn(warning);\n      return Promise.reject(warning);\n    }\n\n    const { namespace } = tracker;\n    if (this._trackers.has(namespace)) {\n      let warning = `A tracker namespaced ${namespace} was already restored.`;\n      console.warn(warning);\n      return Promise.reject(warning);\n    }\n\n    const { args, command, name, when } = options;\n\n    // Add the tracker to the private trackers collection.\n    this._trackers.add(namespace);\n\n    // Whenever a new widget is added to the tracker, record its name.\n    tracker.widgetAdded.connect((sender: any, widget: Widget) => {\n      const widgetName = name(widget);\n      if (widgetName) {\n        this.add(widget, `${namespace}:${widgetName}`);\n      }\n    }, this);\n\n    // Whenever a widget is updated, get its new name.\n    tracker.widgetUpdated.connect((sender, widget) => {\n      const widgetName = name(widget);\n      if (widgetName) {\n        let name = `${namespace}:${widgetName}`;\n        Private.nameProperty.set(widget, name);\n        this._widgets.set(name, widget);\n      }\n    });\n\n    const first = this._first;\n    const promise = tracker.restore({\n      args, command, name,\n      registry: this._registry,\n      state: this._state,\n      when: when ? [first].concat(when) : first\n    });\n\n    this._promises.push(promise);\n    return promise;\n  }\n\n  /**\n   * Save the layout state for the application.\n   */\n  save(data: ApplicationShell.ILayout): Promise<void> {\n    // If there are promises that are unresolved, bail.\n    if (!this._promisesDone) {\n      let warning = 'save() was called prematurely.';\n      console.warn(warning);\n      return Promise.reject(warning);\n    }\n\n    let dehydrated: Private.ILayout = {};\n\n    // Dehydrate main area.\n    dehydrated.main = this._dehydrateMainArea(data.mainArea);\n\n    // Dehydrate left area.\n    dehydrated.left = this._dehydrateSideArea(data.leftArea);\n\n    // Dehydrate right area.\n    dehydrated.right = this._dehydrateSideArea(data.rightArea);\n\n    return this._state.save(KEY, dehydrated);\n  }\n\n  /**\n   * Dehydrate a main area description into a serializable object.\n   */\n  private _dehydrateMainArea(area: ApplicationShell.IMainArea | null): Private.IMainArea | null {\n    if (!area) {\n      return null;\n    }\n    return Private.serializeMain(area);\n  }\n\n  /**\n   * Reydrate a serialized main area description object.\n   *\n   * #### Notes\n   * This function consumes data that can become corrupted, so it uses type\n   * coercion to guarantee the dehydrated object is safely processed.\n   */\n  private _rehydrateMainArea(area?: Private.IMainArea | null): ApplicationShell.IMainArea | null {\n    if (!area) {\n      return null;\n    }\n    return Private.deserializeMain(area, this._widgets);\n  }\n\n  /**\n   * Dehydrate a side area description into a serializable object.\n   */\n  private _dehydrateSideArea(area?: ApplicationShell.ISideArea | null): Private.ISideArea | null {\n    if (!area) {\n      return null;\n    }\n    let dehydrated: Private.ISideArea = { collapsed: area.collapsed };\n    if (area.currentWidget) {\n      let current = Private.nameProperty.get(area.currentWidget);\n      if (current) {\n        dehydrated.current = current;\n      }\n    }\n    if (area.widgets) {\n      dehydrated.widgets = area.widgets\n        .map(widget => Private.nameProperty.get(widget))\n        .filter(name => !!name);\n    }\n    return dehydrated;\n  }\n\n  /**\n   * Reydrate a serialized side area description object.\n   *\n   * #### Notes\n   * This function consumes data that can become corrupted, so it uses type\n   * coercion to guarantee the dehydrated object is safely processed.\n   */\n  private _rehydrateSideArea(area?: Private.ISideArea | null): ApplicationShell.ISideArea {\n    if (!area) {\n      return { collapsed: true, currentWidget: null, widgets: null };\n    }\n    let internal = this._widgets;\n    const collapsed = area.hasOwnProperty('collapsed') ? !!area.collapsed\n      : false;\n    const currentWidget = area.current && internal.has(`${area.current}`) ?\n      internal.get(`${area.current}`) : null;\n    const widgets = !Array.isArray(area.widgets) ? null\n      : area.widgets\n          .map(name => internal.has(`${name}`) ? internal.get(`${name}`) : null)\n          .filter(widget => !!widget);\n    return {\n      collapsed,\n      currentWidget: currentWidget!,\n      widgets: widgets as Widget[] | null\n    };\n  }\n\n  /**\n   * Handle a widget disposal.\n   */\n  private _onWidgetDisposed(widget: Widget): void {\n    let name = Private.nameProperty.get(widget);\n    this._widgets.delete(name);\n  }\n\n  private _first: Promise<any>;\n  private _firstDone = false;\n  private _promisesDone = false;\n  private _promises: Promise<any>[] = [];\n  private _restored = new PromiseDelegate<void>();\n  private _registry: CommandRegistry ;\n  private _state: IStateDB;\n  private _trackers = new Set<string>();\n  private _widgets = new Map<string, Widget>();\n}\n\n\n/**\n * A namespace for `LayoutRestorer` statics.\n */\nexport\nnamespace LayoutRestorer {\n  /**\n   * The configuration options for layout restorer instantiation.\n   */\n  export\n  interface IOptions {\n    /**\n     * The initial promise that has to be resolved before restoration.\n     *\n     * #### Notes\n     * This promise should equal the JupyterLab application `started` notifier.\n     */\n    first: Promise<any>;\n\n    /**\n     * The application command registry.\n     */\n    registry: CommandRegistry;\n\n    /**\n     * The state database instance.\n     */\n    state: IStateDB;\n  }\n}\n\n/*\n * A namespace for private data.\n */\nnamespace Private {\n  /**\n   * The dehydrated state of the application layout.\n   *\n   * #### Notes\n   * This format is JSON serializable and saved in the state database.\n   * It is meant to be a data structure can translate into an\n   * `ApplicationShell.ILayout` data structure for consumption by\n   * the application shell.\n   */\n  export\n  interface ILayout extends JSONObject {\n    /**\n     * The main area of the user interface.\n     */\n    main?: IMainArea | null;\n\n    /**\n     * The left area of the user interface.\n     */\n    left?: ISideArea | null;\n\n    /**\n     * The right area of the user interface.\n     */\n    right?: ISideArea | null;\n  }\n\n  /**\n   * The restorable description of the main application area.\n   */\n  export\n  interface IMainArea extends JSONObject {\n    /**\n     * The current widget that has application focus.\n     */\n    current?: string | null;\n\n    /**\n     * The main application dock panel.\n     */\n    dock?: ISplitArea | ITabArea | null;\n\n    /**\n     * The document mode (i.e., multiple/single) of the main dock panel.\n     */\n    mode?: DockPanel.Mode | null;\n  }\n\n  /**\n   * The restorable description of a sidebar in the user interface.\n   */\n  export\n  interface ISideArea extends JSONObject {\n    /**\n     * A flag denoting whether the sidebar has been collapsed.\n     */\n    collapsed?: boolean | null;\n\n    /**\n     * The current widget that has side area focus.\n     */\n    current?: string | null;\n\n    /**\n     * The collection of widgets held by the sidebar.\n     */\n    widgets?: Array<string> | null;\n  }\n\n  /**\n   * The restorable description of a tab area in the user interface.\n   */\n  export\n  interface ITabArea extends JSONObject {\n    /**\n     * The type indicator of the serialized tab area.\n     */\n    type: 'tab-area';\n\n    /**\n     * The widgets in the tab area.\n     */\n    widgets: Array<string> | null;\n\n    /**\n     * The index of the selected tab.\n     */\n    currentIndex: number;\n  }\n\n  /**\n   * The restorable description of a split area in the user interface.\n   */\n  export\n  interface ISplitArea extends JSONObject {\n    /**\n     * The type indicator of the serialized split area.\n     */\n    type: 'split-area';\n\n    /**\n     * The orientation of the split area.\n     */\n    orientation: 'horizontal' | 'vertical';\n\n    /**\n     * The children in the split area.\n     */\n    children: Array<ITabArea | ISplitArea> | null;\n\n    /**\n     * The sizes of the children.\n     */\n    sizes: Array<number>;\n  }\n\n  /**\n   * An attached property for a widget's ID in the state database.\n   */\n  export\n  const nameProperty = new AttachedProperty<Widget, string>({\n    name: 'name',\n    create: owner => ''\n  });\n\n  /**\n   * Serialize individual areas within the main area.\n   */\n  function serializeArea(area: ApplicationShell.AreaConfig | null): ITabArea | ISplitArea | null {\n    if (!area || !area.type) {\n      return null;\n    }\n\n    if (area.type === 'tab-area') {\n      return {\n        type: 'tab-area',\n        currentIndex: area.currentIndex,\n        widgets: area.widgets\n          .map(widget => nameProperty.get(widget))\n          .filter(name => !!name)\n      };\n    }\n\n    return {\n      type: 'split-area',\n      orientation: area.orientation,\n      sizes: area.sizes,\n      children: area.children.map(serializeArea)\n                  .filter(area => !!area) as (ITabArea | ISplitArea)[]\n    };\n  }\n\n  /**\n   * Return a dehydrated, serializable version of the main dock panel.\n   */\n  export\n  function serializeMain(area: ApplicationShell.IMainArea): IMainArea {\n    let dehydrated: IMainArea = {\n      dock: area && area.dock && serializeArea(area.dock.main) || null\n    };\n    if (area) {\n      dehydrated.mode = area.mode;\n      if (area.currentWidget) {\n        let current = Private.nameProperty.get(area.currentWidget);\n        if (current) {\n          dehydrated.current = current;\n        }\n      }\n    }\n    return dehydrated;\n  }\n\n  /**\n   * Deserialize individual areas within the main area.\n   *\n   * #### Notes\n   * Because this data comes from a potentially unreliable foreign source, it is\n   * typed as a `JSONObject`; but the actual expected type is:\n   * `ITabArea | ISplitArea`.\n   *\n   * For fault tolerance, types are manually checked in deserialization.\n   */\n  function deserializeArea(area: JSONObject, names: Map<string, Widget>): ApplicationShell.AreaConfig | null {\n    if (!area) {\n      return null;\n    }\n\n    // Because this data is saved to a foreign data source, its type safety is\n    // not guaranteed when it is retrieved, so exhaustive checks are necessary.\n    const type = (area as any).type as string || 'unknown';\n    if (type === 'unknown' || (type !== 'tab-area' && type !== 'split-area')) {\n      console.warn(`Attempted to deserialize unknown type: ${type}`);\n      return null;\n    }\n\n    if (type === 'tab-area') {\n      const { currentIndex, widgets } = area as ITabArea;\n      let hydrated: ApplicationShell.AreaConfig = {\n        type: 'tab-area',\n        currentIndex: currentIndex || 0,\n        widgets: widgets && widgets.map(widget => names.get(widget))\n            .filter(widget => !!widget) as Widget[] || []\n      };\n\n      // Make sure the current index is within bounds.\n      if (hydrated.currentIndex > hydrated.widgets.length - 1) {\n        hydrated.currentIndex = 0;\n      }\n\n      return hydrated;\n    }\n\n    const { orientation, sizes, children } = area as ISplitArea;\n    let hydrated: ApplicationShell.AreaConfig = {\n      type: 'split-area',\n      orientation: orientation,\n      sizes: sizes || [],\n      children: children &&\n        children.map(child => deserializeArea(child, names))\n           .filter(widget => !!widget) as ApplicationShell.AreaConfig[] || []\n    };\n\n    return hydrated;\n  }\n\n  /**\n   * Return the hydrated version of the main dock panel, ready to restore.\n   *\n   * #### Notes\n   * Because this data comes from a potentially unreliable foreign source, it is\n   * typed as a `JSONObject`; but the actual expected type is: `IMainArea`.\n   *\n   * For fault tolerance, types are manually checked in deserialization.\n   */\n  export\n  function deserializeMain(area: JSONObject, names: Map<string, Widget>): ApplicationShell.IMainArea | null {\n    if (!area) {\n      return null;\n    }\n\n    const name = (area as any).current || null;\n    const dock = (area as any).dock || null;\n    const mode = (area as any).mode || null;\n\n    return {\n      currentWidget: name && names.has(name) && names.get(name) || null,\n      dock: dock ? { main: deserializeArea(dock, names) } : null,\n      mode: mode === 'multiple-document' || mode === 'single-document' ? mode\n        : null\n    };\n  }\n}\n"]}