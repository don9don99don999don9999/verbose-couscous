{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../application/src/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\n// Local CSS must be loaded prior to loading other libs.\nimport '../style/index.css';\n\nimport {\n  PageConfig\n} from '@jupyterlab/coreutils';\n\nimport {\n  CommandLinker\n} from '@jupyterlab/apputils';\n\nimport {\n  Base64ModelFactory, DocumentRegistry\n} from '@jupyterlab/docregistry';\n\nimport {\n  IRenderMime\n} from '@jupyterlab/rendermime-interfaces';\n\nimport {\n  ServiceManager\n} from '@jupyterlab/services';\n\nimport {\n  Application, IPlugin\n} from '@phosphor/application';\n\nimport {\n  DisposableDelegate, IDisposable\n} from '@phosphor/disposable';\n\nimport {\n  createRendermimePlugins\n} from './mimerenderers';\n\nimport {\n  ApplicationShell\n} from './shell';\n\nexport { ApplicationShell } from './shell';\nexport { ILayoutRestorer, LayoutRestorer } from './layoutrestorer';\nexport { IRouter, Router } from './router';\n\n\n/**\n * The type for all JupyterLab plugins.\n */\nexport\ntype JupyterLabPlugin<T> = IPlugin<JupyterLab, T>;\n\n\n/**\n * JupyterLab is the main application class. It is instantiated once and shared.\n */\nexport\nclass JupyterLab extends Application<ApplicationShell> {\n  /**\n   * Construct a new JupyterLab object.\n   */\n  constructor(options: JupyterLab.IOptions = {}) {\n    super({ shell: new ApplicationShell() });\n    this._info = { ...JupyterLab.defaultInfo, ...options };\n    if (this._info.devMode) {\n      this.shell.addClass('jp-mod-devMode');\n    }\n\n    this.serviceManager = new ServiceManager();\n\n    let linker = new CommandLinker({ commands: this.commands });\n    this.commandLinker = linker;\n\n    let registry = this.docRegistry = new DocumentRegistry();\n    registry.addModelFactory(new Base64ModelFactory());\n\n    if (options.mimeExtensions) {\n      let plugins = createRendermimePlugins(options.mimeExtensions);\n      plugins.forEach(plugin => { this.registerPlugin(plugin); });\n    }\n  }\n\n  /**\n   * The document registry instance used by the application.\n   */\n  readonly docRegistry: DocumentRegistry;\n\n  /**\n   * The command linker used by the application.\n   */\n  readonly commandLinker: CommandLinker;\n\n  /**\n   * The service manager used by the application.\n   */\n  readonly serviceManager: ServiceManager;\n\n  /**\n   * Whether the application is dirty.\n   */\n  get isDirty(): boolean {\n    return this._dirtyCount > 0;\n  }\n\n  /**\n   * The information about the application.\n   */\n  get info(): JupyterLab.IInfo {\n    return this._info;\n  }\n\n  /**\n   * Promise that resolves when state is first restored, returning layout description.\n   *\n   * #### Notes\n   * This is just a reference to `shell.restored`.\n   */\n  get restored(): Promise<ApplicationShell.ILayout> {\n    return this.shell.restored;\n  }\n\n  /**\n   * Set the application state to dirty.\n   *\n   * @returns A disposable used to clear the dirty state for the caller.\n   */\n  setDirty(): IDisposable {\n    this._dirtyCount++;\n    return new DisposableDelegate(() => {\n      this._dirtyCount = Math.max(0, this._dirtyCount - 1);\n    });\n  }\n\n  /**\n   * Register plugins from a plugin module.\n   *\n   * @param mod - The plugin module to register.\n   */\n  registerPluginModule(mod: JupyterLab.IPluginModule): void {\n    let data = mod.default;\n    // Handle commonjs exports.\n    if (!mod.hasOwnProperty('__esModule')) {\n      data = mod as any;\n    }\n    if (!Array.isArray(data)) {\n      data = [data];\n    }\n    data.forEach(item => { this.registerPlugin(item); });\n  }\n\n  /**\n   * Register the plugins from multiple plugin modules.\n   *\n   * @param mods - The plugin modules to register.\n   */\n  registerPluginModules(mods: JupyterLab.IPluginModule[]): void {\n    mods.forEach(mod => { this.registerPluginModule(mod); });\n  }\n\n  private _info: JupyterLab.IInfo;\n  private _dirtyCount = 0;\n}\n\n\n/**\n * The namespace for `JupyterLab` class statics.\n */\nexport\nnamespace JupyterLab {\n  /**\n   * The options used to initialize a JupyterLab object.\n   */\n  export\n  interface IOptions extends Partial<IInfo> {}\n\n  /**\n   * The information about a JupyterLab application.\n   */\n  export\n  interface IInfo {\n    /**\n     * The name of the JupyterLab application.\n     */\n    readonly name: string;\n\n    /**\n     * The version of the JupyterLab application.\n     */\n    readonly version: string;\n\n    /**\n     * The namespace/prefix plugins may use to denote their origin.\n     */\n    readonly namespace: string;\n\n    /**\n     * Whether the application is in dev mode.\n     */\n    readonly devMode: boolean;\n\n    /**\n     * The collection of deferred extension patterns and matched extensions.\n     */\n    readonly deferred: { patterns: string[], matches: string[] };\n\n    /**\n     * The collection of disabled extension patterns and matched extensions.\n     */\n    readonly disabled: { patterns: string[], matches: string[] };\n\n    /**\n     * The mime renderer extensions.\n     */\n    readonly mimeExtensions: IRenderMime.IExtensionModule[];\n\n    /**\n     * The urls used by the application.\n     */\n    readonly urls: {\n      readonly page: string,\n      readonly public: string,\n      readonly settings: string,\n      readonly themes: string\n    };\n\n    /**\n     * The local directories used by the application.\n     */\n    readonly directories: {\n      readonly appSettings: string,\n      readonly schemas: string,\n      readonly static: string,\n      readonly templates: string,\n      readonly themes: string,\n      readonly userSettings: string,\n      readonly serverRoot: string\n    };\n\n    /**\n     * Whether files are cached on the server.\n     */\n    readonly filesCached: boolean;\n  }\n\n  /**\n   * The default application info.\n   */\n  export\n  const defaultInfo: IInfo = {\n    name: PageConfig.getOption('appName') || 'JupyterLab',\n    namespace: PageConfig.getOption('appNamespace'),\n    version: PageConfig.getOption('appVersion') || 'unknown',\n    devMode: PageConfig.getOption('devMode').toLowerCase() === 'true',\n    deferred: { patterns: [], matches: [] },\n    disabled: { patterns: [], matches: [] },\n    mimeExtensions: [],\n    urls: {\n      page: PageConfig.getOption('pageUrl'),\n      public: PageConfig.getOption('publicUrl'),\n      settings: PageConfig.getOption('settingsUrl'),\n      themes: PageConfig.getOption('themesUrl')\n    },\n    directories: {\n      appSettings: PageConfig.getOption('appSettingsDir'),\n      schemas: PageConfig.getOption('schemasDir'),\n      static: PageConfig.getOption('staticDir'),\n      templates: PageConfig.getOption('templatesDir'),\n      themes: PageConfig.getOption('themesDir'),\n      userSettings: PageConfig.getOption('userSettingsDir'),\n      serverRoot: PageConfig.getOption('serverRoot')\n    },\n    filesCached: PageConfig.getOption('cacheFiles').toLowerCase() === 'true'\n  };\n\n  /**\n   * The interface for a module that exports a plugin or plugins as\n   * the default value.\n   */\n  export\n  interface IPluginModule {\n    /**\n     * The default export.\n     */\n    default: JupyterLabPlugin<any> | JupyterLabPlugin<any>[];\n  }\n}\n"]}