import '../style/index.css';
import { CommandLinker } from '@jupyterlab/apputils';
import { DocumentRegistry } from '@jupyterlab/docregistry';
import { IRenderMime } from '@jupyterlab/rendermime-interfaces';
import { ServiceManager } from '@jupyterlab/services';
import { Application, IPlugin } from '@phosphor/application';
import { IDisposable } from '@phosphor/disposable';
import { ApplicationShell } from './shell';
export { ApplicationShell } from './shell';
export { ILayoutRestorer, LayoutRestorer } from './layoutrestorer';
export { IRouter, Router } from './router';
/**
 * The type for all JupyterLab plugins.
 */
export declare type JupyterLabPlugin<T> = IPlugin<JupyterLab, T>;
/**
 * JupyterLab is the main application class. It is instantiated once and shared.
 */
export declare class JupyterLab extends Application<ApplicationShell> {
    /**
     * Construct a new JupyterLab object.
     */
    constructor(options?: JupyterLab.IOptions);
    /**
     * The document registry instance used by the application.
     */
    readonly docRegistry: DocumentRegistry;
    /**
     * The command linker used by the application.
     */
    readonly commandLinker: CommandLinker;
    /**
     * The service manager used by the application.
     */
    readonly serviceManager: ServiceManager;
    /**
     * Whether the application is dirty.
     */
    readonly isDirty: boolean;
    /**
     * The information about the application.
     */
    readonly info: JupyterLab.IInfo;
    /**
     * Promise that resolves when state is first restored, returning layout description.
     *
     * #### Notes
     * This is just a reference to `shell.restored`.
     */
    readonly restored: Promise<ApplicationShell.ILayout>;
    /**
     * Set the application state to dirty.
     *
     * @returns A disposable used to clear the dirty state for the caller.
     */
    setDirty(): IDisposable;
    /**
     * Register plugins from a plugin module.
     *
     * @param mod - The plugin module to register.
     */
    registerPluginModule(mod: JupyterLab.IPluginModule): void;
    /**
     * Register the plugins from multiple plugin modules.
     *
     * @param mods - The plugin modules to register.
     */
    registerPluginModules(mods: JupyterLab.IPluginModule[]): void;
    private _info;
    private _dirtyCount;
}
/**
 * The namespace for `JupyterLab` class statics.
 */
export declare namespace JupyterLab {
    /**
     * The options used to initialize a JupyterLab object.
     */
    interface IOptions extends Partial<IInfo> {
    }
    /**
     * The information about a JupyterLab application.
     */
    interface IInfo {
        /**
         * The name of the JupyterLab application.
         */
        readonly name: string;
        /**
         * The version of the JupyterLab application.
         */
        readonly version: string;
        /**
         * The namespace/prefix plugins may use to denote their origin.
         */
        readonly namespace: string;
        /**
         * Whether the application is in dev mode.
         */
        readonly devMode: boolean;
        /**
         * The collection of deferred extension patterns and matched extensions.
         */
        readonly deferred: {
            patterns: string[];
            matches: string[];
        };
        /**
         * The collection of disabled extension patterns and matched extensions.
         */
        readonly disabled: {
            patterns: string[];
            matches: string[];
        };
        /**
         * The mime renderer extensions.
         */
        readonly mimeExtensions: IRenderMime.IExtensionModule[];
        /**
         * The urls used by the application.
         */
        readonly urls: {
            readonly page: string;
            readonly public: string;
            readonly settings: string;
            readonly themes: string;
        };
        /**
         * The local directories used by the application.
         */
        readonly directories: {
            readonly appSettings: string;
            readonly schemas: string;
            readonly static: string;
            readonly templates: string;
            readonly themes: string;
            readonly userSettings: string;
            readonly serverRoot: string;
        };
        /**
         * Whether files are cached on the server.
         */
        readonly filesCached: boolean;
    }
    /**
     * The default application info.
     */
    const defaultInfo: IInfo;
    /**
     * The interface for a module that exports a plugin or plugins as
     * the default value.
     */
    interface IPluginModule {
        /**
         * The default export.
         */
        default: JupyterLabPlugin<any> | JupyterLabPlugin<any>[];
    }
}
