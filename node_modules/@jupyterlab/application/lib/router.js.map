{"version":3,"file":"router.js","sourceRoot":"","sources":["../../../../application/src/router.ts"],"names":[],"mappings":";AAAA;;;+EAG+E;;AAE/E,mDAE+B;AAM/B,iDAE6B;AAE7B,mDAE8B;AAE9B,iDAE6B;AAG7B,oBAAoB;AACpB;;GAEG;AAEG,QAAA,OAAO,GAAG,IAAI,iBAAK,CAAU,iCAAiC,CAAC,CAAC;AA4FtE;;GAEG;AACH;IAEE;;OAEG;IACH,gBAAY,OAAwB;QAuE5B,YAAO,GAAG,IAAI,kBAAM,CAA6B,IAAI,CAAC,CAAC;QACvD,WAAM,GAAG,IAAI,GAAG,EAAwB,CAAC;QAvE/C,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QACzB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;IACnC,CAAC;IAeD,sBAAI,0BAAM;QAHV;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;QACtB,CAAC;;;OAAA;IAED;;;;;;OAMG;IACH,yBAAQ,GAAR,UAAS,OAA8B;QAC7B,IAAA,yBAAO,EAAE,yBAAO,CAAa;QACrC,IAAM,IAAI,GAAG,MAAM,IAAI,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC;QACpD,IAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;QAE1B,KAAK,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE,OAAO,SAAA,EAAE,IAAI,MAAA,EAAE,CAAC,CAAC;QAEtC,MAAM,CAAC,IAAI,+BAAkB,CAAC,cAAQ,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAClE,CAAC;IAED;;;;;;;;OAQG;IACH,sBAAK,GAAL,UAAM,GAAW;QAAjB,iBAqBC;QApBC,IAAM,MAAM,GAAG,kBAAM,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;QACxD,IAAM,IAAI,GAAG,EAAE,IAAI,EAAE,MAAM,CAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,CAAC;QAC9D,IAAM,OAAO,GAAmB,EAAE,CAAC;QAEnC,wCAAwC;QACxC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAC,IAAI,EAAE,OAAO;YAChC,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBACnC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACrB,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,qDAAqD;QACrD,OAAO,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,EAAf,CAAe,CAAC,CAAC,OAAO,CAAC,UAAA,IAAI;YAClD,+CAA+C;YAC/C,KAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,KAAK,CAAC,UAAA,MAAM;gBACpD,OAAO,CAAC,IAAI,CAAC,aAAW,GAAG,eAAU,IAAI,CAAC,OAAO,aAAU,EAAE,MAAM,CAAC,CAAC;YACvE,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC1B,CAAC;IAIH,aAAC;AAAD,CAAC,AA9ED,IA8EC;AA7EK,wBAAM","sourcesContent":["/*-----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\n\nimport {\n  URLExt\n} from '@jupyterlab/coreutils';\n\nimport {\n  CommandRegistry\n} from '@phosphor/commands';\n\nimport {\n  ReadonlyJSONObject, Token\n} from '@phosphor/coreutils';\n\nimport {\n  DisposableDelegate, IDisposable\n} from '@phosphor/disposable';\n\nimport {\n  ISignal, Signal\n} from '@phosphor/signaling';\n\n\n/* tslint:disable */\n/**\n * The URL Router token.\n */\nexport\nconst IRouter = new Token<IRouter>('@jupyterlab/application:IRouter');\n/* tslint:enable */\n\n\n/**\n * A static class that routes URLs within the application.\n */\nexport\ninterface IRouter {\n  /**\n   * The base URL for the router.\n   */\n  readonly base: string;\n\n  /**\n   * The command registry used by the router.\n   */\n  readonly commands: CommandRegistry;\n\n  /**\n   * A signal emitted when the router routes a route.\n   */\n  readonly routed: ISignal<IRouter, IRouter.ICommandArgs>;\n\n  /**\n   * Register to route a path pattern to a command.\n   *\n   * @param options - The route registration options.\n   *\n   * @returns A disposable that removes the registered rul from the router.\n   */\n  register(options: IRouter.IRegisterArgs): IDisposable;\n\n  /**\n   * Route a specific path to an action.\n   *\n   * @param url - The URL string that will be routed.\n   *\n   * #### Notes\n   * If a pattern is matched, its command will be invoked with arguments that\n   * match the `IRouter.ICommandArgs` interface.\n   */\n  route(url: string): void;\n}\n\n\n/**\n * A namespace for the `IRouter` specification.\n */\nexport\nnamespace IRouter {\n  /**\n   * The arguments passed into a command execution when a path is routed.\n   */\n  export\n  interface ICommandArgs extends ReadonlyJSONObject {\n    /**\n     * The path that matched a routing pattern.\n     */\n    path: string;\n\n    /**\n     * The search element, including leading question mark (`'?'`), if any,\n     * of the path.\n     */\n    search: string;\n  }\n\n  /**\n   * The specification for registering a route with the router.\n   */\n  export\n  interface IRegisterArgs {\n    /**\n     * The command string that will be invoked upon matching.\n     */\n    command: string;\n\n    /**\n     * The regular expression that will be matched against URLs.\n     */\n    pattern: RegExp;\n\n    /**\n     * The rank order of the registered rule. A lower rank denotes a higher\n     * priority. The default rank is `100`.\n     */\n    rank?: number;\n  }\n}\n\n\n/**\n * A static class that routes URLs within the application.\n */\nexport\nclass Router implements IRouter {\n  /**\n   * Create a URL router.\n   */\n  constructor(options: Router.IOptions) {\n    this.base = options.base;\n    this.commands = options.commands;\n  }\n\n  /**\n   * The base URL for the router.\n   */\n  readonly base: string;\n\n  /**\n   * The command registry used by the router.\n   */\n  readonly commands: CommandRegistry;\n\n  /**\n   * A signal emitted when the router routes a route.\n   */\n  get routed(): ISignal<this, IRouter.ICommandArgs> {\n    return this._routed;\n  }\n\n  /**\n   * Register to route a path pattern to a command.\n   *\n   * @param options - The route registration options.\n   *\n   * @returns A disposable that removes the registered rul from the router.\n   */\n  register(options: IRouter.IRegisterArgs): IDisposable {\n    const { command, pattern } = options;\n    const rank = 'rank' in options ? options.rank : 100;\n    const rules = this._rules;\n\n    rules.set(pattern, { command, rank });\n\n    return new DisposableDelegate(() => { rules.delete(pattern); });\n  }\n\n  /**\n   * Route a specific path to an action.\n   *\n   * @param url - The URL string that will be routed.\n   *\n   * #### Notes\n   * If a pattern is matched, its command will be invoked with arguments that\n   * match the `IRouter.ICommandArgs` interface.\n   */\n  route(url: string): void {\n    const parsed = URLExt.parse(url.replace(this.base, ''));\n    const args = { path: parsed.pathname, search: parsed.search };\n    const matches: Private.Rule[] = [];\n\n    // Collect all rules that match the URL.\n    this._rules.forEach((rule, pattern) => {\n      if (parsed.pathname.match(pattern)) {\n        matches.push(rule);\n      }\n    });\n\n    // Order the matching rules by rank and execute them.\n    matches.sort((a, b) => a.rank - b.rank).forEach(rule => {\n      // Ignore the results of each executed promise.\n      this.commands.execute(rule.command, args).catch(reason => {\n        console.warn(`Routing ${url} using ${rule.command} failed:`, reason);\n      });\n    });\n\n    this._routed.emit(args);\n  }\n\n  private _routed = new Signal<this, IRouter.ICommandArgs>(this);\n  private _rules = new Map<RegExp, Private.Rule>();\n}\n\n\n/**\n * A namespace for `Router` class statics.\n */\nexport\nnamespace Router {\n  /**\n   * The options for instantiating a JupyterLab URL router.\n   */\n  export\n  interface IOptions {\n    /**\n     * The fully qualified base URL for the router.\n     */\n    base: string;\n\n    /**\n     * The command registry used by the router.\n     */\n    commands: CommandRegistry;\n  }\n}\n\n\n/**\n * A namespace for private module data.\n */\nnamespace Private {\n  /**\n   * The internal representation of a routing rule.\n   */\n  export\n  type Rule = { command: string; rank: number };\n}\n"]}