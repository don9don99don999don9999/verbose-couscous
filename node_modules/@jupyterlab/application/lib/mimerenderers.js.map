{"version":3,"file":"mimerenderers.js","sourceRoot":"","sources":["../../../../application/src/mimerenderers.ts"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,2DAA2D;;AAE3D,iDAE8B;AAE9B,uDAEiC;AAEjC,qDAEgC;AAUhC,mDAE0B;AAG1B;;GAEG;AACH,iCACiC,UAA0C;IACzE,IAAM,OAAO,GAA6B,EAAE,CAAC;IAE7C,UAAU,CAAC,OAAO,CAAC,UAAA,GAAG;QACpB,IAAI,IAAI,GAAG,GAAG,CAAC,OAAO,CAAC;QAEvB,2BAA2B;QAC3B,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YACtC,IAAI,GAAG,GAAU,CAAC;QACpB,CAAC;QACD,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACzB,IAAI,GAAG,CAAC,IAAI,CAA0C,CAAC;QACzD,CAAC;QACA,IAA8C;aAC5C,OAAO,CAAC,UAAA,IAAI,IAAM,OAAO,CAAC,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACtE,CAAC,CAAC,CAAC;IAEH,MAAM,CAAC,OAAO,CAAC;AACjB,CAAC;AAnBD,0DAmBC;AAGD;;GAEG;AACH,gCACgC,IAA4B;IAC1D,MAAM,CAAC;QACL,EAAE,EAAE,IAAI,CAAC,EAAE;QACX,QAAQ,EAAE,CAAC,gCAAe,EAAE,gCAAmB,CAAC;QAChD,SAAS,EAAE,IAAI;QACf,QAAQ,EAAE,UAAC,GAAe,EAAE,QAAyB,EAAE,UAA+B;YACpF,yBAAyB;YACzB,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC;gBAC5B,UAAU,CAAC,UAAU,CACnB,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,IAAI,CAChC,CAAC;YACJ,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;YAC9C,CAAC;YAED,6BAA6B;YAC7B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC,CAAC;gBACvC,MAAM,CAAC;YACT,CAAC;YAED,IAAI,QAAQ,GAAG,GAAG,CAAC,WAAW,CAAC;YAC/B,IAAI,OAAO,GAAgD,EAAE,CAAC;YAC9D,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC,CAAC,CAAC;gBACrD,OAAO,GAAG,IAAI,CAAC,4BAA4B,CAAC;YAC9C,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,OAAO,GAAG,CAAC,IAAI,CAAC,4BAAyE,CAAC,CAAC;YAC7F,CAAC;YAED,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;gBACnB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAA,EAAE;oBACvB,GAAG,CAAC,WAAW,CAAC,WAAW,CAAC,EAAgC,CAAC,CAAC;gBAChE,CAAC,CAAC,CAAC;YACL,CAAC;YAED,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM;gBACpB,IAAI,OAAO,GAAG,IAAI,iCAAmB,CAAC;oBACpC,aAAa,EAAE,IAAI,CAAC,aAAa;oBACjC,QAAQ,EAAE,IAAI,CAAC,QAAQ;oBACvB,UAAU,YAAA;oBACV,SAAS,EAAE,MAAM,CAAC,SAAS;oBAC3B,IAAI,EAAE,MAAM,CAAC,IAAI;oBACjB,eAAe,EAAE,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,eAAe,CAAC;oBAC7D,SAAS,EAAE,MAAM,CAAC,SAAS;oBAC3B,UAAU,EAAE,MAAM,CAAC,UAAU;iBAC9B,CAAC,CAAC;gBACH,QAAQ,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;gBAEnC,IAAM,WAAW,GAAG,OAAO,CAAC,IAAI,CAAC;gBACjC,IAAM,SAAS,GAAM,WAAW,cAAW,CAAC;gBAC5C,IAAM,OAAO,GAAG,IAAI,0BAAe,CAAe,EAAE,SAAS,WAAA,EAAE,CAAC,CAAC;gBAEjE,4BAA4B;gBAC5B,QAAQ,CAAC,OAAO,CAAC,OAAO,EAAE;oBACxB,OAAO,EAAE,iBAAiB;oBAC1B,IAAI,EAAE,UAAA,MAAM,IAAI,OAAA,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,EAAE,WAAW,EAAE,CAAC,EAArD,CAAqD;oBACrE,IAAI,EAAE,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,OAAO,CAAC,IAAI,EAAnB,CAAmB;iBACpC,CAAC,CAAC;gBAEH,OAAO,CAAC,aAAa,CAAC,OAAO,CAAC,UAAC,MAAM,EAAE,MAAM;oBAC3C,+DAA+D;oBAC/D,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,cAAQ,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACpE,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;gBACtB,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC;KACF,CAAC;AACJ,CAAC;AAnED,wDAmEC","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  InstanceTracker\n} from '@jupyterlab/apputils';\n\nimport {\n  MimeDocument, MimeDocumentFactory, DocumentRegistry\n} from '@jupyterlab/docregistry';\n\nimport {\n  IRenderMimeRegistry\n} from '@jupyterlab/rendermime';\n\nimport {\n  IRenderMime\n} from '@jupyterlab/rendermime-interfaces';\n\nimport {\n  JupyterLab, JupyterLabPlugin\n} from './index';\n\nimport {\n  ILayoutRestorer\n} from './layoutrestorer';\n\n\n/**\n * Create rendermime plugins for rendermime extension modules.\n */\nexport\nfunction createRendermimePlugins(extensions: IRenderMime.IExtensionModule[]): JupyterLabPlugin<void>[] {\n  const plugins: JupyterLabPlugin<void>[] = [];\n\n  extensions.forEach(mod => {\n    let data = mod.default;\n\n    // Handle CommonJS exports.\n    if (!mod.hasOwnProperty('__esModule')) {\n      data = mod as any;\n    }\n    if (!Array.isArray(data)) {\n      data = [data] as ReadonlyArray<IRenderMime.IExtension>;\n    }\n    (data as ReadonlyArray<IRenderMime.IExtension>)\n      .forEach(item => { plugins.push(createRendermimePlugin(item)); });\n  });\n\n  return plugins;\n}\n\n\n/**\n * Create rendermime plugins for rendermime extension modules.\n */\nexport\nfunction createRendermimePlugin(item: IRenderMime.IExtension): JupyterLabPlugin<void> {\n  return {\n    id: item.id,\n    requires: [ILayoutRestorer, IRenderMimeRegistry],\n    autoStart: true,\n    activate: (app: JupyterLab, restorer: ILayoutRestorer, rendermime: IRenderMimeRegistry) => {\n      // Add the mime renderer.\n      if (item.rank !== undefined) {\n        rendermime.addFactory(\n          item.rendererFactory, item.rank\n        );\n      } else {\n        rendermime.addFactory(item.rendererFactory);\n      }\n\n      // Handle the widget factory.\n      if (!item.documentWidgetFactoryOptions) {\n        return;\n      }\n\n      let registry = app.docRegistry;\n      let options: IRenderMime.IDocumentWidgetFactoryOptions[] = [];\n      if (Array.isArray(item.documentWidgetFactoryOptions)) {\n        options = item.documentWidgetFactoryOptions;\n      } else {\n        options = [item.documentWidgetFactoryOptions as IRenderMime.IDocumentWidgetFactoryOptions];\n      }\n\n      if (item.fileTypes) {\n        item.fileTypes.forEach(ft => {\n          app.docRegistry.addFileType(ft as DocumentRegistry.IFileType);\n        });\n      }\n\n      options.forEach(option => {\n        let factory = new MimeDocumentFactory({\n          renderTimeout: item.renderTimeout,\n          dataType: item.dataType,\n          rendermime,\n          modelName: option.modelName,\n          name: option.name,\n          primaryFileType: registry.getFileType(option.primaryFileType),\n          fileTypes: option.fileTypes,\n          defaultFor: option.defaultFor\n        });\n        registry.addWidgetFactory(factory);\n\n        const factoryName = factory.name;\n        const namespace = `${factoryName}-renderer`;\n        const tracker = new InstanceTracker<MimeDocument>({ namespace });\n\n        // Handle state restoration.\n        restorer.restore(tracker, {\n          command: 'docmanager:open',\n          args: widget => ({ path: widget.context.path, factory: factoryName }),\n          name: widget => widget.context.path\n        });\n\n        factory.widgetCreated.connect((sender, widget) => {\n          // Notify the instance tracker if restore data needs to update.\n          widget.context.pathChanged.connect(() => { tracker.save(widget); });\n          tracker.add(widget);\n        });\n      });\n    }\n  };\n}\n"]}