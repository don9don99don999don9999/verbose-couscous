"use strict";
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
Object.defineProperty(exports, "__esModule", { value: true });
var coreutils_1 = require("@jupyterlab/coreutils");
var serverconnection_1 = require("../serverconnection");
/**
 * The url for the lab settings service.
 */
var SERVICE_SETTINGS_URL = 'api/settings';
/**
 * The settings API service manager.
 */
var SettingManager = /** @class */ (function () {
    /**
     * Create a new setting manager.
     */
    function SettingManager(options) {
        if (options === void 0) { options = {}; }
        this.serverSettings = options.serverSettings ||
            serverconnection_1.ServerConnection.makeSettings();
    }
    /**
     * Fetch a plugin's settings.
     *
     * @param id - The plugin's ID.
     *
     * @returns A promise that resolves with the plugin settings or rejects
     * with a `ServerConnection.IError`.
     */
    SettingManager.prototype.fetch = function (id) {
        var serverSettings = this.serverSettings;
        var baseUrl = serverSettings.baseUrl, pageUrl = serverSettings.pageUrl;
        var base = baseUrl + pageUrl;
        var url = Private.url(base, id);
        var promise = serverconnection_1.ServerConnection.makeRequest(url, {}, serverSettings);
        return promise.then(function (response) {
            if (response.status !== 200) {
                throw new serverconnection_1.ServerConnection.ResponseError(response);
            }
            return response.json();
        });
    };
    /**
     * Save a plugin's settings.
     *
     * @param id - The plugin's ID.
     *
     * @param raw - The user setting values as a raw string of JSON with comments.
     *
     * @returns A promise that resolves when saving is complete or rejects with
     * a `ServerConnection.IError`.
     */
    SettingManager.prototype.save = function (id, raw) {
        var serverSettings = this.serverSettings;
        var baseUrl = serverSettings.baseUrl, pageUrl = serverSettings.pageUrl;
        var base = baseUrl + pageUrl;
        var url = Private.url(base, id);
        var init = {
            body: raw,
            method: 'PUT'
        };
        var promise = serverconnection_1.ServerConnection.makeRequest(url, init, serverSettings);
        return promise.then(function (response) {
            if (response.status !== 204) {
                throw new serverconnection_1.ServerConnection.ResponseError(response);
            }
            return undefined;
        });
    };
    return SettingManager;
}());
exports.SettingManager = SettingManager;
/**
 * A namespace for private data.
 */
var Private;
(function (Private) {
    /**
     * Get the url for a plugin's settings.
     */
    function url(base, id) {
        return coreutils_1.URLExt.join(base, SERVICE_SETTINGS_URL, id);
    }
    Private.url = url;
})(Private || (Private = {}));
