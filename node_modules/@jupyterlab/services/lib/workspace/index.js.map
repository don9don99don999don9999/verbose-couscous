{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../services/src/workspace/index.ts"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,2DAA2D;;AAE3D,mDAE+B;AAM/B,wDAE6B;AAG7B;;GAEG;AACH,IAAM,sBAAsB,GAAG,gBAAgB,CAAC;AAGhD;;GAEG;AACH;IAEE;;OAEG;IACH,0BAAY,OAAwC;QAAxC,wBAAA,EAAA,YAAwC;QAClD,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC,cAAc;YAC1C,mCAAgB,CAAC,YAAY,EAAE,CAAC;IACpC,CAAC;IAOD;;;;;;;OAOG;IACH,gCAAK,GAAL,UAAM,EAAU;QACN,IAAA,oCAAc,CAAU;QACxB,IAAA,gCAAO,EAAE,gCAAO,CAAoB;QAC5C,IAAM,IAAI,GAAG,OAAO,GAAG,OAAO,CAAC;QAC/B,IAAM,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;QAClC,IAAM,OAAO,GAAG,mCAAgB,CAAC,WAAW,CAAC,GAAG,EAAE,EAAG,EAAE,cAAc,CAAC,CAAC;QAEvE,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,QAAQ;YAC1B,EAAE,CAAC,CAAC,QAAQ,CAAC,MAAM,KAAK,GAAG,CAAC,CAAC,CAAC;gBAC5B,MAAM,IAAI,mCAAgB,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YACrD,CAAC;YAED,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QACzB,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;;;;;;OASG;IACH,+BAAI,GAAJ,UAAK,EAAU,EAAE,SAA+B;QACtC,IAAA,oCAAc,CAAU;QACxB,IAAA,gCAAO,EAAE,gCAAO,CAAoB;QAC5C,IAAM,IAAI,GAAG,OAAO,GAAG,OAAO,CAAC;QAC/B,IAAM,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;QAClC,IAAM,IAAI,GAAG;YACX,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC;YAC/B,MAAM,EAAE,KAAK;SACd,CAAC;QACF,IAAM,OAAO,GAAG,mCAAgB,CAAC,WAAW,CAAC,GAAG,EAAE,IAAI,EAAE,cAAc,CAAC,CAAC;QAExE,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,QAAQ;YAC1B,EAAE,CAAC,CAAC,QAAQ,CAAC,MAAM,KAAK,GAAG,CAAC,CAAC,CAAC;gBAC5B,MAAM,IAAI,mCAAgB,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YACrD,CAAC;YAED,MAAM,CAAC,SAAS,CAAC;QACnB,CAAC,CAAC,CAAC;IACL,CAAC;IACH,uBAAC;AAAD,CAAC,AApED,IAoEC;AAnEK,4CAAgB;AA0HtB;;GAEG;AACH,IAAU,OAAO,CAQhB;AARD,WAAU,OAAO;IACf;;OAEG;IACH,aACa,IAAY,EAAE,EAAU;QACnC,MAAM,CAAC,kBAAM,CAAC,IAAI,CAAC,IAAI,EAAE,sBAAsB,EAAE,EAAE,CAAC,CAAC;IACvD,CAAC;IAFQ,WAAG,MAEX,CAAA;AACH,CAAC,EARS,OAAO,KAAP,OAAO,QAQhB","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  URLExt\n} from '@jupyterlab/coreutils';\n\nimport {\n  ReadonlyJSONObject\n} from '@phosphor/coreutils';\n\nimport {\n  ServerConnection\n} from '../serverconnection';\n\n\n/**\n * The url for the lab workspaces service.\n */\nconst SERVICE_WORKSPACES_URL = 'api/workspaces';\n\n\n/**\n * The workspaces API service manager.\n */\nexport\nclass WorkspaceManager {\n  /**\n   * Create a new workspace manager.\n   */\n  constructor(options: WorkspaceManager.IOptions = { }) {\n    this.serverSettings = options.serverSettings ||\n      ServerConnection.makeSettings();\n  }\n\n  /**\n   * The server settings used to make API requests.\n   */\n  readonly serverSettings: ServerConnection.ISettings;\n\n  /**\n   * Fetch a workspace.\n   *\n   * @param id - The workspaces's ID.\n   *\n   * @returns A promise that resolves with the workspace or rejects with a\n   * `ServerConnection.IError`.\n   */\n  fetch(id: string): Promise<Workspace.IWorkspace> {\n    const { serverSettings } = this;\n    const { baseUrl, pageUrl } = serverSettings;\n    const base = baseUrl + pageUrl;\n    const url = Private.url(base, id);\n    const promise = ServerConnection.makeRequest(url, { }, serverSettings);\n\n    return promise.then(response => {\n      if (response.status !== 200) {\n        throw new ServerConnection.ResponseError(response);\n      }\n\n      return response.json();\n    });\n  }\n\n  /**\n   * Save a workspace.\n   *\n   * @param id - The workspace's ID.\n   *\n   * @param workspace - The workspace being saved.\n   *\n   * @returns A promise that resolves when saving is complete or rejects with\n   * a `ServerConnection.IError`.\n   */\n  save(id: string, workspace: Workspace.IWorkspace): Promise<void> {\n    const { serverSettings } = this;\n    const { baseUrl, pageUrl } = serverSettings;\n    const base = baseUrl + pageUrl;\n    const url = Private.url(base, id);\n    const init = {\n      body: JSON.stringify(workspace),\n      method: 'PUT'\n    };\n    const promise = ServerConnection.makeRequest(url, init, serverSettings);\n\n    return promise.then(response => {\n      if (response.status !== 204) {\n        throw new ServerConnection.ResponseError(response);\n      }\n\n      return undefined;\n    });\n  }\n}\n\n\n/**\n * A namespace for `WorkspaceManager` statics.\n */\nexport\nnamespace WorkspaceManager {\n  /**\n   * The instantiation options for a workspace manager.\n   */\n  export\n  interface IOptions {\n    /**\n     * The server settings used to make API requests.\n     */\n    serverSettings?: ServerConnection.ISettings;\n  }\n}\n\n\n/**\n * A namespace for workspace API interfaces.\n */\nexport\nnamespace Workspace {\n  /**\n   * The interface for the workspace API manager.\n   */\n  export\n  interface IManager extends WorkspaceManager { }\n\n  /**\n   * The interface describing a workspace API response.\n   */\n  export\n  interface IWorkspace {\n    /**\n     * The workspace data.\n     */\n    data: ReadonlyJSONObject;\n\n    /**\n     * The metadata for a workspace.\n     */\n    metadata: {\n      /**\n       * The workspace ID.\n       */\n      id: string;\n    };\n  }\n}\n\n\n/**\n * A namespace for private data.\n */\nnamespace Private {\n  /**\n   * Get the url for a workspace.\n   */\n  export\n  function url(base: string, id: string): string {\n    return URLExt.join(base, SERVICE_WORKSPACES_URL, id);\n  }\n}\n"]}