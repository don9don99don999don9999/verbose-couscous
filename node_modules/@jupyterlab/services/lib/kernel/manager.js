"use strict";
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var algorithm_1 = require("@phosphor/algorithm");
var coreutils_1 = require("@phosphor/coreutils");
var signaling_1 = require("@phosphor/signaling");
var __1 = require("..");
var kernel_1 = require("./kernel");
/**
 * An implementation of a kernel manager.
 */
var KernelManager = /** @class */ (function () {
    /**
     * Construct a new kernel manager.
     *
     * @param options - The default options for kernel.
     */
    function KernelManager(options) {
        if (options === void 0) { options = {}; }
        var _this = this;
        this._models = [];
        this._kernels = new Set();
        this._specs = null;
        this._isDisposed = false;
        this._modelsTimer = -1;
        this._specsTimer = -1;
        this._isReady = false;
        this._specsChanged = new signaling_1.Signal(this);
        this._runningChanged = new signaling_1.Signal(this);
        this.serverSettings = (options.serverSettings || __1.ServerConnection.makeSettings());
        // Initialize internal data.
        this._readyPromise = this._refreshSpecs().then(function () {
            return _this._refreshRunning();
        });
        // Set up polling.
        this._modelsTimer = setInterval(function () {
            _this._refreshRunning();
        }, 10000);
        this._specsTimer = setInterval(function () {
            _this._refreshSpecs();
        }, 61000);
    }
    Object.defineProperty(KernelManager.prototype, "specsChanged", {
        /**
         * A signal emitted when the specs change.
         */
        get: function () {
            return this._specsChanged;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(KernelManager.prototype, "runningChanged", {
        /**
         * A signal emitted when the running kernels change.
         */
        get: function () {
            return this._runningChanged;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(KernelManager.prototype, "isDisposed", {
        /**
         * Test whether the terminal manager is disposed.
         */
        get: function () {
            return this._isDisposed;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Dispose of the resources used by the manager.
     */
    KernelManager.prototype.dispose = function () {
        if (this.isDisposed) {
            return;
        }
        this._isDisposed = true;
        clearInterval(this._modelsTimer);
        clearInterval(this._specsTimer);
        signaling_1.Signal.clearData(this);
        this._models = [];
    };
    Object.defineProperty(KernelManager.prototype, "specs", {
        /**
         * Get the most recently fetched kernel specs.
         */
        get: function () {
            return this._specs;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(KernelManager.prototype, "isReady", {
        /**
         * Test whether the manager is ready.
         */
        get: function () {
            return this._isReady;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(KernelManager.prototype, "ready", {
        /**
         * A promise that fulfills when the manager is ready.
         */
        get: function () {
            return this._readyPromise;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Create an iterator over the most recent running kernels.
     *
     * @returns A new iterator over the running kernels.
     */
    KernelManager.prototype.running = function () {
        return algorithm_1.iter(this._models);
    };
    /**
     * Force a refresh of the specs from the server.
     *
     * @returns A promise that resolves when the specs are fetched.
     *
     * #### Notes
     * This is intended to be called only in response to a user action,
     * since the manager maintains its internal state.
     */
    KernelManager.prototype.refreshSpecs = function () {
        return this._refreshSpecs();
    };
    /**
     * Force a refresh of the running kernels.
     *
     * @returns A promise that with the list of running sessions.
     *
     * #### Notes
     * This is not typically meant to be called by the user, since the
     * manager maintains its own internal state.
     */
    KernelManager.prototype.refreshRunning = function () {
        return this._refreshRunning();
    };
    /**
     * Start a new kernel.
     *
     * @param options - The kernel options to use.
     *
     * @returns A promise that resolves with the kernel instance.
     *
     * #### Notes
     * The manager `serverSettings` will be always be used.
     */
    KernelManager.prototype.startNew = function (options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        var newOptions = __assign({}, options, { serverSettings: this.serverSettings });
        return kernel_1.Kernel.startNew(newOptions).then(function (kernel) {
            _this._onStarted(kernel);
            return kernel;
        });
    };
    /**
     * Find a kernel by id.
     *
     * @param id - The id of the target kernel.
     *
     * @returns A promise that resolves with the kernel's model.
     */
    KernelManager.prototype.findById = function (id) {
        return kernel_1.Kernel.findById(id, this.serverSettings);
    };
    /**
     * Connect to an existing kernel.
     *
     * @param model - The model of the target kernel.
     *
     * @returns A promise that resolves with the new kernel instance.
     */
    KernelManager.prototype.connectTo = function (model) {
        var _this = this;
        return kernel_1.Kernel.connectTo(model, this.serverSettings).then(function (kernel) {
            _this._onStarted(kernel);
            return kernel;
        });
    };
    /**
     * Shut down a kernel by id.
     *
     * @param id - The id of the target kernel.
     *
     * @returns A promise that resolves when the operation is complete.
     *
     * #### Notes
     * This will emit [[runningChanged]] if the running kernels list
     * changes.
     */
    KernelManager.prototype.shutdown = function (id) {
        var _this = this;
        var index = algorithm_1.ArrayExt.findFirstIndex(this._models, function (value) { return value.id === id; });
        if (index === -1) {
            return;
        }
        // Proactively remove the model.
        this._models.splice(index, 1);
        this._runningChanged.emit(this._models.slice());
        return kernel_1.Kernel.shutdown(id, this.serverSettings).then(function () {
            var toRemove = [];
            _this._kernels.forEach(function (k) {
                if (k.id === id) {
                    k.dispose();
                    toRemove.push(k);
                }
            });
            toRemove.forEach(function (k) { _this._kernels.delete(k); });
        });
    };
    /**
     * Shut down all kernels.
     *
     * @returns A promise that resolves when all of the kernels are shut down.
     */
    KernelManager.prototype.shutdownAll = function () {
        var _this = this;
        // Proactively remove all models.
        var models = this._models;
        if (models.length > 0) {
            this._models = [];
            this._runningChanged.emit([]);
        }
        return this._refreshRunning().then(function () {
            return Promise.all(models.map(function (model) {
                return kernel_1.Kernel.shutdown(model.id, _this.serverSettings).then(function () {
                    var toRemove = [];
                    _this._kernels.forEach(function (k) {
                        k.dispose();
                        toRemove.push(k);
                    });
                    toRemove.forEach(function (k) { _this._kernels.delete(k); });
                });
            })).then(function () { return undefined; });
        });
    };
    /**
     * Handle a kernel terminating.
     */
    KernelManager.prototype._onTerminated = function (id) {
        var index = algorithm_1.ArrayExt.findFirstIndex(this._models, function (value) { return value.id === id; });
        if (index !== -1) {
            this._models.splice(index, 1);
            this._runningChanged.emit(this._models.slice());
        }
    };
    /**
     * Handle a kernel starting.
     */
    KernelManager.prototype._onStarted = function (kernel) {
        var _this = this;
        var id = kernel.id;
        this._kernels.add(kernel);
        var index = algorithm_1.ArrayExt.findFirstIndex(this._models, function (value) { return value.id === id; });
        if (index === -1) {
            this._models.push(kernel.model);
            this._runningChanged.emit(this._models.slice());
        }
        kernel.terminated.connect(function () {
            _this._onTerminated(id);
        });
    };
    /**
     * Refresh the specs.
     */
    KernelManager.prototype._refreshSpecs = function () {
        var _this = this;
        return kernel_1.Kernel.getSpecs(this.serverSettings).then(function (specs) {
            if (!coreutils_1.JSONExt.deepEqual(specs, _this._specs)) {
                _this._specs = specs;
                _this._specsChanged.emit(specs);
            }
        });
    };
    /**
     * Refresh the running sessions.
     */
    KernelManager.prototype._refreshRunning = function () {
        var _this = this;
        return kernel_1.Kernel.listRunning(this.serverSettings).then(function (models) {
            _this._isReady = true;
            if (!coreutils_1.JSONExt.deepEqual(models, _this._models)) {
                var ids_1 = models.map(function (r) { return r.id; });
                var toRemove_1 = [];
                _this._kernels.forEach(function (k) {
                    if (ids_1.indexOf(k.id) === -1) {
                        k.dispose();
                        toRemove_1.push(k);
                    }
                });
                toRemove_1.forEach(function (s) { _this._kernels.delete(s); });
                _this._models = models.slice();
                _this._runningChanged.emit(models);
            }
        });
    };
    return KernelManager;
}());
exports.KernelManager = KernelManager;
