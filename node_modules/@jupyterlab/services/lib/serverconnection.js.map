{"version":3,"file":"serverconnection.js","sourceRoot":"","sources":["../../../../services/src/serverconnection.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  PageConfig\n} from '@jupyterlab/coreutils';\n\n\n/**\n * Handle the default `fetch` and `WebSocket` providers.\n */\ndeclare var global: any;\n\nlet FETCH: (input: RequestInfo, init?: RequestInit) => Promise<Response>;\nlet HEADERS: typeof Headers;\nlet REQUEST: typeof Request;\nlet WEBSOCKET: typeof WebSocket;\n\nif (typeof window === 'undefined') {\n  // Mangle the require statements so it does not get picked up in the\n  // browser assets.\n  /* tslint:disable */\n  let fetchMod = eval('require')('node-fetch');\n  FETCH = global.fetch || fetchMod;\n  REQUEST = global.Request || fetchMod.Request;\n  HEADERS = global.Headers || fetchMod.Headers;\n  WEBSOCKET = global.WebSocket || eval('require')('ws');\n  /* tslint:enable */\n} else {\n  FETCH = fetch;\n  REQUEST = Request;\n  HEADERS = Headers;\n  WEBSOCKET = WebSocket;\n}\n\n\n/**\n * The namespace for ServerConnection functions.\n *\n * #### Notes\n * This is only intended to manage communication with the Jupyter server.\n *\n * The default values can be used in a JupyterLab or Jupyter Notebook context.\n *\n * We use `token` authentication if available, falling back on an XSRF\n * cookie if one has been provided on the `document`.\n *\n * A content type of `'application/json'` is added when using authentication\n * and there is no body data to allow the server to prevent malicious forms.\n */\nexport\nnamespace ServerConnection {\n  /**\n   * A Jupyter server settings object.\n   * Note that all of the settings are optional when passed to\n   * [[makeSettings]].  The default settings are given in [[defaultSettings]].\n   */\n  export\n  interface ISettings {\n     /**\n      * The base url of the server.\n      */\n     readonly baseUrl: string;\n\n     /**\n      * The page url of the JupyterLab application.\n      */\n     readonly pageUrl: string;\n\n     /**\n      * The base ws url of the server.\n      */\n     readonly wsUrl: string;\n\n     /**\n      * The default request init options.\n      */\n     readonly init: RequestInit;\n\n     /**\n      * The authentication token for requests.  Use an empty string to disable.\n      */\n     readonly token: string;\n\n     /**\n      * The `fetch` method to use.\n      */\n     readonly fetch: (input: RequestInfo, init?: RequestInit) => Promise<Response>;\n\n     /**\n      * The `Request` object constructor.\n      */\n     readonly Request: typeof Request;\n\n     /**\n      * The `Headers` object constructor.\n      */\n     readonly Headers: typeof Headers;\n\n     /**\n      * The `WebSocket` object constructor.\n      */\n     readonly WebSocket: typeof WebSocket;\n  }\n\n  /**\n   * Create a settings object given a subset of options.\n   *\n   * @param options - An optional partial set of options.\n   *\n   * @returns The full settings object.\n   */\n  export\n  function makeSettings(options?: Partial<ISettings>) {\n    return Private.makeSettings(options);\n  }\n\n  /**\n   * Make an request to the notebook server.\n   *\n   * @param url - The url for the request.\n   *\n   * @param init - The initialization options for the request.\n   *\n   * @param settings - The server settings to apply to the request.\n   *\n   * @returns a Promise that resolves with the response.\n   *\n   * @throws If the url of the request is not a notebook server url.\n   *\n   * #### Notes\n   * The `url` must start with `settings.baseUrl`.  The `init` settings are\n   * merged with `settings.init`, with `init` taking precedence.\n   * The headers in the two objects are not merged.\n   * If there is no body data, we set the content type to `application/json`\n   * because it is required by the Notebook server.\n   */\n  export\n  function makeRequest(url: string, init: RequestInit, settings: ISettings): Promise<Response> {\n    return Private.handleRequest(url, init, settings);\n  }\n\n  /**\n   * A wrapped error for a fetch response.\n   */\n  export\n  class ResponseError extends Error {\n    /**\n     * Create a new response error.\n     */\n    constructor(response: Response, message?: string) {\n      message = (message ||\n        `Invalid response: ${response.status} ${response.statusText}`\n      );\n      super(message);\n      this.response = response;\n    }\n\n    /**\n     * The response associated with the error.\n     */\n    response: Response;\n  }\n\n  /**\n   * A wrapped error for a network error.\n   */\n  export\n  class NetworkError extends TypeError {\n    /**\n     * Create a new network error.\n     */\n    constructor(original: TypeError) {\n      super(original.message);\n      this.stack = original.stack;\n    }\n  }\n\n  /**\n   * The default settings.\n   */\n  export\n  const defaultSettings: ServerConnection.ISettings = {\n    baseUrl: PageConfig.getBaseUrl(),\n    pageUrl: PageConfig.getOption('pageUrl'),\n    wsUrl: PageConfig.getWsUrl(),\n    token: PageConfig.getToken(),\n    init: { 'cache': 'no-store', 'credentials': 'same-origin' },\n    fetch: FETCH,\n    Headers: HEADERS,\n    Request: REQUEST,\n    WebSocket: WEBSOCKET\n  };\n}\n\n\n/**\n * The namespace for module private data.\n */\nnamespace Private {\n  /**\n   * Handle the server connection settings, returning a new value.\n   */\n  export\n  function makeSettings(options: Partial<ServerConnection.ISettings> = {}): ServerConnection.ISettings {\n    return {\n      ...ServerConnection.defaultSettings,\n      ...options\n    };\n  }\n\n  /**\n   * Handle a request.\n   *\n   * @param url - The url for the request.\n   *\n   * @param init - The overrides for the request init.\n   *\n   * @param settings - The settings object for the request.\n   *\n   * #### Notes\n   * The `url` must start with `settings.baseUrl`.  The `init` settings\n   * take precedence over `settings.init`.\n   */\n  export\n  function handleRequest(url: string, init: RequestInit, settings: ServerConnection.ISettings): Promise<Response> {\n\n    // Handle notebook server requests.\n    if (url.indexOf(settings.baseUrl) !== 0) {\n      throw new Error('Can only be used for notebook server requests');\n    }\n\n    // Use explicit cache buster when `no-store` is set since\n    // not all browsers use it properly.\n    let cache = init.cache || settings.init.cache;\n    if (cache === 'no-store') {\n      // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Bypassing_the_cache\n      url += ((/\\?/).test(url) ? '&' : '?') + (new Date()).getTime();\n    }\n\n    let request = new settings.Request(url, { ...settings.init, ...init });\n\n    // Handle authentication.\n    let authenticated = false;\n    if (settings.token) {\n      authenticated = true;\n      request.headers.append('Authorization', `token ${settings.token}`);\n    } else if (typeof document !== 'undefined' && document.cookie) {\n      let xsrfToken = getCookie('_xsrf');\n      if (xsrfToken !== void 0) {\n        authenticated = true;\n        request.headers.append('X-XSRFToken', xsrfToken);\n      }\n    }\n\n    // Set the content type if there is no given data and we are\n    // using an authenticated connection.\n    if (!request.bodyUsed && authenticated) {\n      request.headers.set('Content-Type', 'application/json');\n    }\n\n    // Use `call` to avoid a `TypeError` in the browser.\n    return settings.fetch.call(null, request).catch((e: TypeError) => {\n      // Convert the TypeError into a more specific error.\n      throw new ServerConnection.NetworkError(e);\n    });\n  }\n\n  /**\n   * Get a cookie from the document.\n   */\n  function getCookie(name: string) {\n    // from tornado docs: http://www.tornadoweb.org/en/stable/guide/security.html\n    let r = document.cookie.match('\\\\b' + name + '=([^;]*)\\\\b');\n    return r ? r[1] : void 0;\n  }\n}\n"]}