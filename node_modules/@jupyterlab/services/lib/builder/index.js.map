{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../services/src/builder/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  PageConfig, URLExt\n} from '@jupyterlab/coreutils';\n\nimport {\n  ServerConnection\n} from '../serverconnection';\n\n\n/**\n * The url for the lab build service.\n */\nconst BUILD_SETTINGS_URL = 'lab/api/build';\n\n\n/**\n * The static namespace for `BuildManager`.\n */\nexport\nclass BuildManager {\n  /**\n   * Create a new setting manager.\n   */\n  constructor(options: BuildManager.IOptions = { }) {\n    this.serverSettings = options.serverSettings ||\n      ServerConnection.makeSettings();\n  }\n\n  /**\n   * The server settings used to make API requests.\n   */\n  readonly serverSettings: ServerConnection.ISettings;\n\n  /**\n   * Test whether the build service is available.\n   */\n  get isAvailable(): boolean {\n    return PageConfig.getOption('buildAvailable').toLowerCase() === 'true';\n  }\n\n  /**\n   * Test whether to check build status automatically.\n   */\n  get shouldCheck(): boolean {\n    return PageConfig.getOption('buildCheck').toLowerCase() === 'true';\n  }\n\n  /**\n   * Get whether the application should be built.\n   */\n  getStatus(): Promise<BuildManager.IStatus> {\n    const base = this.serverSettings.baseUrl;\n    const url = URLExt.join(base, BUILD_SETTINGS_URL);\n    const { serverSettings } = this;\n    const promise = ServerConnection.makeRequest(url, {}, serverSettings);\n\n    return promise.then(response => {\n      if (response.status !== 200) {\n        throw new ServerConnection.ResponseError(response);\n      }\n\n      return response.json();\n    }).then(data => {\n      if (typeof data.status !== 'string') {\n        throw new Error('Invalid data');\n      }\n      if (typeof data.message !== 'string') {\n        throw new Error('Invalid data');\n      }\n      return data;\n\n    });\n  }\n\n  /**\n   * Build the application.\n   */\n  build(): Promise<void> {\n    const base = this.serverSettings.baseUrl;\n    const url = URLExt.join(base, BUILD_SETTINGS_URL);\n    const { serverSettings } = this;\n    const init = { method: 'POST' };\n    const promise = ServerConnection.makeRequest(url, init, serverSettings);\n\n    return promise.then(response => {\n      if (response.status === 400) {\n        throw new ServerConnection.ResponseError(response, 'Build aborted');\n      }\n      if (response.status !== 200) {\n        let message = 'Build failed with ${response.status)`, please run `jupyter lab build` on the server for full output';\n        throw new ServerConnection.ResponseError(response, message);\n      }\n    });\n  }\n\n  /**\n   * Cancel an active build.\n   */\n  cancel(): Promise<void> {\n    const base = this.serverSettings.baseUrl;\n    const url = URLExt.join(base, BUILD_SETTINGS_URL);\n    const { serverSettings } = this;\n    const init = { method: 'DELETE' };\n    const promise = ServerConnection.makeRequest(url, init, serverSettings);\n\n    return promise.then(response => {\n      if (response.status !== 204) {\n        throw new ServerConnection.ResponseError(response);\n      }\n    });\n  }\n}\n\n\n/**\n * A namespace for `BuildManager` statics.\n */\nexport\nnamespace BuildManager {\n  /**\n   * The instantiation options for a setting manager.\n   */\n  export\n  interface IOptions {\n    /**\n     * The server settings used to make API requests.\n     */\n    serverSettings?: ServerConnection.ISettings;\n  }\n\n  /**\n   * The build status response from the server.\n   */\n  export\n  interface IStatus {\n    /**\n     * Whether a build is needed.\n     */\n    readonly status: 'stable' | 'needed' | 'building';\n\n    /**\n     * The message associated with the build status.\n     */\n    readonly message: string;\n  }\n}\n\n\n/**\n * A namespace for builder API interfaces.\n */\nexport\nnamespace Builder {\n  /**\n   * The interface for the build manager.\n   */\n  export\n  interface IManager extends BuildManager { }\n}\n"]}