{"version":3,"file":"default.js","sourceRoot":"","sources":["../../../../../services/src/session/default.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  URLExt\n } from '@jupyterlab/coreutils';\n\nimport {\n  ArrayExt, each, find\n} from '@phosphor/algorithm';\n\nimport {\n  ISignal, Signal\n} from '@phosphor/signaling';\n\nimport {\n  Kernel, KernelMessage\n} from '../kernel';\n\nimport {\n  ServerConnection\n} from '..';\n\nimport {\n  Session\n} from './session';\n\nimport * as validate\n  from './validate';\n\n\n/**\n * The url for the session service.\n */\nconst SESSION_SERVICE_URL = 'api/sessions';\n\n\n/**\n * Session object for accessing the session REST api. The session\n * should be used to start kernels and then shut them down -- for\n * all other operations, the kernel object should be used.\n */\nexport\nclass DefaultSession implements Session.ISession {\n  /**\n   * Construct a new session.\n   */\n  constructor(options: Session.IOptions, id: string, kernel: Kernel.IKernel) {\n    this._id = id;\n    this._path = options.path;\n    this._type = options.type || 'file';\n    this._name = options.name || '';\n    this.serverSettings = options.serverSettings || ServerConnection.makeSettings();\n    Private.addRunning(this);\n    this.setupKernel(kernel);\n  }\n\n  /**\n   * A signal emitted when the session is shut down.\n   */\n  get terminated(): ISignal<this, void> {\n    return this._terminated;\n  }\n\n  /**\n   * A signal emitted when the kernel changes.\n   */\n  get kernelChanged(): ISignal<this, Kernel.IKernelConnection> {\n    return this._kernelChanged;\n  }\n\n  /**\n   * A signal emitted when the kernel status changes.\n   */\n  get statusChanged(): ISignal<this, Kernel.Status> {\n    return this._statusChanged;\n  }\n\n  /**\n   * A signal emitted for a kernel messages.\n   */\n  get iopubMessage(): ISignal<this, KernelMessage.IIOPubMessage> {\n    return this._iopubMessage;\n  }\n\n  /**\n   * A signal emitted for an unhandled kernel message.\n   */\n  get unhandledMessage(): ISignal<this, KernelMessage.IMessage> {\n    return this._unhandledMessage;\n  }\n\n  /**\n   * A signal emitted when a session property changes.\n   */\n  get propertyChanged(): ISignal<this, 'path' | 'name' | 'type'> {\n    return this._propertyChanged;\n  }\n\n  /**\n   * Get the session id.\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Get the session kernel object.\n   *\n   * #### Notes\n   * This is a read-only property, and can be altered by [changeKernel].\n   * Use the [statusChanged] and [unhandledMessage] signals on the session\n   * instead of the ones on the kernel.\n   */\n  get kernel() : Kernel.IKernelConnection {\n    return this._kernel;\n  }\n\n  /**\n   * Get the session path.\n   */\n  get path(): string {\n    return this._path;\n  }\n\n  /**\n   * Get the session type.\n   */\n  get type(): string {\n    return this._type;\n  }\n\n  /**\n   * Get the session name.\n   */\n  get name(): string {\n    return this._name;\n  }\n\n  /**\n   * Get the model associated with the session.\n   */\n  get model(): Session.IModel {\n    return {\n      id: this.id,\n      kernel: this.kernel.model,\n      path: this._path,\n      type: this._type,\n      name: this._name\n    };\n  }\n\n  /**\n   * The current status of the session.\n   *\n   * #### Notes\n   * This is a delegate to the kernel status.\n   */\n  get status(): Kernel.Status {\n    return this._kernel ? this._kernel.status : 'dead';\n  }\n\n  /**\n   * The server settings of the session.\n   */\n  readonly serverSettings: ServerConnection.ISettings;\n\n  /**\n   * Test whether the session has been disposed.\n   */\n  get isDisposed(): boolean {\n    return this._isDisposed === true;\n  }\n\n  /**\n   * Clone the current session with a new clientId.\n   */\n  clone(): Promise<Session.ISession> {\n    return Kernel.connectTo(this.kernel.model, this.serverSettings).then(kernel => {\n      return new DefaultSession({\n        path: this._path,\n        name: this._name,\n        type: this._type,\n        serverSettings: this.serverSettings\n      }, this._id, kernel);\n    });\n  }\n\n  /**\n   * Update the session based on a session model from the server.\n   */\n  update(model: Session.IModel): Promise<void> {\n    // Avoid a race condition if we are waiting for a REST call return.\n    if (this._updating) {\n      return Promise.resolve(void 0);\n    }\n    let oldModel = this.model;\n    this._path = model.path;\n    this._name = model.name;\n    this._type = model.type;\n\n    if (this._kernel.isDisposed || model.kernel.id !== this._kernel.id) {\n      return Kernel.connectTo(model.kernel, this.serverSettings).then(kernel => {\n        this.setupKernel(kernel);\n        this._kernelChanged.emit(kernel);\n        this._handleModelChange(oldModel);\n      });\n    }\n\n    this._handleModelChange(oldModel);\n    return Promise.resolve(void 0);\n  }\n\n  /**\n   * Dispose of the resources held by the session.\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    this._isDisposed = true;\n    this._kernel.dispose();\n    this._statusChanged.emit('dead');\n    this._terminated.emit(void 0);\n    Private.removeRunning(this);\n    Signal.clearData(this);\n  }\n\n  /**\n   * Change the session path.\n   *\n   * @param path - The new session path.\n   *\n   * @returns A promise that resolves when the session has renamed.\n   *\n   * #### Notes\n   * This uses the Jupyter REST API, and the response is validated.\n   * The promise is fulfilled on a valid response and rejected otherwise.\n   */\n  setPath(path: string): Promise<void> {\n    if (this.isDisposed) {\n      return Promise.reject(new Error('Session is disposed'));\n    }\n    let data = JSON.stringify({ path });\n    return this._patch(data).then(() => { return void 0; });\n  }\n\n  /**\n   * Change the session name.\n   */\n  setName(name: string): Promise<void> {\n    if (this.isDisposed) {\n      return Promise.reject(new Error('Session is disposed'));\n    }\n    let data = JSON.stringify({ name });\n    return this._patch(data).then(() => { return void 0; });\n  }\n\n  /**\n   * Change the session type.\n   */\n  setType(type: string): Promise<void> {\n    if (this.isDisposed) {\n      return Promise.reject(new Error('Session is disposed'));\n    }\n    let data = JSON.stringify({ type });\n    return this._patch(data).then(() => { return void 0; });\n  }\n\n  /**\n   * Change the kernel.\n   *\n   * @params options - The name or id of the new kernel.\n   *\n   * #### Notes\n   * This shuts down the existing kernel and creates a new kernel,\n   * keeping the existing session ID and session path.\n   */\n  changeKernel(options: Partial<Kernel.IModel>): Promise<Kernel.IKernelConnection> {\n    if (this.isDisposed) {\n      return Promise.reject(new Error('Session is disposed'));\n    }\n    let data = JSON.stringify({ kernel: options });\n    this._kernel.dispose();\n    this._statusChanged.emit('restarting');\n    return this._patch(data).then(() => this.kernel);\n  }\n\n  /**\n   * Kill the kernel and shutdown the session.\n   *\n   * @returns - The promise fulfilled on a valid response from the server.\n   *\n   * #### Notes\n   * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/sessions), and validates the response.\n   * Disposes of the session and emits a [sessionDied] signal on success.\n   */\n  shutdown(): Promise<void> {\n    if (this.isDisposed) {\n      return Promise.reject(new Error('Session is disposed'));\n    }\n    return Private.shutdownSession(this.id, this.serverSettings);\n  }\n\n  /**\n   * Handle connections to a kernel.  This method is not meant to be\n   * subclassed.\n   */\n  protected setupKernel(kernel: Kernel.IKernel): void {\n    this._kernel = kernel;\n    kernel.statusChanged.connect(this.onKernelStatus, this);\n    kernel.unhandledMessage.connect(this.onUnhandledMessage, this);\n    kernel.iopubMessage.connect(this.onIOPubMessage, this);\n  }\n\n  /**\n   * Handle to changes in the Kernel status.\n   */\n  protected onKernelStatus(sender: Kernel.IKernel, state: Kernel.Status) {\n    this._statusChanged.emit(state);\n  }\n\n  /**\n   * Handle iopub kernel messages.\n   */\n  protected onIOPubMessage(sender: Kernel.IKernel, msg: KernelMessage.IIOPubMessage) {\n    this._iopubMessage.emit(msg);\n  }\n\n  /**\n   * Handle unhandled kernel messages.\n   */\n  protected onUnhandledMessage(sender: Kernel.IKernel, msg: KernelMessage.IMessage) {\n    this._unhandledMessage.emit(msg);\n  }\n\n  /**\n   * Send a PATCH to the server, updating the session path or the kernel.\n   */\n  private _patch(body: string): Promise<Session.IModel> {\n    this._updating = true;\n    let settings = this.serverSettings;\n    let url = Private.getSessionUrl(settings.baseUrl, this._id);\n    let init = {\n      method: 'PATCH',\n      body\n    };\n    return ServerConnection.makeRequest(url, init, settings).then(response => {\n      this._updating = false;\n      if (response.status !== 200) {\n        throw new ServerConnection.ResponseError(response);\n      }\n      return response.json();\n    }).then(data => {\n      let model = validate.validateModel(data);\n      return Private.updateFromServer(model, settings.baseUrl);\n    }, error => {\n      this._updating = false;\n      throw error;\n    });\n  }\n\n  /**\n   * Handle a change to the model.\n   */\n  private _handleModelChange(oldModel: Session.IModel): void {\n    if (oldModel.name !== this._name) {\n      this._propertyChanged.emit('name');\n    }\n    if (oldModel.type !== this._type) {\n      this._propertyChanged.emit('type');\n    }\n    if (oldModel.path !== this._path) {\n      this._propertyChanged.emit('path');\n    }\n  }\n\n  private _id = '';\n  private _path = '';\n  private _name = '';\n  private _type = '';\n  private _kernel: Kernel.IKernel;\n  private _isDisposed = false;\n  private _updating = false;\n  private _kernelChanged = new Signal<this, Kernel.IKernelConnection>(this);\n  private _statusChanged = new Signal<this, Kernel.Status>(this);\n  private _iopubMessage = new Signal<this, KernelMessage.IIOPubMessage>(this);\n  private _unhandledMessage = new Signal<this, KernelMessage.IMessage>(this);\n  private _propertyChanged = new Signal<this, 'path' | 'name' | 'type'>(this);\n  private _terminated = new Signal<this, void>(this);\n}\n\n\n/**\n * The namespace for `DefaultSession` statics.\n */\nexport\nnamespace DefaultSession {\n  /**\n   * List the running sessions.\n   */\n  export\n  function listRunning(settings?: ServerConnection.ISettings): Promise<Session.IModel[]> {\n    return Private.listRunning(settings);\n  }\n\n  /**\n   * Start a new session.\n   */\n  export\n  function startNew(options: Session.IOptions): Promise<Session.ISession> {\n    return Private.startNew(options);\n  }\n\n  /**\n   * Find a session by id.\n   */\n  export\n  function findById(id: string, settings?: ServerConnection.ISettings): Promise<Session.IModel> {\n    return Private.findById(id, settings);\n  }\n\n  /**\n   * Find a session by path.\n   */\n  export\n  function findByPath(path: string, settings?: ServerConnection.ISettings): Promise<Session.IModel> {\n    return Private.findByPath(path, settings);\n  }\n\n  /**\n   * Connect to a running session.\n   */\n  export\n  function connectTo(model: Session.IModel, settings?: ServerConnection.ISettings): Promise<Session.ISession> {\n    return Private.connectTo(model, settings);\n  }\n\n  /**\n   * Shut down a session by id.\n   */\n  export\n  function shutdown(id: string, settings?: ServerConnection.ISettings): Promise<void> {\n    return Private.shutdownSession(id, settings);\n  }\n\n  /**\n   * Shut down all sessions.\n   *\n   * @param settings - The server settings to use.\n   *\n   * @returns A promise that resolves when all the sessions are shut down.\n   */\n  export\n  function shutdownAll(settings?: ServerConnection.ISettings): Promise<void> {\n    return Private.shutdownAll(settings);\n  }\n}\n\n\n/**\n * A namespace for session private data.\n */\nnamespace Private {\n  /**\n   * The running sessions mapped by base url.\n   */\n  const runningSessions = new Map<string, DefaultSession[]>();\n\n  /**\n   * Add a session to the running sessions.\n   */\n  export\n  function addRunning(session: DefaultSession): void {\n    let running: DefaultSession[] = (\n      runningSessions.get(session.serverSettings.baseUrl) || []\n    );\n    running.push(session);\n    runningSessions.set(session.serverSettings.baseUrl, running);\n  }\n\n  /**\n   * Remove a session from the running sessions.\n   */\n  export\n  function removeRunning(session: DefaultSession): void {\n    let running = runningSessions.get(session.serverSettings.baseUrl);\n    if (running) {\n      ArrayExt.removeFirstOf(running, session);\n    }\n  }\n\n  /**\n   * Connect to a running session.\n   */\n  export\n  function connectTo(model: Session.IModel, settings?: ServerConnection.ISettings): Promise<Session.ISession> {\n    settings = settings || ServerConnection.makeSettings();\n    let running = runningSessions.get(settings.baseUrl) || [];\n    let session = find(running, value => value.id === model.id);\n    if (session) {\n      return Promise.resolve(session.clone());\n    }\n    return createSession(model, settings);\n  }\n\n  /**\n   * Create a Session object.\n   *\n   * @returns - A promise that resolves with a started session.\n   */\n  export\n  function createSession(model: Session.IModel, settings?: ServerConnection.ISettings): Promise<DefaultSession> {\n    settings = settings || ServerConnection.makeSettings();\n    return Kernel.connectTo(model.kernel, settings).then(kernel => {\n      return new DefaultSession({\n        path: model.path,\n        type: model.type,\n        name: model.name,\n        serverSettings: settings\n      }, model.id, kernel);\n    });\n  }\n\n  /**\n   * Find a session by id.\n   */\n  export\n  function findById(id: string, settings?: ServerConnection.ISettings): Promise<Session.IModel> {\n    settings = settings || ServerConnection.makeSettings();\n    let running = runningSessions.get(settings.baseUrl) || [];\n    let session = find(running, value => value.id === id);\n    if (session) {\n      return Promise.resolve(session.model);\n    }\n\n    return getSessionModel(id, settings).catch(() => {\n      throw new Error(`No running session for id: ${id}`);\n    });\n  }\n\n  /**\n   * Find a session by path.\n   */\n  export\n  function findByPath(path: string, settings?: ServerConnection.ISettings): Promise<Session.IModel> {\n    settings = settings || ServerConnection.makeSettings();\n    let running = runningSessions.get(settings.baseUrl) || [];\n    let session = find(running, value => value.path === path);\n    if (session) {\n      return Promise.resolve(session.model);\n    }\n\n    return listRunning(settings).then(models => {\n      let model = find(models, value => {\n        return value.path === path;\n      });\n      if (model) {\n        return model;\n      }\n      throw new Error(`No running session for path: ${path}`);\n    });\n  }\n\n  /**\n   * Get a full session model from the server by session id string.\n   */\n  export\n  function getSessionModel(id: string, settings?: ServerConnection.ISettings): Promise<Session.IModel> {\n    settings = settings || ServerConnection.makeSettings();\n    let url = getSessionUrl(settings.baseUrl, id);\n    return ServerConnection.makeRequest(url, {}, settings).then(response => {\n      if (response.status !== 200) {\n        throw new ServerConnection.ResponseError(response);\n      }\n      return response.json();\n    }).then(data => {\n      validate.validateModel(data);\n      return updateFromServer(data, settings!.baseUrl);\n    });\n  }\n\n  /**\n   * Get a session url.\n   */\n  export\n  function getSessionUrl(baseUrl: string, id: string): string {\n    return URLExt.join(baseUrl, SESSION_SERVICE_URL, id);\n  }\n\n  /**\n   * Kill the sessions by id.\n   */\n  function killSessions(id: string, baseUrl: string): void {\n    let running = runningSessions.get(baseUrl) || [];\n    each(running.slice(), session => {\n      if (session.id === id) {\n        session.dispose();\n      }\n    });\n  }\n\n  /**\n   * List the running sessions.\n   */\n  export\n  function listRunning(settings?: ServerConnection.ISettings): Promise<Session.IModel[]> {\n    settings = settings || ServerConnection.makeSettings();\n    let url = URLExt.join(settings.baseUrl, SESSION_SERVICE_URL);\n    return ServerConnection.makeRequest(url, {}, settings).then(response => {\n      if (response.status !== 200) {\n        throw new ServerConnection.ResponseError(response);\n      }\n      return response.json();\n    }).then(data => {\n      if (!Array.isArray(data)) {\n        throw new Error('Invalid Session list');\n      }\n      for (let i = 0; i < data.length; i++) {\n        validate.validateModel(data[i]);\n      }\n      return updateRunningSessions(data, settings!.baseUrl);\n    });\n  }\n\n  /**\n   * Shut down a session by id.\n   */\n  export\n  function shutdownSession(id: string, settings?: ServerConnection.ISettings): Promise<void> {\n    settings = settings || ServerConnection.makeSettings();\n    let url = getSessionUrl(settings.baseUrl, id);\n    let init = { method: 'DELETE' };\n    return ServerConnection.makeRequest(url, init, settings).then(response => {\n      if (response.status === 404) {\n        response.json().then(data => {\n          let msg = (\n            data.message || `The session \"${id}\"\" does not exist on the server`\n          );\n          console.warn(msg);\n        });\n      } else if (response.status === 410) {\n        throw new ServerConnection.ResponseError(response,\n          'The kernel was deleted but the session was not'\n        );\n      } else if (response.status !== 204) {\n        throw new ServerConnection.ResponseError(response);\n      }\n      killSessions(id, settings!.baseUrl);\n    });\n  }\n\n  /**\n   * Shut down all sessions.\n   */\n  export\n  function shutdownAll(settings?: ServerConnection.ISettings): Promise<void> {\n    settings = settings || ServerConnection.makeSettings();\n    return listRunning(settings).then(running => {\n      each(running, s => {\n        shutdownSession(s.id, settings);\n      });\n    });\n  }\n\n  /**\n   * Start a new session.\n   */\n  export\n  function startNew(options: Session.IOptions): Promise<Session.ISession> {\n    if (options.path === void 0) {\n      return Promise.reject(new Error('Must specify a path'));\n    }\n    return startSession(options).then(model => {\n      return createSession(model, options.serverSettings);\n    });\n  }\n\n  /**\n   * Create a new session, or return an existing session if a session if\n   * the session path already exists\n   */\n  export\n  function startSession(options: Session.IOptions): Promise<Session.IModel> {\n    let settings = options.serverSettings || ServerConnection.makeSettings();\n    let model = {\n      kernel: { name: options.kernelName, id: options.kernelId },\n      path: options.path,\n      type: options.type || '',\n      name: options.name || ''\n    };\n    let url = URLExt.join(settings.baseUrl, SESSION_SERVICE_URL);\n    let init = {\n      method: 'POST',\n      body: JSON.stringify(model)\n    };\n    return ServerConnection.makeRequest(url, init, settings).then(response => {\n      if (response.status !== 201) {\n        throw new ServerConnection.ResponseError(response);\n      }\n      return response.json();\n    }).then(data => {\n      validate.validateModel(data);\n      return updateFromServer(data, settings.baseUrl);\n    });\n  }\n\n  /**\n   * Update the running sessions given an updated session Id.\n   */\n  export\n  function updateFromServer(model: Session.IModel, baseUrl: string): Promise<Session.IModel> {\n    let promises: Promise<void>[] = [];\n    let running = runningSessions.get(baseUrl) || [];\n    each(running.slice(), session => {\n      if (session.id === model.id) {\n        promises.push(session.update(model));\n      }\n    });\n    return Promise.all(promises).then(() => { return model; });\n  }\n\n  /**\n   * Update the running sessions based on new data from the server.\n   */\n  export\n  function updateRunningSessions(sessions: Session.IModel[], baseUrl: string): Promise<Session.IModel[]> {\n    let promises: Promise<void>[] = [];\n    let running = runningSessions.get(baseUrl) || [];\n    each(running.slice(), session => {\n      let updated = find(sessions, sId => {\n        if (session.id === sId.id) {\n          promises.push(session.update(sId));\n          return true;\n        }\n        return false;\n      });\n      // If session is no longer running on disk, emit dead signal.\n      if (!updated && session.status !== 'dead') {\n        session.dispose();\n      }\n    });\n    return Promise.all(promises).then(() => { return sessions; });\n  }\n}\n\n"]}