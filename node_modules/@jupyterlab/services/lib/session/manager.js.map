{"version":3,"file":"manager.js","sourceRoot":"","sources":["../../../../../services/src/session/manager.ts"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,2DAA2D;;;;;;;;;;AAE3D,iDAE6B;AAE7B,iDAE6B;AAE7B,iDAE6B;AAE7B,oCAEmB;AAEnB,wBAEY;AAEZ,qCAEmB;AAGnB;;GAEG;AACH;IAEE;;;;OAIG;IACH,wBAAY,OAAqC;QAArC,wBAAA,EAAA,YAAqC;QAAjD,iBAiBC;QA0RO,gBAAW,GAAG,KAAK,CAAC;QACpB,YAAO,GAAqB,EAAE,CAAC;QAC/B,cAAS,GAAG,IAAI,GAAG,EAAoB,CAAC;QACxC,WAAM,GAA8B,IAAI,CAAC;QACzC,iBAAY,GAAG,CAAC,CAAC,CAAC;QAClB,gBAAW,GAAG,CAAC,CAAC,CAAC;QAEjB,kBAAa,GAAG,IAAI,kBAAM,CAA2B,IAAI,CAAC,CAAC;QAC3D,oBAAe,GAAG,IAAI,kBAAM,CAAyB,IAAI,CAAC,CAAC;QAlTjE,IAAI,CAAC,cAAc,GAAG,CACpB,OAAO,CAAC,cAAc,IAAI,oBAAgB,CAAC,YAAY,EAAE,CAC1D,CAAC;QAEF,4BAA4B;QAC5B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC,IAAI,CAAC;YAC7C,MAAM,CAAC,KAAI,CAAC,eAAe,EAAE,CAAC;QAChC,CAAC,CAAC,CAAC;QAEH,kBAAkB;QAClB,IAAI,CAAC,YAAY,GAAI,WAAmB,CAAC;YACvC,KAAI,CAAC,eAAe,EAAE,CAAC;QACzB,CAAC,EAAE,KAAK,CAAC,CAAC;QACV,IAAI,CAAC,WAAW,GAAI,WAAmB,CAAC;YACtC,KAAI,CAAC,aAAa,EAAE,CAAC;QACvB,CAAC,EAAE,KAAK,CAAC,CAAC;IACZ,CAAC;IAKD,sBAAI,wCAAY;QAHhB;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;QAC5B,CAAC;;;OAAA;IAKD,sBAAI,0CAAc;QAHlB;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;QAC9B,CAAC;;;OAAA;IAKD,sBAAI,sCAAU;QAHd;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;QAC1B,CAAC;;;OAAA;IAUD,sBAAI,iCAAK;QAHT;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QACrB,CAAC;;;OAAA;IAKD,sBAAI,mCAAO;QAHX;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC;QAC9B,CAAC;;;OAAA;IAKD,sBAAI,iCAAK;QAHT;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;QAC5B,CAAC;;;OAAA;IAED;;OAEG;IACH,gCAAO,GAAP;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACpB,MAAM,CAAC;QACT,CAAC;QACD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACjC,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAChC,kBAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QACvB,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;IAC1B,CAAC;IAED;;;;OAIG;IACH,gCAAO,GAAP;QACE,MAAM,CAAC,gBAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC5B,CAAC;IAED;;;;;;;;OAQG;IACH,qCAAY,GAAZ;QACE,MAAM,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;IAC9B,CAAC;IAED;;;;;;;;OAQG;IACH,uCAAc,GAAd;QACE,MAAM,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC;IAChC,CAAC;IAED;;;;;OAKG;IACH,iCAAQ,GAAR,UAAS,OAAyB;QAAlC,iBAMC;QALC,IAAI,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;QACzC,MAAM,CAAC,iBAAO,CAAC,QAAQ,cAAM,OAAO,IAAE,cAAc,gBAAA,IAAG,CAAC,IAAI,CAAC,UAAA,OAAO;YAClE,KAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;YACzB,MAAM,CAAC,OAAO,CAAC;QACjB,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;;;;OAOG;IACH,qCAAY,GAAZ,UAAa,IAAY;QAAzB,iBAQC;QAPC,MAAM,CAAC,iBAAO,CAAC,WAAW,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,UAAA,QAAQ;YAC3D,IAAM,OAAO,GAAG,QAAQ,CAAC,MAAM,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,IAAI,KAAK,IAAI,EAAnB,CAAmB,CAAC,CAAC;YAC9D,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;gBACzB,IAAM,EAAE,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;gBACzB,MAAM,CAAC,KAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,cAAoB,CAAC,CAAC,CAAC;YACxD,CAAC;QACH,CAAC,CAAC,CAAC,KAAK,CAAC,cAAM,OAAA,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,EAAvB,CAAuB,CAAC,CAAC,CAAC,kBAAkB;IAC7D,CAAC;IAED;;OAEG;IACH,iCAAQ,GAAR,UAAS,EAAU;QACjB,MAAM,CAAC,iBAAO,CAAC,QAAQ,CAAC,EAAE,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;IACnD,CAAC;IAED;;OAEG;IACH,mCAAU,GAAV,UAAW,IAAY;QACrB,MAAM,CAAC,iBAAO,CAAC,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;IACvD,CAAC;IAED;;OAEG;IACH,kCAAS,GAAT,UAAU,KAAqB;QAA/B,iBAKC;QAJC,MAAM,CAAC,iBAAO,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,UAAA,OAAO;YAC/D,KAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;YACzB,MAAM,CAAC,OAAO,CAAC;QACjB,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACH,iCAAQ,GAAR,UAAS,EAAU;QAAnB,iBAmBC;QAlBC,IAAI,KAAK,GAAG,oBAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,EAAE,KAAK,EAAE,EAAf,CAAe,CAAC,CAAC;QAC5E,EAAE,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACjB,MAAM,CAAC;QACT,CAAC;QACD,gCAAgC;QAChC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAC9B,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC;QAEhD,MAAM,CAAC,iBAAO,CAAC,QAAQ,CAAC,EAAE,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC;YACpD,IAAI,QAAQ,GAAuB,EAAE,CAAC;YACtC,KAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAA,CAAC;gBACtB,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;oBAChB,CAAC,CAAC,OAAO,EAAE,CAAC;oBACZ,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACnB,CAAC;YACH,CAAC,CAAC,CAAC;YACH,QAAQ,CAAC,OAAO,CAAC,UAAA,CAAC,IAAM,KAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACH,oCAAW,GAAX;QAAA,iBAoBC;QAnBC,iCAAiC;QACjC,IAAI,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC;QAC1B,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YACtB,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;YAClB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAChC,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,IAAI,CAAC;YACjC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,UAAA,KAAK;gBACjC,MAAM,CAAC,iBAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,EAAE,KAAI,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC;oBAC1D,IAAI,QAAQ,GAAuB,EAAE,CAAC;oBACtC,KAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAA,CAAC;wBACtB,CAAC,CAAC,OAAO,EAAE,CAAC;wBACZ,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBACnB,CAAC,CAAC,CAAC;oBACH,QAAQ,CAAC,OAAO,CAAC,UAAA,CAAC,IAAM,KAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACvD,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,cAAQ,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACK,sCAAa,GAArB,UAAsB,EAAU;QAC9B,IAAI,KAAK,GAAG,oBAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,EAAE,KAAK,EAAE,EAAf,CAAe,CAAC,CAAC;QAC5E,EAAE,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACjB,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YAC9B,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC;QAClD,CAAC;IACH,CAAC;IAED;;OAEG;IACK,mCAAU,GAAlB,UAAmB,OAAyB;QAA5C,iBAiBC;QAhBC,IAAI,EAAE,GAAG,OAAO,CAAC,EAAE,CAAC;QACpB,IAAI,KAAK,GAAG,oBAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,EAAE,KAAK,EAAE,EAAf,CAAe,CAAC,CAAC;QAC5E,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAC5B,EAAE,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACjB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACjC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC;QAClD,CAAC;QACD,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,UAAC,CAAC;YAC3B,KAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;QACH,OAAO,CAAC,eAAe,CAAC,OAAO,CAAC,UAAC,MAAM,EAAE,IAAI;YAC3C,KAAI,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QACH,OAAO,CAAC,aAAa,CAAC,OAAO,CAAC;YAC5B,KAAI,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACK,mCAAU,GAAlB,UAAmB,KAAqB;QACtC,IAAI,KAAK,GAAG,oBAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,EAAE,KAAK,KAAK,CAAC,EAAE,EAArB,CAAqB,CAAC,CAAC;QAClF,EAAE,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACjB,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;YAC5B,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC;QAClD,CAAC;IACH,CAAC;IAED;;OAEG;IACK,sCAAa,GAArB;QAAA,iBAOC;QANC,MAAM,CAAC,eAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,UAAA,KAAK;YACpD,EAAE,CAAC,CAAC,CAAC,mBAAO,CAAC,SAAS,CAAC,KAAK,EAAE,KAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBAC3C,KAAI,CAAC,MAAM,GAAG,KAAK,CAAC;gBACpB,KAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACjC,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACK,wCAAe,GAAvB;QAAA,iBAgBC;QAfC,MAAM,CAAC,iBAAO,CAAC,WAAW,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,UAAA,MAAM;YACzD,EAAE,CAAC,CAAC,CAAC,mBAAO,CAAC,SAAS,CAAC,MAAM,EAAE,KAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBAC7C,IAAI,KAAG,GAAG,MAAM,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,EAAE,EAAJ,CAAI,CAAC,CAAC;gBAChC,IAAI,UAAQ,GAAuB,EAAE,CAAC;gBACtC,KAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAA,CAAC;oBACtB,EAAE,CAAC,CAAC,KAAG,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;wBAC7B,CAAC,CAAC,OAAO,EAAE,CAAC;wBACZ,UAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBACnB,CAAC;gBACH,CAAC,CAAC,CAAC;gBACH,UAAQ,CAAC,OAAO,CAAC,UAAA,CAAC,IAAM,KAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACrD,KAAI,CAAC,OAAO,GAAG,MAAM,CAAC,KAAK,EAAE,CAAC;gBAC9B,KAAI,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACpC,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAWH,qBAAC;AAAD,CAAC,AA3TD,IA2TC;AA1TK,wCAAc","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  ArrayExt, IIterator, iter\n} from '@phosphor/algorithm';\n\nimport {\n  JSONExt\n} from '@phosphor/coreutils';\n\nimport {\n  ISignal, Signal\n} from '@phosphor/signaling';\n\nimport {\n  Kernel\n} from '../kernel';\n\nimport {\n  ServerConnection\n} from '..';\n\nimport {\n  Session\n} from './session';\n\n\n/**\n * An implementation of a session manager.\n */\nexport\nclass SessionManager implements Session.IManager {\n  /**\n   * Construct a new session manager.\n   *\n   * @param options - The default options for each session.\n   */\n  constructor(options: SessionManager.IOptions = {}) {\n    this.serverSettings = (\n      options.serverSettings || ServerConnection.makeSettings()\n    );\n\n    // Initialize internal data.\n    this._readyPromise = this._refreshSpecs().then(() => {\n      return this._refreshRunning();\n    });\n\n    // Set up polling.\n    this._modelsTimer = (setInterval as any)(() => {\n      this._refreshRunning();\n    }, 10000);\n    this._specsTimer = (setInterval as any)(() => {\n      this._refreshSpecs();\n    }, 61000);\n  }\n\n  /**\n   * A signal emitted when the kernel specs change.\n   */\n  get specsChanged(): ISignal<this, Kernel.ISpecModels> {\n    return this._specsChanged;\n  }\n\n  /**\n   * A signal emitted when the running sessions change.\n   */\n  get runningChanged(): ISignal<this, Session.IModel[]> {\n    return this._runningChanged;\n  }\n\n  /**\n   * Test whether the terminal manager is disposed.\n   */\n  get isDisposed(): boolean {\n    return this._isDisposed;\n  }\n\n  /**\n   * The server settings of the manager.\n   */\n  readonly serverSettings: ServerConnection.ISettings;\n\n  /**\n   * Get the most recently fetched kernel specs.\n   */\n  get specs(): Kernel.ISpecModels | null {\n    return this._specs;\n  }\n\n  /**\n   * Test whether the manager is ready.\n   */\n  get isReady(): boolean {\n    return this._specs !== null;\n  }\n\n  /**\n   * A promise that fulfills when the manager is ready.\n   */\n  get ready(): Promise<void> {\n    return this._readyPromise;\n  }\n\n  /**\n   * Dispose of the resources used by the manager.\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    this._isDisposed = true;\n    clearInterval(this._modelsTimer);\n    clearInterval(this._specsTimer);\n    Signal.clearData(this);\n    this._models.length = 0;\n  }\n\n  /**\n   * Create an iterator over the most recent running sessions.\n   *\n   * @returns A new iterator over the running sessions.\n   */\n  running(): IIterator<Session.IModel> {\n    return iter(this._models);\n  }\n\n  /**\n   * Force a refresh of the specs from the server.\n   *\n   * @returns A promise that resolves when the specs are fetched.\n   *\n   * #### Notes\n   * This is intended to be called only in response to a user action,\n   * since the manager maintains its internal state.\n   */\n  refreshSpecs(): Promise<void> {\n    return this._refreshSpecs();\n  }\n\n  /**\n   * Force a refresh of the running sessions.\n   *\n   * @returns A promise that with the list of running sessions.\n   *\n   * #### Notes\n   * This is not typically meant to be called by the user, since the\n   * manager maintains its own internal state.\n   */\n  refreshRunning(): Promise<void> {\n    return this._refreshRunning();\n  }\n\n  /**\n   * Start a new session.  See also [[startNewSession]].\n   *\n   * @param options - Overrides for the default options, must include a\n   *   `'path'`.\n   */\n  startNew(options: Session.IOptions): Promise<Session.ISession> {\n    let serverSettings = this.serverSettings;\n    return Session.startNew({ ...options, serverSettings }).then(session => {\n      this._onStarted(session);\n      return session;\n    });\n  }\n\n  /**\n   * Find a session associated with a path and stop it is the only session using\n   * that kernel.\n   *\n   * @param path - The path in question.\n   *\n   * @returns A promise that resolves when the relevant sessions are stopped.\n   */\n  stopIfNeeded(path: string): Promise<void> {\n    return Session.listRunning(this.serverSettings).then(sessions => {\n      const matches = sessions.filter(value => value.path === path);\n      if (matches.length === 1) {\n        const id = matches[0].id;\n        return this.shutdown(id).catch(() => { /* no-op */ });\n      }\n    }).catch(() => Promise.resolve(void 0)); // Always succeed.\n  }\n\n  /**\n   * Find a session by id.\n   */\n  findById(id: string): Promise<Session.IModel> {\n    return Session.findById(id, this.serverSettings);\n  }\n\n  /**\n   * Find a session by path.\n   */\n  findByPath(path: string): Promise<Session.IModel> {\n    return Session.findByPath(path, this.serverSettings);\n  }\n\n  /*\n   * Connect to a running session.  See also [[connectToSession]].\n   */\n  connectTo(model: Session.IModel): Promise<Session.ISession> {\n    return Session.connectTo(model, this.serverSettings).then(session => {\n      this._onStarted(session);\n      return session;\n    });\n  }\n\n  /**\n   * Shut down a session by id.\n   */\n  shutdown(id: string): Promise<void> {\n    let index = ArrayExt.findFirstIndex(this._models, value => value.id === id);\n    if (index === -1) {\n      return;\n    }\n    // Proactively remove the model.\n    this._models.splice(index, 1);\n    this._runningChanged.emit(this._models.slice());\n\n    return Session.shutdown(id, this.serverSettings).then(() => {\n      let toRemove: Session.ISession[] = [];\n      this._sessions.forEach(s => {\n        if (s.id === id) {\n          s.dispose();\n          toRemove.push(s);\n        }\n      });\n      toRemove.forEach(s => { this._sessions.delete(s); });\n    });\n  }\n\n  /**\n   * Shut down all sessions.\n   *\n   * @returns A promise that resolves when all of the sessions are shut down.\n   */\n  shutdownAll(): Promise<void> {\n    // Proactively remove all models.\n    let models = this._models;\n    if (models.length > 0) {\n      this._models = [];\n      this._runningChanged.emit([]);\n    }\n\n    return this._refreshRunning().then(() => {\n      return Promise.all(models.map(model => {\n        return Session.shutdown(model.id, this.serverSettings).then(() => {\n          let toRemove: Session.ISession[] = [];\n          this._sessions.forEach(s => {\n            s.dispose();\n            toRemove.push(s);\n          });\n          toRemove.forEach(s => { this._sessions.delete(s); });\n        });\n      })).then(() => { return undefined; });\n    });\n  }\n\n  /**\n   * Handle a session terminating.\n   */\n  private _onTerminated(id: string): void {\n    let index = ArrayExt.findFirstIndex(this._models, value => value.id === id);\n    if (index !== -1) {\n      this._models.splice(index, 1);\n      this._runningChanged.emit(this._models.slice());\n    }\n  }\n\n  /**\n   * Handle a session starting.\n   */\n  private _onStarted(session: Session.ISession): void {\n    let id = session.id;\n    let index = ArrayExt.findFirstIndex(this._models, value => value.id === id);\n    this._sessions.add(session);\n    if (index === -1) {\n      this._models.push(session.model);\n      this._runningChanged.emit(this._models.slice());\n    }\n    session.terminated.connect((s) => {\n      this._onTerminated(id);\n    });\n    session.propertyChanged.connect((sender, prop) => {\n      this._onChanged(session.model);\n    });\n    session.kernelChanged.connect(() => {\n      this._onChanged(session.model);\n    });\n  }\n\n  /**\n   * Handle a change to a session.\n   */\n  private _onChanged(model: Session.IModel): void {\n    let index = ArrayExt.findFirstIndex(this._models, value => value.id === model.id);\n    if (index !== -1) {\n      this._models[index] = model;\n      this._runningChanged.emit(this._models.slice());\n    }\n  }\n\n  /**\n   * Refresh the specs.\n   */\n  private _refreshSpecs(): Promise<void> {\n    return Kernel.getSpecs(this.serverSettings).then(specs => {\n      if (!JSONExt.deepEqual(specs, this._specs)) {\n        this._specs = specs;\n        this._specsChanged.emit(specs);\n      }\n    });\n  }\n\n  /**\n   * Refresh the running sessions.\n   */\n  private _refreshRunning(): Promise<void> {\n    return Session.listRunning(this.serverSettings).then(models => {\n      if (!JSONExt.deepEqual(models, this._models)) {\n        let ids = models.map(r => r.id);\n        let toRemove: Session.ISession[] = [];\n        this._sessions.forEach(s => {\n          if (ids.indexOf(s.id) === -1) {\n            s.dispose();\n            toRemove.push(s);\n          }\n        });\n        toRemove.forEach(s => { this._sessions.delete(s); });\n        this._models = models.slice();\n        this._runningChanged.emit(models);\n      }\n    });\n  }\n\n  private _isDisposed = false;\n  private _models: Session.IModel[] = [];\n  private _sessions = new Set<Session.ISession>();\n  private _specs: Kernel.ISpecModels | null = null;\n  private _modelsTimer = -1;\n  private _specsTimer = -1;\n  private _readyPromise: Promise<void>;\n  private _specsChanged = new Signal<this, Kernel.ISpecModels>(this);\n  private _runningChanged = new Signal<this, Session.IModel[]>(this);\n}\n\n\n\n/**\n * The namespace for `SessionManager` class statics.\n */\nexport\nnamespace SessionManager {\n  /**\n   * The options used to initialize a SessionManager.\n   */\n  export\n  interface IOptions {\n    /**\n     * The server settings for the manager.\n     */\n    serverSettings?: ServerConnection.ISettings;\n  }\n}\n"]}