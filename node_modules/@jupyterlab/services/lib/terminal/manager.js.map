{"version":3,"file":"manager.js","sourceRoot":"","sources":["../../../../../services/src/terminal/manager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  ArrayExt, IIterator, iter\n} from '@phosphor/algorithm';\n\nimport {\n  JSONExt\n} from '@phosphor/coreutils';\n\nimport {\n  ISignal, Signal\n} from '@phosphor/signaling';\n\nimport {\n  ServerConnection\n} from '..';\n\nimport {\n  TerminalSession\n} from './terminal';\n\n\n/**\n * A terminal session manager.\n */\nexport\nclass TerminalManager implements TerminalSession.IManager {\n  /**\n   * Construct a new terminal manager.\n   */\n  constructor(options: TerminalManager.IOptions = {}) {\n    this.serverSettings = options.serverSettings || ServerConnection.makeSettings();\n\n    // Set up state handling if terminals are available.\n    if (TerminalSession.isAvailable()) {\n      // Initialize internal data.\n      this._readyPromise = this._refreshRunning();\n\n      // Set up polling.\n      this._refreshTimer = (setInterval as any)(() => {\n        this._refreshRunning();\n      }, 10000);\n    }\n  }\n\n  /**\n   * A signal emitted when the running terminals change.\n   */\n  get runningChanged(): ISignal<this, TerminalSession.IModel[]> {\n    return this._runningChanged;\n  }\n\n  /**\n   * Test whether the terminal manager is disposed.\n   */\n  get isDisposed(): boolean {\n    return this._isDisposed;\n  }\n\n  /**\n   * The server settings of the manager.\n   */\n  readonly serverSettings: ServerConnection.ISettings;\n\n  /**\n   * Test whether the manger is ready.\n   */\n  get isReady(): boolean {\n    return this._isReady;\n  }\n\n  /**\n   * Dispose of the resources used by the manager.\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    this._isDisposed = true;\n    clearInterval(this._refreshTimer);\n    Signal.clearData(this);\n    this._models = [];\n  }\n\n  /**\n   * A promise that fulfills when the manager is ready.\n   */\n  get ready(): Promise<void> {\n    return this._readyPromise || Promise.reject('Terminals unavailable');\n  }\n\n  /**\n   * Whether the terminal service is available.\n   */\n  isAvailable(): boolean {\n    return TerminalSession.isAvailable();\n  }\n\n  /**\n   * Create an iterator over the most recent running terminals.\n   *\n   * @returns A new iterator over the running terminals.\n   */\n  running(): IIterator<TerminalSession.IModel> {\n    return iter(this._models);\n  }\n\n  /**\n   * Create a new terminal session.\n   *\n   * @param options - The options used to connect to the session.\n   *\n   * @returns A promise that resolves with the terminal instance.\n   *\n   * #### Notes\n   * The manager `serverSettings` will be used unless overridden in the\n   * options.\n   */\n  startNew(options?: TerminalSession.IOptions): Promise<TerminalSession.ISession> {\n    return TerminalSession.startNew(this._getOptions(options)).then(session => {\n      this._onStarted(session);\n      return session;\n    });\n  }\n\n  /*\n   * Connect to a running session.\n   *\n   * @param name - The name of the target session.\n   *\n   * @param options - The options used to connect to the session.\n   *\n   * @returns A promise that resolves with the new session instance.\n   *\n   * #### Notes\n   * The manager `serverSettings` will be used unless overridden in the\n   * options.\n   */\n  connectTo(name: string, options?: TerminalSession.IOptions): Promise<TerminalSession.ISession> {\n    return TerminalSession.connectTo(name, this._getOptions(options)).then(session => {\n      this._onStarted(session);\n      return session;\n    });\n  }\n\n  /**\n   * Shut down a terminal session by name.\n   */\n  shutdown(name: string): Promise<void> {\n    let index = ArrayExt.findFirstIndex(this._models, value => value.name === name);\n    if (index === -1) {\n      return;\n    }\n\n    // Proactively remove the model.\n    this._models.splice(index, 1);\n    this._runningChanged.emit(this._models.slice());\n\n    return TerminalSession.shutdown(name, this.serverSettings).then(() => {\n      let toRemove: TerminalSession.ISession[] = [];\n      this._sessions.forEach(s => {\n        if (s.name === name) {\n          s.dispose();\n          toRemove.push(s);\n        }\n      });\n      toRemove.forEach(s => { this._sessions.delete(s); });\n    });\n  }\n\n  /**\n   * Shut down all terminal sessions.\n   *\n   * @returns A promise that resolves when all of the sessions are shut down.\n   */\n  shutdownAll(): Promise<void> {\n    // Proactively remove all models.\n    let models = this._models;\n    if (models.length > 0) {\n      this._models = [];\n      this._runningChanged.emit([]);\n    }\n\n    return this._refreshRunning().then(() => {\n      return Promise.all(models.map(model => {\n        return TerminalSession.shutdown(model.name, this.serverSettings).then(() => {\n          let toRemove: TerminalSession.ISession[] = [];\n          this._sessions.forEach(s => {\n            s.dispose();\n            toRemove.push(s);\n          });\n          toRemove.forEach(s => { this._sessions.delete(s); });\n        });\n      })).then(() => { return undefined; });\n    });\n  }\n\n  /**\n   * Force a refresh of the running sessions.\n   *\n   * @returns A promise that with the list of running sessions.\n   *\n   * #### Notes\n   * This is not typically meant to be called by the user, since the\n   * manager maintains its own internal state.\n   */\n  refreshRunning(): Promise<void> {\n    return this._refreshRunning();\n  }\n\n  /**\n   * Handle a session terminating.\n   */\n  private _onTerminated(name: string): void {\n    let index = ArrayExt.findFirstIndex(this._models, value => value.name === name);\n    if (index !== -1) {\n      this._models.splice(index, 1);\n      this._runningChanged.emit(this._models.slice());\n    }\n  }\n\n  /**\n   * Handle a session starting.\n   */\n  private _onStarted(session: TerminalSession.ISession): void {\n    let name = session.name;\n    this._sessions.add(session);\n    let index = ArrayExt.findFirstIndex(this._models, value => value.name === name);\n    if (index === -1) {\n      this._models.push(session.model);\n      this._runningChanged.emit(this._models.slice());\n    }\n    session.terminated.connect(() => {\n      this._onTerminated(name);\n    });\n  }\n\n  /**\n   * Refresh the running sessions.\n   */\n  private _refreshRunning(): Promise<void> {\n    return TerminalSession.listRunning(this.serverSettings).then(models => {\n      this._isReady = true;\n      if (!JSONExt.deepEqual(models, this._models)) {\n        let names = models.map(r => r.name);\n        let toRemove: TerminalSession.ISession[] = [];\n        this._sessions.forEach(s => {\n          if (names.indexOf(s.name) === -1) {\n            s.dispose();\n            toRemove.push(s);\n          }\n        });\n        toRemove.forEach(s => { this._sessions.delete(s); });\n        this._models = models.slice();\n        this._runningChanged.emit(models);\n      }\n    });\n  }\n\n  /**\n   * Get a set of options to pass.\n   */\n  private _getOptions(options: TerminalSession.IOptions = {}): TerminalSession.IOptions {\n    return { ...options, serverSettings: this.serverSettings };\n  }\n\n  private _models: TerminalSession.IModel[] = [];\n  private _sessions = new Set<TerminalSession.ISession>();\n  private _isDisposed = false;\n  private _isReady = false;\n  private _refreshTimer = -1;\n  private _readyPromise: Promise<void>;\n  private _runningChanged = new Signal<this, TerminalSession.IModel[]>(this);\n}\n\n\n\n/**\n * The namespace for TerminalManager statics.\n */\nexport\nnamespace TerminalManager {\n  /**\n   * The options used to initialize a terminal manager.\n   */\n  export\n  interface IOptions {\n    /**\n     * The server settings used by the manager.\n     */\n    serverSettings?: ServerConnection.ISettings;\n  }\n}\n"]}