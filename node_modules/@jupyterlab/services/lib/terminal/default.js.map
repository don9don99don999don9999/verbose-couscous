{"version":3,"file":"default.js","sourceRoot":"","sources":["../../../../../services/src/terminal/default.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  PageConfig, URLExt\n} from '@jupyterlab/coreutils';\n\nimport {\n  ArrayExt, each, map, toArray\n} from '@phosphor/algorithm';\n\nimport {\n  JSONPrimitive\n} from '@phosphor/coreutils';\n\nimport {\n  ISignal, Signal\n} from '@phosphor/signaling';\n\nimport {\n  ServerConnection\n} from '..';\n\nimport {\n  TerminalSession\n} from './terminal';\n\n\n/**\n * The url for the terminal service.\n */\nconst TERMINAL_SERVICE_URL = 'api/terminals';\n\n\n/**\n * An implementation of a terminal interface.\n */\nexport\nclass DefaultTerminalSession implements TerminalSession.ISession {\n  /**\n   * Construct a new terminal session.\n   */\n  constructor(name: string, options: TerminalSession.IOptions = {}) {\n    this._name = name;\n    this.serverSettings = options.serverSettings || ServerConnection.makeSettings();\n    this._readyPromise = this._initializeSocket();\n  }\n\n  /**\n   * A signal emitted when the session is shut down.\n   */\n  get terminated(): Signal<this, void> {\n    return this._terminated;\n  }\n\n  /**\n   * A signal emitted when a message is received from the server.\n   */\n  get messageReceived(): ISignal<this, TerminalSession.IMessage> {\n    return this._messageReceived;\n  }\n\n  /**\n   * Get the name of the terminal session.\n   */\n  get name(): string {\n    return this._name;\n  }\n\n  /**\n   * Get the model for the terminal session.\n   */\n  get model(): TerminalSession.IModel {\n    return { name: this._name };\n  }\n\n  /**\n   * The server settings for the session.\n   */\n  readonly serverSettings: ServerConnection.ISettings;\n\n  /**\n   * Test whether the session is ready.\n   */\n  get isReady(): boolean {\n    return this._isReady;\n  }\n\n  /**\n   * A promise that fulfills when the session is ready.\n   */\n  get ready(): Promise<void> {\n    return this._readyPromise;\n  }\n\n  /**\n   * Test whether the session is disposed.\n   */\n  get isDisposed(): boolean {\n    return this._isDisposed;\n  }\n\n  /**\n   * Dispose of the resources held by the session.\n   */\n  dispose(): void {\n    if (this._isDisposed) {\n      return;\n    }\n\n    this.terminated.emit(void 0);\n    this._isDisposed = true;\n    if (this._ws) {\n      this._ws.close();\n      this._ws = null;\n    }\n    delete Private.running[this._url];\n    Signal.clearData(this);\n  }\n\n  /**\n   * Send a message to the terminal session.\n   */\n  send(message: TerminalSession.IMessage): void {\n    if (this._isDisposed || !message.content) {\n      return;\n    }\n\n    const msg = [message.type, ...message.content];\n    const socket = this._ws;\n    const value = JSON.stringify(msg);\n\n    if (this._isReady && socket) {\n      socket.send(value);\n      return;\n    }\n\n    this.ready.then(() => {\n      const socket = this._ws;\n\n      if (socket) {\n        socket.send(value);\n      }\n    });\n  }\n\n  /**\n   * Reconnect to the terminal.\n   *\n   * @returns A promise that resolves when the terminal has reconnected.\n   */\n  reconnect(): Promise<void> {\n    this._readyPromise = this._initializeSocket();\n    return this._readyPromise;\n  }\n\n  /**\n   * Shut down the terminal session.\n   */\n  shutdown(): Promise<void> {\n    const { name, serverSettings } = this;\n    return DefaultTerminalSession.shutdown(name, serverSettings);\n  }\n\n  /**\n   * Clone the current session object.\n   */\n  clone(): TerminalSession.ISession {\n    const { name, serverSettings } = this;\n    return new DefaultTerminalSession(name, { serverSettings });\n  }\n\n  /**\n   * Connect to the websocket.\n   */\n  private _initializeSocket(): Promise<void> {\n    const name = this._name;\n    let socket = this._ws;\n\n    if (socket) {\n      // Clear the websocket event handlers and the socket itself.\n      socket.onopen = this._noOp;\n      socket.onclose = this._noOp;\n      socket.onerror = this._noOp;\n      socket.onmessage = this._noOp;\n      socket.close();\n      this._ws = null;\n    }\n    this._isReady = false;\n\n    return new Promise<void>((resolve, reject) => {\n      const settings = this.serverSettings;\n      const token = this.serverSettings.token;\n\n      this._url = Private.getTermUrl(settings.baseUrl, this._name);\n      Private.running[this._url] = this;\n\n      let wsUrl = URLExt.join(settings.wsUrl, `terminals/websocket/${name}`);\n\n      if (token) {\n        wsUrl = wsUrl + `?token=${token}`;\n      }\n\n      socket = this._ws = new settings.WebSocket(wsUrl);\n\n      socket.onmessage = (event: MessageEvent) => {\n        if (this._isDisposed) {\n          return;\n        }\n\n        const data = JSON.parse(event.data) as JSONPrimitive[];\n\n        this._messageReceived.emit({\n          type: data[0] as TerminalSession.MessageType,\n          content: data.slice(1)\n        });\n      };\n\n      socket.onopen = (event: MessageEvent) => {\n        if (!this._isDisposed) {\n          this._isReady = true;\n          resolve(undefined);\n        }\n      };\n\n      socket.onerror = (event: Event) => {\n        if (!this._isDisposed) {\n          reject(event);\n        }\n      };\n    });\n  }\n\n  private _isDisposed = false;\n  private _isReady = false;\n  private _messageReceived = new Signal<this, TerminalSession.IMessage>(this);\n  private _terminated = new Signal<this, void>(this);\n  private _name: string;\n  private _readyPromise: Promise<void>;\n  private _url: string;\n  private _ws: WebSocket | null = null;\n  private _noOp = () => { /* no-op */};\n}\n\n\n/**\n * The static namespace for `DefaultTerminalSession`.\n */\nexport\nnamespace DefaultTerminalSession {\n  /**\n   * Whether the terminal service is available.\n   */\n  export\n  function isAvailable(): boolean {\n    let available = String(PageConfig.getOption('terminalsAvailable'));\n    return available.toLowerCase() === 'true';\n  }\n\n  /**\n   * Start a new terminal session.\n   *\n   * @param options - The session options to use.\n   *\n   * @returns A promise that resolves with the session instance.\n   */\n  export\n  function startNew(options: TerminalSession.IOptions = {}): Promise<TerminalSession.ISession> {\n    if (!TerminalSession.isAvailable()) {\n      throw Private.unavailableMsg;\n    }\n    let serverSettings = options.serverSettings || ServerConnection.makeSettings();\n    let url = Private.getServiceUrl(serverSettings.baseUrl);\n    let init = { method: 'POST' };\n\n    return ServerConnection.makeRequest(url, init, serverSettings).then(response => {\n      if (response.status !== 200) {\n        throw new ServerConnection.ResponseError(response);\n      }\n      return response.json();\n    }).then((data: TerminalSession.IModel) => {\n      let name = data.name;\n      return new DefaultTerminalSession(name, {...options, serverSettings });\n    });\n  }\n\n  /*\n   * Connect to a running session.\n   *\n   * @param name - The name of the target session.\n   *\n   * @param options - The session options to use.\n   *\n   * @returns A promise that resolves with the new session instance.\n   *\n   * #### Notes\n   * If the session was already started via `startNew`, the existing\n   * session object is used as the fulfillment value.\n   *\n   * Otherwise, if `options` are given, we resolve the promise after\n   * confirming that the session exists on the server.\n   *\n   * If the session does not exist on the server, the promise is rejected.\n   */\n  export\n  function connectTo(name: string, options: TerminalSession.IOptions = {}): Promise<TerminalSession.ISession> {\n    if (!TerminalSession.isAvailable()) {\n      return Promise.reject(Private.unavailableMsg);\n    }\n    let serverSettings = options.serverSettings || ServerConnection.makeSettings();\n    let url = Private.getTermUrl(serverSettings.baseUrl, name);\n    if (url in Private.running) {\n      return Promise.resolve(Private.running[url].clone());\n    }\n    return listRunning(serverSettings).then(models => {\n      let index = ArrayExt.findFirstIndex(models, model => {\n        return model.name === name;\n      });\n      if (index !== -1) {\n        let session = new DefaultTerminalSession(name, { ...options, serverSettings});\n        return Promise.resolve(session);\n      }\n      return Promise.reject<TerminalSession.ISession>('Could not find session');\n    });\n  }\n\n  /**\n   * List the running terminal sessions.\n   *\n   * @param settings - The server settings to use.\n   *\n   * @returns A promise that resolves with the list of running session models.\n   */\n  export\n  function listRunning(settings?: ServerConnection.ISettings): Promise<TerminalSession.IModel[]> {\n    if (!TerminalSession.isAvailable()) {\n      return Promise.reject(Private.unavailableMsg);\n    }\n    settings = settings || ServerConnection.makeSettings();\n    let url = Private.getServiceUrl(settings.baseUrl);\n    return ServerConnection.makeRequest(url, {}, settings).then(response => {\n      if (response.status !== 200) {\n        throw new ServerConnection.ResponseError(response);\n      }\n      return response.json();\n    }).then((data: TerminalSession.IModel[]) => {\n      if (!Array.isArray(data)) {\n        throw new Error('Invalid terminal data');\n      }\n      // Update the local data store.\n      let urls = toArray(map(data, item => {\n          return URLExt.join(url, item.name);\n      }));\n      each(Object.keys(Private.running), runningUrl => {\n        if (urls.indexOf(runningUrl) === -1) {\n          let session = Private.running[runningUrl];\n          session.dispose();\n        }\n      });\n      return data;\n    });\n  }\n\n  /**\n   * Shut down a terminal session by name.\n   *\n   * @param name - The name of the target session.\n   *\n   * @param settings - The server settings to use.\n   *\n   * @returns A promise that resolves when the session is shut down.\n   */\n  export\n  function shutdown(name: string, settings?: ServerConnection.ISettings): Promise<void> {\n    if (!TerminalSession.isAvailable()) {\n      return Promise.reject(Private.unavailableMsg);\n    }\n    settings = settings || ServerConnection.makeSettings();\n    let url = Private.getTermUrl(settings.baseUrl, name);\n    let init = { method: 'DELETE' };\n    return ServerConnection.makeRequest(url, init, settings).then(response => {\n      if (response.status === 404) {\n        return response.json().then(data => {\n          console.warn(data['message']);\n          Private.killTerminal(url);\n        });\n      }\n      if (response.status !== 204) {\n        throw new ServerConnection.ResponseError(response);\n      }\n      Private.killTerminal(url);\n    });\n  }\n\n  /**\n   * Shut down all terminal sessions.\n   *\n   * @param settings - The server settings to use.\n   *\n   * @returns A promise that resolves when all the sessions are shut down.\n   */\n  export\n  function shutdownAll(settings?: ServerConnection.ISettings): Promise<void> {\n    settings = settings || ServerConnection.makeSettings();\n    return listRunning(settings).then(running => {\n      each(running, s => {\n        shutdown(s.name, settings);\n      });\n    });\n  }\n}\n\n\n/**\n * A namespace for private data.\n */\nnamespace Private {\n  /**\n   * A mapping of running terminals by url.\n   */\n  export\n  const running: { [key: string]: DefaultTerminalSession } = Object.create(null);\n\n  /**\n   * A promise returned for when terminals are unavailable.\n   */\n  export\n  const unavailableMsg = 'Terminals Unavailable';\n\n  /**\n   * Get the url for a terminal.\n   */\n  export\n  function getTermUrl(baseUrl: string, name: string): string {\n    return URLExt.join(baseUrl, TERMINAL_SERVICE_URL, name);\n  }\n\n  /**\n   * Get the base url.\n   */\n  export\n  function getServiceUrl(baseUrl: string): string {\n    return URLExt.join(baseUrl, TERMINAL_SERVICE_URL);\n  }\n\n  /**\n   * Kill a terminal by url.\n   */\n  export\n  function killTerminal(url: string): void {\n    // Update the local data store.\n    if (Private.running[url]) {\n      let session = Private.running[url];\n      session.dispose();\n    }\n  }\n}\n"]}