{"version":3,"file":"model.js","sourceRoot":"","sources":["../../../../filebrowser/src/model.ts"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,2DAA2D;;AAE3D,mDAE+B;AAE/B,qDAEgC;AAMhC,iDAE6B;AAE7B,iDAE6B;AAM7B,iDAE6B;AAG7B;;GAEG;AACH,IAAM,gBAAgB,GAAG,KAAK,CAAC;AAE/B;;GAEG;AACH,IAAM,WAAW,GAAG,IAAI,CAAC;AAGzB;;;;;;GAMG;AACH;IAEE;;OAEG;IACH,0BAAY,OAAkC;QAwZtC,uBAAkB,GAAG,IAAI,kBAAM,CAAc,IAAI,CAAC,CAAC;QACnD,iBAAY,GAAG,IAAI,kBAAM,CAA8B,IAAI,CAAC,CAAC;QAC7D,WAAM,GAAsB,EAAE,CAAC;QAC/B,SAAI,GAAW,EAAE,CAAC;QAClB,qBAAgB,GAAG,EAAE,CAAC;QAEtB,iBAAY,GAAG,IAAI,kBAAM,CAA6B,IAAI,CAAC,CAAC;QAC5D,WAAM,GAAG,IAAI,GAAG,EAAU,CAAC;QAC3B,aAAQ,GAAyB,IAAI,CAAC;QACtC,iBAAY,GAAkB,IAAI,CAAC;QACnC,eAAU,GAAG,IAAI,kBAAM,CAAa,IAAI,CAAC,CAAC;QAC1C,iBAAY,GAAG,CAAC,CAAC,CAAC;QAClB,eAAU,GAAG,KAAK,CAAC;QACnB,cAAS,GAAqB,EAAE,CAAC;QACjC,WAAM,GAAoB,IAAI,CAAC;QAC/B,eAAU,GAAG,CAAC,CAAC,CAAC;QAChB,qBAAgB,GAAG,gBAAgB,CAAC;QAEpC,gBAAW,GAAG,KAAK,CAAC;QACpB,cAAS,GAAG,IAAI,2BAAe,EAAQ,CAAC;QA1a9C,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;QAC/B,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,SAAS,IAAI,EAAE,CAAC;QAC1C,IAAI,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;QAC5D,IAAI,CAAC,MAAM,GAAG;YACZ,IAAI,EAAE,QAAQ;YACd,IAAI,EAAE,mBAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC;YAChC,IAAI,EAAE,WAAW;YACjB,OAAO,EAAE,SAAS;YAClB,QAAQ,EAAE,KAAK;YACf,OAAO,EAAE,SAAS;YAClB,aAAa,EAAE,SAAS;YACxB,QAAQ,EAAE,YAAY;YACtB,MAAM,EAAE,MAAM;SACf,CAAC;QACF,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,KAAK,IAAI,IAAI,CAAC;QAE5B,IAAA,mCAAQ,CAAqB;QACrC,QAAQ,CAAC,QAAQ,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;QACjE,QAAQ,CAAC,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC;QAEvE,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAUD,sBAAI,+CAAiB;QAHrB;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC;QACjC,CAAC;;;OAAA;IAKD,sBAAI,sCAAQ;QAHZ;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;QAChC,CAAC;;;OAAA;IAKD,sBAAI,yCAAW;QAHf;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;QAC3B,CAAC;;;OAAA;IAKD,sBAAI,kCAAI;QAHR;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;QAC7C,CAAC;;;OAAA;IAKD,sBAAI,yCAAW;QAHf;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;QAC3B,CAAC;;;OAAA;IAKD,sBAAI,uCAAS;QAHb;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;QACzB,CAAC;;;OAAA;IAKD,sBAAI,mCAAK;QAHT;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC;QAC9C,CAAC;;;OAAA;IAKD,sBAAI,wCAAU;QAHd;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;QAC1B,CAAC;;;OAAA;IAED;;OAEG;IACH,kCAAO,GAAP;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACpB,MAAM,CAAC;QACT,CAAC;QACD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC9B,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;QAC1B,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;QACvB,kBAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IACzB,CAAC;IAED;;;;OAIG;IACH,gCAAK,GAAL;QACE,MAAM,CAAC,IAAI,yBAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACxC,CAAC;IAED;;;;OAIG;IACH,mCAAQ,GAAR;QACE,MAAM,CAAC,IAAI,yBAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAC3C,CAAC;IAED;;OAEG;IACH,kCAAO,GAAP;QACE,IAAI,CAAC,YAAY,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;QACzC,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;IACtB,CAAC;IAED;;;;;;OAMG;IACH,6BAAE,GAAF,UAAG,QAAc;QAAjB,iBAoDC;QApDE,yBAAA,EAAA,cAAc;QACf,EAAE,CAAC,CAAC,QAAQ,KAAK,GAAG,CAAC,CAAC,CAAC;YACrB,QAAQ,GAAG,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,QAAQ,EAC9B,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QAC/D,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,QAAQ,GAAG,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;QACnD,CAAC;QACD,2CAA2C;QAC3C,EAAE,CAAC,CAAC,QAAQ,KAAK,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YACpD,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;QACvB,CAAC;QACD,IAAI,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC;QACzB,IAAI,OAAO,GAA2B,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;QACxD,IAAI,CAAC,YAAY,GAAG,QAAQ,CAAC;QAC7B,EAAE,CAAC,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC;YAC1B,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;QAC5B,CAAC;QACD,IAAI,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;QACrC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAA,QAAQ;YACpE,EAAE,CAAC,CAAC,KAAI,CAAC,UAAU,CAAC,CAAC,CAAC;gBACpB,MAAM,CAAC;YACT,CAAC;YACD,KAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;YACzC,KAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;YAC/B,KAAI,CAAC,YAAY,GAAG,IAAI,CAAC;YACzB,EAAE,CAAC,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC;gBAC1B,oEAAoE;gBACpE,EAAE,CAAC,CAAC,KAAI,CAAC,MAAM,IAAI,KAAI,CAAC,IAAI,CAAC,CAAC,CAAC;oBAC7B,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAI,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC;gBAClD,CAAC;gBAED,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC;oBACrB,IAAI,EAAE,MAAM;oBACZ,QAAQ,UAAA;oBACR,QAAQ,UAAA;iBACT,CAAC,CAAC;YACL,CAAC;YACD,KAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,QAAQ,EAAE,QAAQ,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC,CAAC;YACvE,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC,KAAK,CAAC,UAAA,KAAK;YACZ,KAAI,CAAC,YAAY,GAAG,IAAI,CAAC;YACzB,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,KAAK,WAAW,CAAC,CAAC,CAAC;gBAClC,KAAK,CAAC,OAAO,GAAG,4BAAyB,KAAI,CAAC,MAAM,CAAC,IAAI,OAAG,CAAC;gBAC7D,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBACrB,KAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACpC,KAAI,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;YACf,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,KAAI,CAAC,gBAAgB,GAAG,gBAAgB,GAAG,EAAE,CAAC;gBAC9C,KAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACtC,CAAC;QACH,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED;;;;;;;OAOG;IACH,mCAAQ,GAAR,UAAS,IAAY;QACnB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAA,GAAG;YACjE,IAAI,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;YAC1C,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;YACnC,OAAO,CAAC,YAAY,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;YAClC,OAAO,CAAC,YAAY,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;YACrC,OAAO,CAAC,KAAK,EAAE,CAAC;YAChB,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;YACnC,MAAM,CAAC,KAAK,CAAC,CAAC;QAChB,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;;;;;;;OAUG;IACH,kCAAO,GAAP,UAAQ,EAAU;QAAlB,iBA0BC;QAzBC,IAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;QAC1B,IAAM,QAAQ,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;QAC7B,EAAE,CAAC,CAAC,CAAC,KAAK,IAAI,QAAQ,CAAC,CAAC,CAAC;YACvB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;QACjC,CAAC;QAED,IAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC7B,IAAM,GAAG,GAAG,kBAAgB,EAAE,SAAM,CAAC;QACrC,IAAM,KAAK,GAAG,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC;QACrC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,EAAK;gBAAJ,WAAG;YACtD,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACT,KAAI,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC/B,MAAM,CAAC;YACT,CAAC;YAED,IAAM,IAAI,GAAI,GAA0B,CAAC,MAAM,CAAW,CAAC;YAC3D,IAAM,SAAS,GAAG,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YAC5D,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC;iBACvC,IAAI,CAAC,cAAM,OAAA,KAAI,CAAC,EAAE,CAAC,SAAS,CAAC,EAAlB,CAAkB,CAAC;iBAC9B,KAAK,CAAC,cAAM,OAAA,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,EAAjB,CAAiB,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC,KAAK,CAAC,cAAM,OAAA,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,EAAjB,CAAiB,CAAC;aAC9B,IAAI,CAAC;YACJ,KAAI,CAAC,IAAI,GAAG,GAAG,CAAC;YAChB,KAAI,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC,CAAC,qCAAqC;IAC7C,CAAC;IAED;;;;;;;;;;OAUG;IACH,iCAAM,GAAN,UAAO,IAAU;QAAjB,iBAwBC;QAvBC,mCAAmC;QACnC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,gBAAgB,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC;YACpD,IAAI,GAAG,GAAG,0BAAwB,IAAI,CAAC,gBAAgB,UAAO,CAAC;YAC/D,GAAG,IAAI,OAAI,IAAI,CAAC,IAAI,OAAG,CAAC;YACxB,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAkB,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;QACzD,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC;YACzB,EAAE,CAAC,CAAC,KAAI,CAAC,UAAU,CAAC,CAAC,CAAC;gBACpB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAChC,CAAC;YACD,IAAI,IAAI,GAAG,gBAAI,CAAC,KAAI,CAAC,MAAM,EAAE,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,EAApB,CAAoB,CAAC,CAAC;YACxD,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACT,MAAM,CAAC,4BAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACpC,CAAC;YACD,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC,IAAI,CAAC,UAAA,KAAK;YACX,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACV,MAAM,CAAC,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAC5B,CAAC;YACD,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACK,kCAAO,GAAf,UAAgB,IAAU;QAA1B,iBAoCC;QAnCC,oCAAoC;QACpC,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;QAC5B,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;QACjD,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACrB,IAAI,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;QACpD,IAAI,IAAI,GAAyB,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC;QAClE,IAAI,MAAM,GAAwB,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC;QAEjE,wBAAwB;QACxB,IAAI,MAAM,GAAG,IAAI,UAAU,EAAE,CAAC;QAC9B,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;YACf,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC1B,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;QACjC,CAAC;QAED,MAAM,CAAC,IAAI,OAAO,CAAkB,UAAC,OAAO,EAAE,MAAM;YAClD,MAAM,CAAC,MAAM,GAAG,UAAC,KAAY;gBAC3B,IAAI,KAAK,GAA6B;oBACpC,IAAI,EAAE,IAAI;oBACV,MAAM,QAAA;oBACN,IAAI,MAAA;oBACJ,OAAO,EAAE,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC;iBACpC,CAAC;gBAEF,KAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,UAAA,QAAQ;oBAC5D,OAAO,CAAC,QAAQ,CAAC,CAAC;gBACpB,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YACnB,CAAC,CAAC;YAEF,MAAM,CAAC,OAAO,GAAG,UAAC,KAAY;gBAC5B,MAAM,CAAC,KAAK,CAAC,wBAAqB,IAAI,CAAC,IAAI,QAAI,GAAG,KAAK,CAAC,CAAC,CAAC;YAC5D,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IAEL,CAAC;IAED;;OAEG;IACK,0CAAe,GAAvB,UAAwB,QAAyB;QAAjD,iBAkBC;QAjBC,4BAA4B;QAC5B,IAAI,CAAC,MAAM,GAAG;YACZ,IAAI,EAAE,QAAQ,CAAC,IAAI;YACnB,IAAI,EAAE,QAAQ,CAAC,IAAI;YACnB,IAAI,EAAE,QAAQ,CAAC,IAAI;YACnB,OAAO,EAAE,SAAS;YAClB,QAAQ,EAAE,QAAQ,CAAC,QAAQ;YAC3B,OAAO,EAAE,QAAQ,CAAC,OAAO;YACzB,aAAa,EAAE,QAAQ,CAAC,aAAa;YACrC,QAAQ,EAAE,QAAQ,CAAC,QAAQ;YAC3B,MAAM,EAAE,QAAQ,CAAC,MAAM;SACxB,CAAC;QACF,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,OAAO,CAAC;QAC/B,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;QACpB,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,UAAC,KAAsB;YAC9C,KAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACK,4CAAiB,GAAzB,UAA0B,MAAwB,EAAE,MAA2C;QAA/F,iBAQC;QAPC,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;QAC1B,gBAAI,CAAC,MAAM,EAAE,UAAA,KAAK;YAChB,EAAE,CAAC,CAAC,KAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAChC,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC7B,CAAC;QACH,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IAC/B,CAAC;IAED;;OAEG;IACK,yCAAc,GAAtB,UAAuB,MAAyB,EAAE,MAA6B;QAC7E,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;QAC5B,IAAI,KAAK,GAAG,MAAM,CAAC,QAAQ,CAAC;QAC5B,EAAE,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,mBAAO,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;YAChE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC/B,IAAI,CAAC,eAAe,EAAE,CAAC;YACvB,MAAM,CAAC;QACT,CAAC;QACD,KAAK,GAAG,MAAM,CAAC,QAAQ,CAAC;QACxB,EAAE,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,mBAAO,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;YAChE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC/B,IAAI,CAAC,eAAe,EAAE,CAAC;YACvB,MAAM,CAAC;QACT,CAAC;IACH,CAAC;IAED;;OAEG;IACK,sCAAW,GAAnB;QAAA,iBAWC;QAVC,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,WAAW,CAAC;YACnC,EAAE,CAAC,CAAC,KAAI,CAAC,UAAU,CAAC,CAAC,CAAC;gBACpB,KAAI,CAAC,OAAO,EAAE,CAAC;gBACf,MAAM,CAAC;YACT,CAAC;YACD,IAAI,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;YAChC,EAAE,CAAC,CAAC,CAAC,IAAI,GAAG,KAAI,CAAC,YAAY,CAAC,GAAG,KAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;gBACvD,KAAI,CAAC,OAAO,EAAE,CAAC;YACjB,CAAC;QACH,CAAC,EAAE,WAAW,CAAC,CAAC;IAClB,CAAC;IAED;;OAEG;IACK,0CAAe,GAAvB;QACE,IAAI,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;QAChC,EAAE,CAAC,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC;YAC7C,IAAI,CAAC,OAAO,EAAE,CAAC;QACjB,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACzB,CAAC;IACH,CAAC;IAsBH,uBAAC;AAAD,CAAC,AAjbD,IAibC;AAhbK,4CAAgB;AAkdtB;;GAEG;AACH,IAAU,OAAO,CAiChB;AAjCD,WAAU,OAAO;IACf;;;;;OAKG;IACH,oBACoB,MAAkB;QACpC,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,YAAY,WAAW,CAAC,CAAC,CAAC;YACzC,kCAAkC;YAClC,IAAI,KAAK,GAAG,EAAE,CAAC;YACf,IAAI,GAAG,GAAG,IAAI,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YACxC,IAAI,MAAM,GAAG,GAAG,CAAC,UAAU,CAAC;YAC5B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBAChC,KAAK,IAAI,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YACvC,CAAC;YACD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACrB,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACnC,CAAC;IACH,CAAC;IAbQ,kBAAU,aAalB,CAAA;IAED;;OAEG;IACH,uBACuB,QAA2B,EAAE,IAAY,EAAE,IAAY;QAC5E,IAAM,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAC3C,IAAM,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAC3C,IAAM,QAAQ,GAAG,mBAAO,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QAClD,MAAM,CAAC,SAAS,CAAC,CAAC,CAAI,SAAS,SAAI,QAAU,CAAC,CAAC,CAAC,QAAQ,CAAC;IAC3D,CAAC;IALQ,qBAAa,gBAKrB,CAAA;AACH,CAAC,EAjCS,OAAO,KAAP,OAAO,QAiChB","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  IChangedArgs, IStateDB, PathExt\n} from '@jupyterlab/coreutils';\n\nimport {\n  IDocumentManager, shouldOverwrite\n} from '@jupyterlab/docmanager';\n\nimport {\n  Contents, Kernel, Session\n} from '@jupyterlab/services';\n\nimport {\n  ArrayIterator, each, find, IIterator, IterableOrArrayLike\n} from '@phosphor/algorithm';\n\nimport {\n  PromiseDelegate, ReadonlyJSONObject\n} from '@phosphor/coreutils';\n\nimport {\n  IDisposable\n} from '@phosphor/disposable';\n\nimport {\n  ISignal, Signal\n} from '@phosphor/signaling';\n\n\n/**\n * The duration of auto-refresh in ms.\n */\nconst REFRESH_DURATION = 10000;\n\n/**\n * The enforced time between refreshes in ms.\n */\nconst MIN_REFRESH = 1000;\n\n\n/**\n * An implementation of a file browser model.\n *\n * #### Notes\n * All paths parameters without a leading `'/'` are interpreted as relative to\n * the current directory.  Supports `'../'` syntax.\n */\nexport\nclass FileBrowserModel implements IDisposable {\n  /**\n   * Construct a new file browser model.\n   */\n  constructor(options: FileBrowserModel.IOptions) {\n    this.manager = options.manager;\n    this._driveName = options.driveName || '';\n    let rootPath = this._driveName ? this._driveName + ':' : '';\n    this._model = {\n      path: rootPath,\n      name: PathExt.basename(rootPath),\n      type: 'directory',\n      content: undefined,\n      writable: false,\n      created: 'unknown',\n      last_modified: 'unknown',\n      mimetype: 'text/plain',\n      format: 'text'\n    };\n    this._state = options.state || null;\n\n    const { services } = options.manager;\n    services.contents.fileChanged.connect(this._onFileChanged, this);\n    services.sessions.runningChanged.connect(this._onRunningChanged, this);\n\n    this._scheduleUpdate();\n    this._startTimer();\n  }\n\n  /**\n   * The document manager instance used by the file browser model.\n   */\n  readonly manager: IDocumentManager;\n\n  /**\n   * A signal emitted when the file browser model loses connection.\n   */\n  get connectionFailure(): ISignal<this, Error> {\n    return this._connectionFailure;\n  }\n\n  /**\n   * A promise that resolves when the model is first restored.\n   */\n  get restored(): Promise<void> {\n    return this._restored.promise;\n  }\n\n  /**\n   * Get the file path changed signal.\n   */\n  get fileChanged(): ISignal<this, Contents.IChangedArgs> {\n    return this._fileChanged;\n  }\n\n  /**\n   * Get the current path.\n   */\n  get path(): string {\n    return this._model ? this._model.path : '';\n  }\n\n  /**\n   * A signal emitted when the path changes.\n   */\n  get pathChanged(): ISignal<this, IChangedArgs<string>> {\n    return this._pathChanged;\n  }\n\n  /**\n   * A signal emitted when the directory listing is refreshed.\n   */\n  get refreshed(): ISignal<this, void> {\n    return this._refreshed;\n  }\n\n  /**\n   * Get the kernel spec models.\n   */\n  get specs(): Kernel.ISpecModels | null {\n    return this.manager.services.sessions.specs;\n  }\n\n  /**\n   * Get whether the model is disposed.\n   */\n  get isDisposed(): boolean {\n    return this._isDisposed;\n  }\n\n  /**\n   * Dispose of the resources held by the model.\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    this._isDisposed = true;\n    clearTimeout(this._timeoutId);\n    this._sessions.length = 0;\n    this._items.length = 0;\n    Signal.clearData(this);\n  }\n\n  /**\n   * Create an iterator over the model's items.\n   *\n   * @returns A new iterator over the model's items.\n   */\n  items(): IIterator<Contents.IModel> {\n    return new ArrayIterator(this._items);\n  }\n\n  /**\n   * Create an iterator over the active sessions in the directory.\n   *\n   * @returns A new iterator over the model's active sessions.\n   */\n  sessions(): IIterator<Session.IModel> {\n    return new ArrayIterator(this._sessions);\n  }\n\n  /**\n   * Force a refresh of the directory contents.\n   */\n  refresh(): Promise<void> {\n    this._lastRefresh = new Date().getTime();\n    this._requested = false;\n    return this.cd('.');\n  }\n\n  /**\n   * Change directory.\n   *\n   * @param path - The path to the file or directory.\n   *\n   * @returns A promise with the contents of the directory.\n   */\n  cd(newValue = '.'): Promise<void> {\n    if (newValue !== '.') {\n      newValue = Private.normalizePath(this.manager.services.contents,\n                                       this._model.path, newValue);\n    } else {\n      newValue = this._pendingPath || this._model.path;\n    }\n    // Collapse requests to the same directory.\n    if (newValue === this._pendingPath && this._pending) {\n      return this._pending;\n    }\n    let oldValue = this.path;\n    let options: Contents.IFetchOptions = { content: true };\n    this._pendingPath = newValue;\n    if (oldValue !== newValue) {\n      this._sessions.length = 0;\n    }\n    let services = this.manager.services;\n    this._pending = services.contents.get(newValue, options).then(contents => {\n      if (this.isDisposed) {\n        return;\n      }\n      this._refreshDuration = REFRESH_DURATION;\n      this._handleContents(contents);\n      this._pendingPath = null;\n      if (oldValue !== newValue) {\n        // If there is a state database and a unique key, save the new path.\n        if (this._state && this._key) {\n          this._state.save(this._key, { path: newValue });\n        }\n\n        this._pathChanged.emit({\n          name: 'path',\n          oldValue,\n          newValue\n        });\n      }\n      this._onRunningChanged(services.sessions, services.sessions.running());\n      this._refreshed.emit(void 0);\n    }).catch(error => {\n      this._pendingPath = null;\n      if (error.message === 'Not Found') {\n        error.message = `Directory not found: \"${this._model.path}\"`;\n        console.error(error);\n        this._connectionFailure.emit(error);\n        this.cd('/');\n      } else {\n        this._refreshDuration = REFRESH_DURATION * 10;\n        this._connectionFailure.emit(error);\n      }\n    });\n    return this._pending;\n  }\n\n  /**\n   * Download a file.\n   *\n   * @param path - The path of the file to be downloaded.\n   *\n   * @returns A promise which resolves when the file has begun\n   *   downloading.\n   */\n  download(path: string): Promise<void> {\n    return this.manager.services.contents.getDownloadUrl(path).then(url => {\n      let element = document.createElement('a');\n      document.body.appendChild(element);\n      element.setAttribute('href', url);\n      element.setAttribute('download', '');\n      element.click();\n      document.body.removeChild(element);\n      return void 0;\n    });\n  }\n\n  /**\n   * Restore the state of the file browser.\n   *\n   * @param id - The unique ID that is used to construct a state database key.\n   *\n   * @returns A promise when restoration is complete.\n   *\n   * #### Notes\n   * This function will only restore the model *once*. If it is called multiple\n   * times, all subsequent invocations are no-ops.\n   */\n  restore(id: string): Promise<void> {\n    const state = this._state;\n    const restored = !!this._key;\n    if (!state || restored) {\n      return Promise.resolve(void 0);\n    }\n\n    const manager = this.manager;\n    const key = `file-browser-${id}:cwd`;\n    const ready = manager.services.ready;\n    return Promise.all([state.fetch(key), ready]).then(([cwd]) => {\n      if (!cwd) {\n        this._restored.resolve(void 0);\n        return;\n      }\n\n      const path = (cwd as ReadonlyJSONObject)['path'] as string;\n      const localPath = manager.services.contents.localPath(path);\n      return manager.services.contents.get(path)\n        .then(() => this.cd(localPath))\n        .catch(() => state.remove(key));\n    }).catch(() => state.remove(key))\n      .then(() => {\n        this._key = key;\n        this._restored.resolve(void 0);\n      }); // Set key after restoration is done.\n  }\n\n  /**\n   * Upload a `File` object.\n   *\n   * @param file - The `File` object to upload.\n   *\n   * @returns A promise containing the new file contents model.\n   *\n   * #### Notes\n   * This will fail to upload files that are too big to be sent in one\n   * request to the server.\n   */\n  upload(file: File): Promise<Contents.IModel> {\n    // Skip large files with a warning.\n    if (file.size > this._maxUploadSizeMb * 1024 * 1024) {\n      let msg = `Cannot upload file (>${this._maxUploadSizeMb} MB) `;\n      msg += `\"${file.name}\"`;\n      console.warn(msg);\n      return Promise.reject<Contents.IModel>(new Error(msg));\n    }\n\n    return this.refresh().then(() => {\n      if (this.isDisposed) {\n        return Promise.resolve(false);\n      }\n      let item = find(this._items, i => i.name === file.name);\n      if (item) {\n        return shouldOverwrite(file.name);\n      }\n      return Promise.resolve(true);\n    }).then(value => {\n      if (value) {\n        return this._upload(file);\n      }\n      return Promise.reject('File not uploaded');\n    });\n  }\n\n  /**\n   * Perform the actual upload.\n   */\n  private _upload(file: File): Promise<Contents.IModel> {\n    // Gather the file model parameters.\n    let path = this._model.path;\n    path = path ? path + '/' + file.name : file.name;\n    let name = file.name;\n    let isNotebook = file.name.indexOf('.ipynb') !== -1;\n    let type: Contents.ContentType = isNotebook ? 'notebook' : 'file';\n    let format: Contents.FileFormat = isNotebook ? 'json' : 'base64';\n\n    // Get the file content.\n    let reader = new FileReader();\n    if (isNotebook) {\n      reader.readAsText(file);\n    } else {\n      reader.readAsArrayBuffer(file);\n    }\n\n    return new Promise<Contents.IModel>((resolve, reject) => {\n      reader.onload = (event: Event) => {\n        let model: Partial<Contents.IModel> = {\n          type: type,\n          format,\n          name,\n          content: Private.getContent(reader)\n        };\n\n        this.manager.services.contents.save(path, model).then(contents => {\n          resolve(contents);\n        }).catch(reject);\n      };\n\n      reader.onerror = (event: Event) => {\n        reject(Error(`Failed to upload \"${file.name}\":` + event));\n      };\n    });\n\n  }\n\n  /**\n   * Handle an updated contents model.\n   */\n  private _handleContents(contents: Contents.IModel): void {\n    // Update our internal data.\n    this._model = {\n      name: contents.name,\n      path: contents.path,\n      type: contents.type,\n      content: undefined,\n      writable: contents.writable,\n      created: contents.created,\n      last_modified: contents.last_modified,\n      mimetype: contents.mimetype,\n      format: contents.format\n    };\n    this._items = contents.content;\n    this._paths.clear();\n    contents.content.forEach((model: Contents.IModel) => {\n      this._paths.add(model.path);\n    });\n  }\n\n  /**\n   * Handle a change to the running sessions.\n   */\n  private _onRunningChanged(sender: Session.IManager, models: IterableOrArrayLike<Session.IModel>): void {\n    this._sessions.length = 0;\n    each(models, model => {\n      if (this._paths.has(model.path)) {\n        this._sessions.push(model);\n      }\n    });\n    this._refreshed.emit(void 0);\n  }\n\n  /**\n   * Handle a change on the contents manager.\n   */\n  private _onFileChanged(sender: Contents.IManager, change: Contents.IChangedArgs): void {\n    let path = this._model.path;\n    let value = change.oldValue;\n    if (value && value.path && PathExt.dirname(value.path) === path) {\n      this._fileChanged.emit(change);\n      this._scheduleUpdate();\n      return;\n    }\n    value = change.newValue;\n    if (value && value.path && PathExt.dirname(value.path) === path) {\n      this._fileChanged.emit(change);\n      this._scheduleUpdate();\n      return;\n    }\n  }\n\n  /**\n   * Start the internal refresh timer.\n   */\n  private _startTimer(): void {\n    this._timeoutId = window.setInterval(() => {\n      if (this._requested) {\n        this.refresh();\n        return;\n      }\n      let date = new Date().getTime();\n      if ((date - this._lastRefresh) > this._refreshDuration) {\n        this.refresh();\n      }\n    }, MIN_REFRESH);\n  }\n\n  /**\n   * Handle internal model refresh logic.\n   */\n  private _scheduleUpdate(): void {\n    let date = new Date().getTime();\n    if ((date - this._lastRefresh) > MIN_REFRESH) {\n      this.refresh();\n    } else {\n      this._requested = true;\n    }\n  }\n\n  private _connectionFailure = new Signal<this, Error>(this);\n  private _fileChanged = new Signal<this, Contents.IChangedArgs>(this);\n  private _items: Contents.IModel[] = [];\n  private _key: string = '';\n  private _maxUploadSizeMb = 15;\n  private _model: Contents.IModel;\n  private _pathChanged = new Signal<this, IChangedArgs<string>>(this);\n  private _paths = new Set<string>();\n  private _pending: Promise<void> | null = null;\n  private _pendingPath: string | null = null;\n  private _refreshed = new Signal<this, void>(this);\n  private _lastRefresh = -1;\n  private _requested = false;\n  private _sessions: Session.IModel[] = [];\n  private _state: IStateDB | null = null;\n  private _timeoutId = -1;\n  private _refreshDuration = REFRESH_DURATION;\n  private _driveName: string;\n  private _isDisposed = false;\n  private _restored = new PromiseDelegate<void>();\n}\n\n\n/**\n * The namespace for the `FileBrowserModel` class statics.\n */\nexport\nnamespace FileBrowserModel {\n  /**\n   * An options object for initializing a file browser.\n   */\n  export\n  interface IOptions {\n    /**\n     * A document manager instance.\n     */\n    manager: IDocumentManager;\n\n    /**\n     * An optional `Contents.IDrive` name for the model.\n     * If given, the model will prepend `driveName:` to\n     * all paths used in file operations.\n     */\n    driveName?: string;\n\n    /**\n     * An optional state database. If provided, the model will restore which\n     * folder was last opened when it is restored.\n     */\n    state?: IStateDB;\n  }\n}\n\n\n/**\n * The namespace for the file browser model private data.\n */\nnamespace Private {\n  /**\n   * Parse the content of a `FileReader`.\n   *\n   * If the result is an `ArrayBuffer`, return a Base64-encoded string.\n   * Otherwise, return the JSON parsed result.\n   */\n  export\n  function getContent(reader: FileReader): any {\n    if (reader.result instanceof ArrayBuffer) {\n      // Base64-encode binary file data.\n      let bytes = '';\n      let buf = new Uint8Array(reader.result);\n      let nbytes = buf.byteLength;\n      for (let i = 0; i < nbytes; i++) {\n        bytes += String.fromCharCode(buf[i]);\n      }\n      return btoa(bytes);\n    } else {\n      return JSON.parse(reader.result);\n    }\n  }\n\n  /**\n   * Normalize a path based on a root directory, accounting for relative paths.\n   */\n  export\n  function normalizePath(contents: Contents.IManager, root: string, path: string): string {\n    const driveName = contents.driveName(root);\n    const localPath = contents.localPath(root);\n    const resolved = PathExt.resolve(localPath, path);\n    return driveName ? `${driveName}:${resolved}` : resolved;\n  }\n}\n"]}