{"version":3,"file":"upload.js","sourceRoot":"","sources":["../../../../filebrowser/src/upload.ts"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,2DAA2D;;;;;;;;;;;;AAE3D,iDAE8B;AAO9B;;GAEG;AACH,IAAM,aAAa,GAAG,8BAA8B,CAAC;AAErD;;GAEG;AACH,IAAM,UAAU,GAAG,2BAA2B,CAAC;AAE/C;;GAEG;AACH,IAAM,eAAe,GAAG,eAAe,CAAC;AAExC;;GAEG;AACH,IAAM,cAAc,GAAG,iBAAiB,CAAC;AAEzC;;GAEG;AACH,IAAM,YAAY,GAAG,cAAc,CAAC;AAGpC;;GAEG;AACH;IACuB,4BAAa;IAClC;;OAEG;IACH,kBAAY,OAA0B;QAAtC,YACE,kBAAM;YACJ,SAAS,EAAE,YAAY;YACvB,OAAO,EAAE;gBACP,KAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;YACtB,CAAC;YACD,OAAO,EAAE,cAAc;SACxB,CAAC,SAUH;QAOD;;WAEG;QACK,qBAAe,GAAG;YACxB,IAAI,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,KAAI,CAAC,MAAM,CAAC,KAAK,CAAW,CAAC;YACpE,IAAI,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,KAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,EAAvB,CAAuB,CAAC,CAAC;YACzD,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,UAAA,KAAK;gBAC9B,2BAAgB,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;YAC1C,CAAC,CAAC,CAAC;QACL,CAAC,CAAA;QAED;;WAEG;QACK,qBAAe,GAAG;YACxB,gFAAgF;YAChF,8DAA8D;YAC9D,KAAI,CAAC,MAAM,CAAC,KAAK,GAAG,EAAE,CAAC;QACzB,CAAC,CAAA;QAEO,YAAM,GAAG,OAAO,CAAC,iBAAiB,EAAE,CAAC;QApC3C,IAAI,aAAa,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QACnD,IAAI,UAAU,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QAChD,aAAa,CAAC,SAAS,GAAG,aAAa,CAAC;QACxC,UAAU,CAAC,SAAS,GAAG,UAAU,GAAG,GAAG,GAAG,cAAc,GAAG,GAAG,GAAG,eAAe,CAAC;QACjF,aAAa,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;QACtC,KAAI,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;QACrC,KAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;QAC3B,KAAI,CAAC,MAAM,CAAC,OAAO,GAAG,KAAI,CAAC,eAAe,CAAC;QAC3C,KAAI,CAAC,MAAM,CAAC,QAAQ,GAAG,KAAI,CAAC,eAAe,CAAC;;IAC9C,CAAC;IA4BH,eAAC;AAAD,CAAC,AAlDD,CACuB,wBAAa,GAiDnC;AAjDK,4BAAQ;AAsEd;;GAEG;AACH,IAAU,OAAO,CAWhB;AAXD,WAAU,OAAO;IACf;;OAEG;IACH;QAEE,IAAI,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QAC5C,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC;QACpB,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC;QACtB,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IALQ,yBAAiB,oBAKzB,CAAA;AACH,CAAC,EAXS,OAAO,KAAP,OAAO,QAWhB","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  ToolbarButton, showErrorMessage\n} from '@jupyterlab/apputils';\n\nimport {\n  FileBrowserModel\n} from './model';\n\n\n/**\n * The class name added to a button content node.\n */\nconst CONTENT_CLASS = 'jp-FileButtons-buttonContent';\n\n/**\n * The class name added to a button icon node.\n */\nconst ICON_CLASS = 'jp-FileButtons-buttonIcon';\n\n/**\n * The class name added to the upload button.\n */\nconst MATERIAL_UPLOAD = 'jp-UploadIcon';\n\n/**\n * The class name added to a material icon button.\n */\nconst MATERIAL_CLASS = 'jp-MaterialIcon';\n\n/**\n * The class name added to the upload button.\n */\nconst UPLOAD_CLASS = 'jp-id-upload';\n\n\n/**\n * A widget which provides an upload button.\n */\nexport\nclass Uploader extends ToolbarButton {\n  /**\n   * Construct a new file browser buttons widget.\n   */\n  constructor(options: Uploader.IOptions) {\n    super({\n      className: UPLOAD_CLASS,\n      onClick: () => {\n        this._input.click();\n      },\n      tooltip: 'Upload Files'\n    });\n    let uploadContent = document.createElement('span');\n    let uploadIcon = document.createElement('span');\n    uploadContent.className = CONTENT_CLASS;\n    uploadIcon.className = ICON_CLASS + ' ' + MATERIAL_CLASS + ' ' + MATERIAL_UPLOAD;\n    uploadContent.appendChild(uploadIcon);\n    this.node.appendChild(uploadContent);\n    this.model = options.model;\n    this._input.onclick = this._onInputClicked;\n    this._input.onchange = this._onInputChanged;\n  }\n\n  /**\n   * The underlying file browser model for the widget.\n   */\n  readonly model: FileBrowserModel;\n\n  /**\n   * The 'change' handler for the input field.\n   */\n  private _onInputChanged = () => {\n    let files = Array.prototype.slice.call(this._input.files) as File[];\n    let pending = files.map(file => this.model.upload(file));\n    Promise.all(pending).catch(error => {\n      showErrorMessage('Upload Error', error);\n    });\n  }\n\n  /**\n   * The 'click' handler for the input field.\n   */\n  private _onInputClicked = () => {\n    // In order to allow repeated uploads of the same file (with delete in between),\n    // we need to clear the input value to trigger a change event.\n    this._input.value = '';\n  }\n\n  private _input = Private.createUploadInput();\n}\n\n\n/**\n * The namespace for Uploader class statics.\n */\nexport\nnamespace Uploader {\n  /**\n   * The options used to create an uploader.\n   */\n  export\n  interface IOptions {\n    /**\n     * A file browser model instance.\n     */\n    model: FileBrowserModel;\n  }\n}\n\n\n/**\n * The namespace for module private data.\n */\nnamespace Private {\n  /**\n   * Create the upload input node for a file buttons widget.\n   */\n  export\n  function createUploadInput(): HTMLInputElement {\n    let input = document.createElement('input');\n    input.type = 'file';\n    input.multiple = true;\n    return input;\n  }\n}\n"]}