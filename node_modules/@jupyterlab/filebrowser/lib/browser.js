"use strict";
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var apputils_1 = require("@jupyterlab/apputils");
var services_1 = require("@jupyterlab/services");
var widgets_1 = require("@phosphor/widgets");
var crumbs_1 = require("./crumbs");
var listing_1 = require("./listing");
var upload_1 = require("./upload");
/**
 * The class name added to file browsers.
 */
var FILE_BROWSER_CLASS = 'jp-FileBrowser';
/**
 * The class name added to the filebrowser crumbs node.
 */
var CRUMBS_CLASS = 'jp-FileBrowser-crumbs';
/**
 * The class name added to the filebrowser toolbar node.
 */
var TOOLBAR_CLASS = 'jp-FileBrowser-toolbar';
/**
 * The class name added to the filebrowser listing node.
 */
var LISTING_CLASS = 'jp-FileBrowser-listing';
/**
 * The class name added to the refresh button.
 */
var REFRESH_BUTTON = 'jp-RefreshIcon';
/**
 * The class name added to a material icon button.
 */
var MATERIAL_CLASS = 'jp-MaterialIcon';
/**
 * A widget which hosts a file browser.
 *
 * The widget uses the Jupyter Contents API to retreive contents,
 * and presents itself as a flat list of files and directories with
 * breadcrumbs.
 */
var FileBrowser = /** @class */ (function (_super) {
    __extends(FileBrowser, _super);
    /**
     * Construct a new file browser.
     *
     * @param model - The file browser view model.
     */
    function FileBrowser(options) {
        var _this = _super.call(this) || this;
        _this._showingError = false;
        _this.addClass(FILE_BROWSER_CLASS);
        _this.id = options.id;
        var model = _this.model = options.model;
        var renderer = options.renderer;
        model.connectionFailure.connect(_this._onConnectionFailure, _this);
        _this._manager = model.manager;
        _this._crumbs = new crumbs_1.BreadCrumbs({ model: model });
        _this.toolbar = new apputils_1.Toolbar();
        var directoryPending = false;
        var newFolder = new apputils_1.ToolbarButton({
            className: 'jp-newFolderIcon',
            onClick: function () {
                if (directoryPending === true) {
                    return;
                }
                directoryPending = true;
                _this._manager.newUntitled({
                    path: model.path,
                    type: 'directory'
                }).then(function (model) {
                    _this._listing.selectItemByName(model.name);
                    directoryPending = false;
                }).catch(function (err) {
                    directoryPending = false;
                });
            },
            tooltip: 'New Folder'
        });
        newFolder.addClass(MATERIAL_CLASS);
        var uploader = new upload_1.Uploader({ model: model });
        var refresher = new apputils_1.ToolbarButton({
            className: REFRESH_BUTTON,
            onClick: function () {
                model.refresh();
            },
            tooltip: 'Refresh File List'
        });
        refresher.addClass(MATERIAL_CLASS);
        _this.toolbar.addItem('newFolder', newFolder);
        _this.toolbar.addItem('upload', uploader);
        _this.toolbar.addItem('refresher', refresher);
        _this._listing = new listing_1.DirListing({ model: model, renderer: renderer });
        _this._crumbs.addClass(CRUMBS_CLASS);
        _this.toolbar.addClass(TOOLBAR_CLASS);
        _this._listing.addClass(LISTING_CLASS);
        var layout = new widgets_1.PanelLayout();
        layout.addWidget(_this.toolbar);
        layout.addWidget(_this._crumbs);
        layout.addWidget(_this._listing);
        _this.layout = layout;
        model.restore(_this.id);
        return _this;
    }
    /**
     * Create an iterator over the listing's selected items.
     *
     * @returns A new iterator over the listing's selected items.
     */
    FileBrowser.prototype.selectedItems = function () {
        return this._listing.selectedItems();
    };
    /**
     * Rename the first currently selected item.
     *
     * @returns A promise that resolves with the new name of the item.
     */
    FileBrowser.prototype.rename = function () {
        return this._listing.rename();
    };
    /**
     * Cut the selected items.
     */
    FileBrowser.prototype.cut = function () {
        this._listing.cut();
    };
    /**
     * Copy the selected items.
     */
    FileBrowser.prototype.copy = function () {
        this._listing.copy();
    };
    /**
     * Paste the items from the clipboard.
     *
     * @returns A promise that resolves when the operation is complete.
     */
    FileBrowser.prototype.paste = function () {
        return this._listing.paste();
    };
    /**
     * Delete the currently selected item(s).
     *
     * @returns A promise that resolves when the operation is complete.
     */
    FileBrowser.prototype.delete = function () {
        return this._listing.delete();
    };
    /**
     * Duplicate the currently selected item(s).
     *
     * @returns A promise that resolves when the operation is complete.
     */
    FileBrowser.prototype.duplicate = function () {
        return this._listing.duplicate();
    };
    /**
     * Download the currently selected item(s).
     */
    FileBrowser.prototype.download = function () {
        this._listing.download();
    };
    /**
     * Shut down kernels on the applicable currently selected items.
     *
     * @returns A promise that resolves when the operation is complete.
     */
    FileBrowser.prototype.shutdownKernels = function () {
        return this._listing.shutdownKernels();
    };
    /**
     * Select next item.
     */
    FileBrowser.prototype.selectNext = function () {
        this._listing.selectNext();
    };
    /**
     * Select previous item.
     */
    FileBrowser.prototype.selectPrevious = function () {
        this._listing.selectPrevious();
    };
    /**
     * Find a model given a click.
     *
     * @param event - The mouse event.
     *
     * @returns The model for the selected file.
     */
    FileBrowser.prototype.modelForClick = function (event) {
        return this._listing.modelForClick(event);
    };
    /**
     * Handle a connection lost signal from the model.
     */
    FileBrowser.prototype._onConnectionFailure = function (sender, args) {
        var _this = this;
        if (this._showingError) {
            return;
        }
        this._showingError = true;
        var title = 'Server Connection Error';
        var networkMsg = ('A connection to the Jupyter server could not be established.\n' +
            'JupyterLab will continue trying to reconnect.\n' +
            'Check your network connection or Jupyter server configuration.\n');
        // Check for a fetch error.
        if (args instanceof services_1.ServerConnection.NetworkError) {
            args.message = networkMsg;
        }
        else if (args instanceof services_1.ServerConnection.ResponseError) {
            if (args.response.status === 404) {
                title = 'Directory not found';
                args.message = "Directory not found: \"" + this.model.path + "\"";
            }
        }
        apputils_1.showErrorMessage(title, args).then(function () {
            _this._showingError = false;
        });
    };
    return FileBrowser;
}(widgets_1.Widget));
exports.FileBrowser = FileBrowser;
