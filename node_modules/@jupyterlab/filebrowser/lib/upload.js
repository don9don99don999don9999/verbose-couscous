"use strict";
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var apputils_1 = require("@jupyterlab/apputils");
/**
 * The class name added to a button content node.
 */
var CONTENT_CLASS = 'jp-FileButtons-buttonContent';
/**
 * The class name added to a button icon node.
 */
var ICON_CLASS = 'jp-FileButtons-buttonIcon';
/**
 * The class name added to the upload button.
 */
var MATERIAL_UPLOAD = 'jp-UploadIcon';
/**
 * The class name added to a material icon button.
 */
var MATERIAL_CLASS = 'jp-MaterialIcon';
/**
 * The class name added to the upload button.
 */
var UPLOAD_CLASS = 'jp-id-upload';
/**
 * A widget which provides an upload button.
 */
var Uploader = /** @class */ (function (_super) {
    __extends(Uploader, _super);
    /**
     * Construct a new file browser buttons widget.
     */
    function Uploader(options) {
        var _this = _super.call(this, {
            className: UPLOAD_CLASS,
            onClick: function () {
                _this._input.click();
            },
            tooltip: 'Upload Files'
        }) || this;
        /**
         * The 'change' handler for the input field.
         */
        _this._onInputChanged = function () {
            var files = Array.prototype.slice.call(_this._input.files);
            var pending = files.map(function (file) { return _this.model.upload(file); });
            Promise.all(pending).catch(function (error) {
                apputils_1.showErrorMessage('Upload Error', error);
            });
        };
        /**
         * The 'click' handler for the input field.
         */
        _this._onInputClicked = function () {
            // In order to allow repeated uploads of the same file (with delete in between),
            // we need to clear the input value to trigger a change event.
            _this._input.value = '';
        };
        _this._input = Private.createUploadInput();
        var uploadContent = document.createElement('span');
        var uploadIcon = document.createElement('span');
        uploadContent.className = CONTENT_CLASS;
        uploadIcon.className = ICON_CLASS + ' ' + MATERIAL_CLASS + ' ' + MATERIAL_UPLOAD;
        uploadContent.appendChild(uploadIcon);
        _this.node.appendChild(uploadContent);
        _this.model = options.model;
        _this._input.onclick = _this._onInputClicked;
        _this._input.onchange = _this._onInputChanged;
        return _this;
    }
    return Uploader;
}(apputils_1.ToolbarButton));
exports.Uploader = Uploader;
/**
 * The namespace for module private data.
 */
var Private;
(function (Private) {
    /**
     * Create the upload input node for a file buttons widget.
     */
    function createUploadInput() {
        var input = document.createElement('input');
        input.type = 'file';
        input.multiple = true;
        return input;
    }
    Private.createUploadInput = createUploadInput;
})(Private || (Private = {}));
