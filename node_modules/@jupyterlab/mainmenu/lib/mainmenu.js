"use strict";
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var algorithm_1 = require("@phosphor/algorithm");
var coreutils_1 = require("@phosphor/coreutils");
var widgets_1 = require("@phosphor/widgets");
var file_1 = require("./file");
var edit_1 = require("./edit");
var help_1 = require("./help");
var kernel_1 = require("./kernel");
var run_1 = require("./run");
var settings_1 = require("./settings");
var view_1 = require("./view");
var tabs_1 = require("./tabs");
/* tslint:disable */
/**
 * The main menu token.
 */
exports.IMainMenu = new coreutils_1.Token('@jupyterlab/apputils:IMainMenu');
/**
 * The main menu class.  It is intended to be used as a singleton.
 */
var MainMenu = /** @class */ (function (_super) {
    __extends(MainMenu, _super);
    /**
     * Construct the main menu bar.
     */
    function MainMenu(commands) {
        var _this = _super.call(this) || this;
        _this._items = [];
        _this.editMenu = new edit_1.EditMenu({ commands: commands });
        _this.fileMenu = new file_1.FileMenu({ commands: commands });
        _this.helpMenu = new help_1.HelpMenu({ commands: commands });
        _this.kernelMenu = new kernel_1.KernelMenu({ commands: commands });
        _this.runMenu = new run_1.RunMenu({ commands: commands });
        _this.settingsMenu = new settings_1.SettingsMenu({ commands: commands });
        _this.viewMenu = new view_1.ViewMenu({ commands: commands });
        _this.tabsMenu = new tabs_1.TabsMenu({ commands: commands });
        _this.addMenu(_this.fileMenu.menu, { rank: 0 });
        _this.addMenu(_this.editMenu.menu, { rank: 1 });
        _this.addMenu(_this.viewMenu.menu, { rank: 2 });
        _this.addMenu(_this.runMenu.menu, { rank: 3 });
        _this.addMenu(_this.kernelMenu.menu, { rank: 4 });
        _this.addMenu(_this.tabsMenu.menu, { rank: 500 });
        _this.addMenu(_this.settingsMenu.menu, { rank: 999 });
        _this.addMenu(_this.helpMenu.menu, { rank: 1000 });
        return _this;
    }
    /**
     * Add a new menu to the main menu bar.
     */
    MainMenu.prototype.addMenu = function (menu, options) {
        if (options === void 0) { options = {}; }
        if (algorithm_1.ArrayExt.firstIndexOf(this.menus, menu) > -1) {
            return;
        }
        var rank = 'rank' in options ? options.rank : 100;
        var rankItem = { menu: menu, rank: rank };
        var index = algorithm_1.ArrayExt.upperBound(this._items, rankItem, Private.itemCmp);
        // Upon disposal, remove the menu and its rank reference.
        menu.disposed.connect(this._onMenuDisposed, this);
        algorithm_1.ArrayExt.insert(this._items, index, rankItem);
        /**
         * Create a new menu.
         */
        this.insertMenu(index, menu);
    };
    /**
     * Dispose of the resources held by the menu bar.
     */
    MainMenu.prototype.dispose = function () {
        this.editMenu.dispose();
        this.fileMenu.dispose();
        this.helpMenu.dispose();
        this.kernelMenu.dispose();
        this.runMenu.dispose();
        this.settingsMenu.dispose();
        this.viewMenu.dispose();
        this.tabsMenu.dispose();
        _super.prototype.dispose.call(this);
    };
    /**
     * Handle the disposal of a menu.
     */
    MainMenu.prototype._onMenuDisposed = function (menu) {
        this.removeMenu(menu);
        var index = algorithm_1.ArrayExt.findFirstIndex(this._items, function (item) { return item.menu === menu; });
        if (index !== -1) {
            algorithm_1.ArrayExt.removeAt(this._items, index);
        }
    };
    return MainMenu;
}(widgets_1.MenuBar));
exports.MainMenu = MainMenu;
/**
 * A namespace for private data.
 */
var Private;
(function (Private) {
    /**
     * A comparator function for menu rank items.
     */
    function itemCmp(first, second) {
        return first.rank - second.rank;
    }
    Private.itemCmp = itemCmp;
})(Private || (Private = {}));
//# sourceMappingURL=mainmenu.js.map