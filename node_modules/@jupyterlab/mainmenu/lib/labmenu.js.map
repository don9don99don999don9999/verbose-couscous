{"version":3,"file":"labmenu.js","sourceRoot":"","sources":["../../../../mainmenu/src/labmenu.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  IInstanceTracker\n} from '@jupyterlab/apputils';\n\nimport {\n  ArrayExt\n} from '@phosphor/algorithm';\n\nimport {\n  IDisposable\n} from '@phosphor/disposable';\n\nimport {\n  Menu, Widget\n} from '@phosphor/widgets';\n\n\n/**\n * A common interface for extensible JupyterLab application menus.\n *\n * Plugins are still free to define their own menus in any way\n * they like. However, JupyterLab defines a few top-level\n * application menus that may be extended by plugins as well,\n * such as \"Edit\" and \"View\"\n */\nexport\ninterface IJupyterLabMenu extends IDisposable {\n  /**\n   * Add a group of menu items specific to a particular\n   * plugin.\n   */\n  addGroup(items: Menu.IItemOptions[], rank?: number): void;\n}\n\n/**\n * A base interface for a consumer of one of the menu\n * semantic extension points. The IMenuExtender gives\n * an instance tracker which is checked when the menu\n * is deciding which IMenuExtender to delegate to upon\n * selection of the menu item.\n */\nexport\ninterface IMenuExtender<T extends Widget> {\n  /**\n   * A widget tracker for identifying the appropriate extender.\n   */\n  tracker: IInstanceTracker<T>;\n\n  /**\n   * An additional function that determines whether the extender\n   * is enabled. By default it is considered enabled if the application\n   * active widget is contained in the `tracker`. If this is also\n   * provided, the critereon is equivalent to\n   * `tracker.has(widget) && extender.isEnabled(widget)`\n   */\n  isEnabled?: (widget: T) => boolean;\n}\n\n/**\n * An extensible menu for JupyterLab application menus.\n */\nexport\nclass JupyterLabMenu implements IJupyterLabMenu {\n  /**\n   * Construct a new menu.\n   *\n   * @param options - Options for the phosphor menu.\n   *\n   * @param includeSeparators - whether to include separators between the\n   *   groups that are added to the menu.\n   */\n  constructor(options: Menu.IOptions, includeSeparators: boolean = true) {\n    this.menu = new Menu(options);\n    this._includeSeparators = includeSeparators;\n  }\n\n  /**\n   * Add a group of menu items specific to a particular\n   * plugin.\n   *\n   * @param items - the list of menu items to add.\n   *\n   * @param rank - the rank in the menu in which to insert the group.\n   */\n  addGroup(items: Menu.IItemOptions[], rank?: number): void {\n    const rankGroup = { items, rank: rank === undefined ? 100 : rank };\n\n    // Insert the plugin group into the list of groups.\n    const groupIndex = ArrayExt.upperBound(this._groups, rankGroup, Private.itemCmp);\n\n    // Determine the index of the menu at which to insert the group.\n    let insertIndex = 0;\n    for (let i = 0; i < groupIndex; ++i) {\n      if (this._groups[i].items.length > 0) {\n        insertIndex += this._groups[i].items.length;\n        // Increase the insert index by two extra in order\n        // to include the leading and trailing separators.\n        insertIndex += this._includeSeparators ? 2 : 0;\n      }\n    }\n\n    // Insert a separator before the group.\n    // Phosphor takes care of superfluous leading,\n    // trailing, and duplicate separators.\n    if (this._includeSeparators) {\n      this.menu.insertItem(insertIndex++, { type: 'separator' });\n    }\n    // Insert the group.\n    for (let item of items) {\n      this.menu.insertItem(insertIndex++, item);\n    }\n    // Insert a separator after the group.\n    if (this._includeSeparators) {\n      this.menu.insertItem(insertIndex++, { type: 'separator' });\n    }\n\n    ArrayExt.insert(this._groups, groupIndex, rankGroup);\n  }\n\n  /**\n   * Remove a group of menu items. These items should have been\n   * previously added.\n   *\n   * @param items - the previously added group to remove.\n   */\n  removeGroup(items: Menu.IItemOptions[]): void {\n    // Get the index within the current groups.\n    const index = ArrayExt.findFirstIndex(this._groups,\n      (rankGroup) => rankGroup.items === items);\n    if (index === -1) { return; }\n\n    // Determine the index within the menu for removal.\n    let removeIndex = 0;\n    for (let i = 0; i < index; ++i) {\n      if (this._groups[i].items.length > 0) {\n        removeIndex += this._groups[i].items.length;\n        // Increase the insert index by two extra in order\n        // to include the leading and trailing separators.\n        removeIndex += this._includeSeparators ? 2 : 0;\n      }\n    }\n\n    // Do the removal\n    if (this._includeSeparators) {\n      this.menu.removeItemAt(removeIndex); // Leading separator.\n    }\n    for (let i = 0; i < items.length; ++i) {\n      this.menu.removeItemAt(removeIndex);\n    }\n    if (this._includeSeparators) {\n      this.menu.removeItemAt(removeIndex); // Trailing separator.\n    }\n\n    // Insert a separator before the group.\n    this._groups.splice(index);\n  }\n\n\n\n  /**\n   * The underlying Phosphor menu.\n   */\n  readonly menu: Menu;\n\n  /**\n   * Whether the menu has been disposed.\n   */\n  get isDisposed(): boolean {\n    return this._isDisposed;\n  }\n\n  /**\n   * Dispose of the resources held by the menu.\n   */\n  dispose(): void {\n    this._groups.length = 0;\n    this._isDisposed = true;\n    this.menu.dispose();\n  }\n\n  private _groups: Private.IRankGroup[] = [];\n  private _isDisposed = false;\n  private _includeSeparators: boolean;\n}\n\n\n/**\n * A namespace for private data.\n */\nnamespace Private {\n  /**\n   * An object which holds a menu and its sort rank.\n   */\n  export\n  interface IRankGroup {\n    /**\n     * A menu grouping.\n     */\n    items: Menu.IItemOptions[];\n\n    /**\n     * The sort rank of the group.\n     */\n    rank: number;\n  }\n\n  /**\n   * A comparator function for menu rank items.\n   */\n  export\n  function itemCmp(first: IRankGroup, second: IRankGroup): number {\n    return first.rank - second.rank;\n  }\n}\n"]}