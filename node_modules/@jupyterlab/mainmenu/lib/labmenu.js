"use strict";
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
Object.defineProperty(exports, "__esModule", { value: true });
var algorithm_1 = require("@phosphor/algorithm");
var widgets_1 = require("@phosphor/widgets");
/**
 * An extensible menu for JupyterLab application menus.
 */
var JupyterLabMenu = /** @class */ (function () {
    /**
     * Construct a new menu.
     *
     * @param options - Options for the phosphor menu.
     *
     * @param includeSeparators - whether to include separators between the
     *   groups that are added to the menu.
     */
    function JupyterLabMenu(options, includeSeparators) {
        if (includeSeparators === void 0) { includeSeparators = true; }
        this._groups = [];
        this._isDisposed = false;
        this.menu = new widgets_1.Menu(options);
        this._includeSeparators = includeSeparators;
    }
    /**
     * Add a group of menu items specific to a particular
     * plugin.
     *
     * @param items - the list of menu items to add.
     *
     * @param rank - the rank in the menu in which to insert the group.
     */
    JupyterLabMenu.prototype.addGroup = function (items, rank) {
        var rankGroup = { items: items, rank: rank === undefined ? 100 : rank };
        // Insert the plugin group into the list of groups.
        var groupIndex = algorithm_1.ArrayExt.upperBound(this._groups, rankGroup, Private.itemCmp);
        // Determine the index of the menu at which to insert the group.
        var insertIndex = 0;
        for (var i = 0; i < groupIndex; ++i) {
            if (this._groups[i].items.length > 0) {
                insertIndex += this._groups[i].items.length;
                // Increase the insert index by two extra in order
                // to include the leading and trailing separators.
                insertIndex += this._includeSeparators ? 2 : 0;
            }
        }
        // Insert a separator before the group.
        // Phosphor takes care of superfluous leading,
        // trailing, and duplicate separators.
        if (this._includeSeparators) {
            this.menu.insertItem(insertIndex++, { type: 'separator' });
        }
        // Insert the group.
        for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
            var item = items_1[_i];
            this.menu.insertItem(insertIndex++, item);
        }
        // Insert a separator after the group.
        if (this._includeSeparators) {
            this.menu.insertItem(insertIndex++, { type: 'separator' });
        }
        algorithm_1.ArrayExt.insert(this._groups, groupIndex, rankGroup);
    };
    /**
     * Remove a group of menu items. These items should have been
     * previously added.
     *
     * @param items - the previously added group to remove.
     */
    JupyterLabMenu.prototype.removeGroup = function (items) {
        // Get the index within the current groups.
        var index = algorithm_1.ArrayExt.findFirstIndex(this._groups, function (rankGroup) { return rankGroup.items === items; });
        if (index === -1) {
            return;
        }
        // Determine the index within the menu for removal.
        var removeIndex = 0;
        for (var i = 0; i < index; ++i) {
            if (this._groups[i].items.length > 0) {
                removeIndex += this._groups[i].items.length;
                // Increase the insert index by two extra in order
                // to include the leading and trailing separators.
                removeIndex += this._includeSeparators ? 2 : 0;
            }
        }
        // Do the removal
        if (this._includeSeparators) {
            this.menu.removeItemAt(removeIndex); // Leading separator.
        }
        for (var i = 0; i < items.length; ++i) {
            this.menu.removeItemAt(removeIndex);
        }
        if (this._includeSeparators) {
            this.menu.removeItemAt(removeIndex); // Trailing separator.
        }
        // Insert a separator before the group.
        this._groups.splice(index);
    };
    Object.defineProperty(JupyterLabMenu.prototype, "isDisposed", {
        /**
         * Whether the menu has been disposed.
         */
        get: function () {
            return this._isDisposed;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Dispose of the resources held by the menu.
     */
    JupyterLabMenu.prototype.dispose = function () {
        this._groups.length = 0;
        this._isDisposed = true;
        this.menu.dispose();
    };
    return JupyterLabMenu;
}());
exports.JupyterLabMenu = JupyterLabMenu;
/**
 * A namespace for private data.
 */
var Private;
(function (Private) {
    /**
     * A comparator function for menu rank items.
     */
    function itemCmp(first, second) {
        return first.rank - second.rank;
    }
    Private.itemCmp = itemCmp;
})(Private || (Private = {}));
//# sourceMappingURL=labmenu.js.map