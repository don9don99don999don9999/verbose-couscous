{"version":3,"file":"mode.js","sourceRoot":"","sources":["../../../../codemirror/src/mode.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  IEditorMimeTypeService\n} from '@jupyterlab/codeeditor';\n\nimport * as CodeMirror\n  from 'codemirror';\n\nimport 'codemirror/mode/meta';\nimport 'codemirror/addon/runmode/runmode';\n\nimport './codemirror-ipython';\nimport './codemirror-ipythongfm';\n\n// Bundle other common modes\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/mode/css/css';\nimport 'codemirror/mode/julia/julia';\nimport 'codemirror/mode/r/r';\nimport 'codemirror/mode/markdown/markdown';\nimport 'codemirror/mode/clike/clike';\nimport 'codemirror/mode/shell/shell';\nimport 'codemirror/mode/sql/sql';\n\nimport {\n  PathExt\n} from '@jupyterlab/coreutils';\n\n// Stub for the require function.\ndeclare var require: any;\n\n\n/**\n * The namespace for CodeMirror Mode functionality.\n */\nexport\nnamespace Mode {\n  /**\n   * The interface of a codemirror mode spec.\n   */\n  export\n  interface ISpec {\n    ext?: string[];\n    name?: string;\n    mode: string;\n    mime: string;\n  }\n\n  /**\n   * Get the raw list of available modes specs.\n   */\n  export\n  function getModeInfo(): ISpec[] {\n    return CodeMirror.modeInfo;\n  }\n\n  /**\n   * Running a CodeMirror mode outside of an editor.\n   */\n  export\n  function run(code: string, mode: string | ISpec, el: HTMLElement): void {\n    CodeMirror.runMode(code, mode, el);\n  }\n\n  /**\n   * Ensure a codemirror mode is available by name or Codemirror spec.\n   *\n   * @param mode - The mode to ensure.  If it is a string, uses [findBest]\n   *   to get the appropriate spec.\n   *\n   * @returns A promise that resolves when the mode is available.\n   */\n  export\n  function ensure(mode: string | ISpec): Promise<ISpec> {\n    let spec = findBest(mode);\n\n    // Simplest, cheapest check by mode name.\n    if (CodeMirror.modes.hasOwnProperty(spec.mode)) {\n      return Promise.resolve(spec);\n    }\n\n    // Fetch the mode asynchronously.\n    return new Promise<ISpec>((resolve, reject) => {\n      require([`codemirror/mode/${spec.mode}/${spec.mode}.js`], () => {\n        resolve(spec);\n      });\n    });\n  }\n\n  /**\n   * Find a codemirror mode by name or CodeMirror spec.\n   */\n  export\n  function findBest(mode: string | ISpec): ISpec {\n    let modename = (typeof mode === 'string') ? mode :\n        mode.mode || mode.name;\n    let mimetype = (typeof mode !== 'string') ? mode.mime : modename;\n    let ext = (typeof mode !== 'string') ? mode.ext : [];\n\n    return (\n      CodeMirror.findModeByName(modename || '') ||\n      CodeMirror.findModeByMIME(mimetype || '') ||\n      findByExtension(ext) ||\n      CodeMirror.findModeByMIME(IEditorMimeTypeService.defaultMimeType) ||\n      CodeMirror.findModeByMIME('text/plain')\n    );\n  }\n\n  /**\n   * Find a codemirror mode by MIME.\n   */\n  export\n  function findByMIME(mime: string): ISpec {\n    return CodeMirror.findModeByMIME(mime);\n  }\n\n  /**\n   * Find a codemirror mode by name.\n   */\n  export\n  function findByName(name: string): ISpec {\n    return CodeMirror.findModeByName(name);\n  }\n\n  /**\n   * Find a codemirror mode by filename.\n   */\n  export\n  function findByFileName(name: string): ISpec {\n    let basename = PathExt.basename(name);\n    return CodeMirror.findModeByFileName(basename);\n  }\n\n  /**\n   * Find a codemirror mode by extension.\n   */\n  export\n  function findByExtension(ext: string | string[]): ISpec {\n    if (typeof ext === 'string') {\n      return CodeMirror.findModeByExtension(name);\n    }\n    for (let i = 0; i < ext.length; i++) {\n      let mode = CodeMirror.findModeByExtension(ext[i]);\n      if (mode) {\n        return mode;\n      }\n    }\n  }\n}\n"]}