{"version":3,"file":"editor.js","sourceRoot":"","sources":["../../../../codemirror/src/editor.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport * as CodeMirror\n  from 'codemirror';\n\nimport {\n  JSONExt\n} from '@phosphor/coreutils';\n\nimport {\n  ArrayExt\n} from '@phosphor/algorithm';\n\nimport {\n  IDisposable, DisposableDelegate\n} from '@phosphor/disposable';\n\nimport {\n  Signal\n} from '@phosphor/signaling';\n\nimport {\n  showDialog\n} from '@jupyterlab/apputils';\n\nimport {\n  CodeEditor\n} from '@jupyterlab/codeeditor';\n\nimport {\n  uuid\n} from '@jupyterlab/coreutils';\n\nimport {\n  IObservableMap, IObservableString, ICollaborator\n} from '@jupyterlab/observables';\n\nimport {\n  Mode\n} from './mode';\n\nimport 'codemirror/addon/comment/comment.js';\nimport 'codemirror/addon/edit/matchbrackets.js';\nimport 'codemirror/addon/edit/closebrackets.js';\nimport 'codemirror/addon/scroll/scrollpastend.js';\nimport 'codemirror/addon/search/searchcursor';\nimport 'codemirror/addon/search/search';\nimport 'codemirror/keymap/emacs.js';\nimport 'codemirror/keymap/sublime.js';\nimport 'codemirror/keymap/vim.js';\n\n\n/**\n * The class name added to CodeMirrorWidget instances.\n */\nconst EDITOR_CLASS = 'jp-CodeMirrorEditor';\n\n/**\n * The class name added to read only cell editor widgets.\n */\nconst READ_ONLY_CLASS = 'jp-mod-readOnly';\n\n/**\n * The class name for the hover box for collaborator cursors.\n */\nconst COLLABORATOR_CURSOR_CLASS = 'jp-CollaboratorCursor';\n\n/**\n * The class name for the hover box for collaborator cursors.\n */\nconst COLLABORATOR_HOVER_CLASS = 'jp-CollaboratorCursor-hover';\n\n/**\n * The key code for the up arrow key.\n */\nconst UP_ARROW = 38;\n\n/**\n * The key code for the down arrow key.\n */\nconst DOWN_ARROW = 40;\n\n/**\n * The time that a collaborator name hover persists.\n */\nconst HOVER_TIMEOUT = 1000;\n\n\n/**\n * CodeMirror editor.\n */\nexport\nclass CodeMirrorEditor implements CodeEditor.IEditor {\n  /**\n   * Construct a CodeMirror editor.\n   */\n  constructor(options: CodeMirrorEditor.IOptions) {\n    let host = this.host = options.host;\n    host.classList.add(EDITOR_CLASS);\n    host.classList.add('jp-Editor');\n    host.addEventListener('focus', this, true);\n    host.addEventListener('blur', this, true);\n    host.addEventListener('scroll', this, true);\n\n    this._uuid = options.uuid || uuid();\n\n    // Handle selection style.\n    let style = options.selectionStyle || {};\n    this._selectionStyle = {\n        ...CodeEditor.defaultSelectionStyle,\n        ...style as CodeEditor.ISelectionStyle\n    };\n\n    let model = this._model = options.model;\n    let editor = this._editor = CodeMirror(host, {});\n    Private.handleConfig(editor, options.config || {});\n\n    let doc = editor.getDoc();\n\n    // Handle initial values for text, mimetype, and selections.\n    doc.setValue(model.value.text);\n    this._onMimeTypeChanged();\n    this._onCursorActivity();\n    this._timer = window.setInterval(() => { this._checkSync(); }, 3000);\n\n    // Connect to changes.\n    model.value.changed.connect(this._onValueChanged, this);\n    model.mimeTypeChanged.connect(this._onMimeTypeChanged, this);\n    model.selections.changed.connect(this._onSelectionsChanged, this);\n\n    CodeMirror.on(editor, 'keydown', (editor, event) => {\n      let index = ArrayExt.findFirstIndex(this._keydownHandlers, handler => {\n        if (handler(this, event) === true) {\n          event.preventDefault();\n          return true;\n        }\n        return false;\n      });\n      if (index === -1) {\n        this.onKeydown(event);\n      }\n    });\n    CodeMirror.on(editor, 'cursorActivity', () => this._onCursorActivity());\n    CodeMirror.on(editor.getDoc(), 'beforeChange', (instance, change) => {\n      this._beforeDocChanged(instance, change);\n    });\n    CodeMirror.on(editor.getDoc(), 'change', (instance, change) => {\n      // Manually refresh after setValue to make sure editor is properly sized.\n      if (change.origin === 'setValue' && this.hasFocus()) {\n        this.refresh();\n      }\n      this._lastChange = change;\n    });\n\n    // Manually refresh on paste to make sure editor is properly sized.\n    editor.getWrapperElement().addEventListener('paste', () => {\n      if (this.hasFocus()) {\n        this.refresh();\n      }\n    });\n  }\n\n  /**\n   * A signal emitted when either the top or bottom edge is requested.\n   */\n  readonly edgeRequested = new Signal<this, CodeEditor.EdgeLocation>(this);\n\n  /**\n   * The DOM node that hosts the editor.\n   */\n  readonly host: HTMLElement;\n\n  /**\n   * The uuid of this editor;\n   */\n  get uuid(): string {\n    return this._uuid;\n  }\n  set uuid(value: string) {\n    this._uuid = value;\n  }\n\n  /**\n   * The selection style of this editor.\n   */\n  get selectionStyle(): CodeEditor.ISelectionStyle {\n    return this._selectionStyle;\n  }\n  set selectionStyle(value: CodeEditor.ISelectionStyle) {\n    this._selectionStyle = value;\n  }\n\n  /**\n   * Get the codemirror editor wrapped by the editor.\n   */\n  get editor(): CodeMirror.Editor {\n    return this._editor;\n  }\n\n  /**\n   * Get the codemirror doc wrapped by the widget.\n   */\n  get doc(): CodeMirror.Doc {\n    return this._editor.getDoc();\n  }\n\n  /**\n   * Get the number of lines in the editor.\n   */\n  get lineCount(): number {\n    return this.doc.lineCount();\n  }\n\n  /**\n   * Returns a model for this editor.\n   */\n  get model(): CodeEditor.IModel {\n    return this._model;\n  }\n\n  /**\n   * The height of a line in the editor in pixels.\n   */\n  get lineHeight(): number {\n    return this._editor.defaultTextHeight();\n  }\n\n  /**\n   * The widget of a character in the editor in pixels.\n   */\n  get charWidth(): number {\n    return this._editor.defaultCharWidth();\n  }\n\n  /**\n   * Tests whether the editor is disposed.\n   */\n  get isDisposed(): boolean {\n    return this._isDisposed;\n  }\n\n  /**\n   * Dispose of the resources held by the widget.\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    this._isDisposed = true;\n    this.host.removeEventListener('focus', this, true);\n    this.host.removeEventListener('blur', this, true);\n    this.host.removeEventListener('scroll', this, true);\n    this._keydownHandlers.length = 0;\n    window.clearInterval(this._timer);\n    Signal.clearData(this);\n  }\n\n  /**\n   * Get a config option for the editor.\n   */\n  getOption<K extends keyof CodeMirrorEditor.IConfig>(option: K): CodeMirrorEditor.IConfig[K] {\n    return Private.getOption(this.editor, option);\n  }\n\n  /**\n   * Set a config option for the editor.\n   */\n  setOption<K extends keyof CodeMirrorEditor.IConfig>(option: K, value: CodeMirrorEditor.IConfig[K]): void {\n    Private.setOption(this.editor, option, value);\n  }\n\n  /**\n   * Returns the content for the given line number.\n   */\n  getLine(line: number): string | undefined {\n    return this.doc.getLine(line);\n  }\n\n  /**\n   * Find an offset for the given position.\n   */\n  getOffsetAt(position: CodeEditor.IPosition): number {\n    return this.doc.indexFromPos({\n      ch: position.column,\n      line: position.line\n    });\n  }\n\n  /**\n   * Find a position fot the given offset.\n   */\n  getPositionAt(offset: number): CodeEditor.IPosition {\n    const { ch, line } = this.doc.posFromIndex(offset);\n    return { line, column: ch };\n  }\n\n  /**\n   * Undo one edit (if any undo events are stored).\n   */\n  undo(): void {\n    this.doc.undo();\n  }\n\n  /**\n   * Redo one undone edit.\n   */\n  redo(): void {\n    this.doc.redo();\n  }\n\n  /**\n   * Clear the undo history.\n   */\n  clearHistory(): void {\n    this.doc.clearHistory();\n  }\n\n  /**\n   * Brings browser focus to this editor text.\n   */\n  focus(): void {\n    this._editor.focus();\n  }\n\n  /**\n   * Test whether the editor has keyboard focus.\n   */\n  hasFocus(): boolean {\n    return this._editor.getWrapperElement().contains(document.activeElement);\n  }\n\n  /**\n   * Explicitly blur the editor.\n   */\n  blur(): void {\n    this._editor.getInputField().blur();\n  }\n\n  /**\n   * Repaint editor.\n   */\n  refresh(): void {\n    this._editor.refresh();\n    this._needsRefresh = false;\n  }\n\n  /**\n   * Refresh the editor if it is focused;\n   * otherwise postpone refreshing till focusing.\n   */\n  resizeToFit(): void {\n    if (this.hasFocus()) {\n      this.refresh();\n    } else {\n      this._needsRefresh = true;\n    }\n    this._clearHover();\n  }\n\n  /**\n   * Add a keydown handler to the editor.\n   *\n   * @param handler - A keydown handler.\n   *\n   * @returns A disposable that can be used to remove the handler.\n   */\n  addKeydownHandler(handler: CodeEditor.KeydownHandler): IDisposable {\n    this._keydownHandlers.push(handler);\n    return new DisposableDelegate(() => {\n      ArrayExt.removeAllWhere(this._keydownHandlers, val => val === handler);\n    });\n  }\n\n  /**\n   * Set the size of the editor in pixels.\n   */\n  setSize(dimension: CodeEditor.IDimension | null): void {\n    if (dimension) {\n      this._editor.setSize(dimension.width, dimension.height);\n    } else {\n      this._editor.setSize(null, null);\n    }\n    this._needsRefresh = false;\n  }\n\n  /**\n   * Reveal the given position in the editor.\n   */\n  revealPosition(position: CodeEditor.IPosition): void {\n    const cmPosition = this._toCodeMirrorPosition(position);\n    this._editor.scrollIntoView(cmPosition);\n  }\n\n  /**\n   * Reveal the given selection in the editor.\n   */\n  revealSelection(selection: CodeEditor.IRange): void {\n    const range = this._toCodeMirrorRange(selection);\n    this._editor.scrollIntoView(range);\n  }\n\n  /**\n   * Get the window coordinates given a cursor position.\n   */\n  getCoordinateForPosition(position: CodeEditor.IPosition): CodeEditor.ICoordinate {\n    const pos = this._toCodeMirrorPosition(position);\n    const rect = this.editor.charCoords(pos, 'page');\n    return rect as CodeEditor.ICoordinate;\n  }\n\n  /**\n   * Get the cursor position given window coordinates.\n   *\n   * @param coordinate - The desired coordinate.\n   *\n   * @returns The position of the coordinates, or null if not\n   *   contained in the editor.\n   */\n  getPositionForCoordinate(coordinate: CodeEditor.ICoordinate): CodeEditor.IPosition | null {\n    return this._toPosition(this.editor.coordsChar(coordinate)) || null;\n  }\n\n  /**\n   * Returns the primary position of the cursor, never `null`.\n   */\n  getCursorPosition(): CodeEditor.IPosition {\n    const cursor = this.doc.getCursor();\n    return this._toPosition(cursor);\n  }\n\n  /**\n   * Set the primary position of the cursor.\n   *\n   * #### Notes\n   * This will remove any secondary cursors.\n   */\n  setCursorPosition(position: CodeEditor.IPosition): void {\n    const cursor = this._toCodeMirrorPosition(position);\n    this.doc.setCursor(cursor);\n    // If the editor does not have focus, this cursor change\n    // will get screened out in _onCursorsChanged(). Make an\n    // exception for this method.\n    if (!this.editor.hasFocus()) {\n      this.model.selections.set(this.uuid, this.getSelections());\n    }\n  }\n\n  /**\n   * Returns the primary selection, never `null`.\n   */\n  getSelection(): CodeEditor.ITextSelection {\n    return this.getSelections()[0];\n  }\n\n  /**\n   * Set the primary selection. This will remove any secondary cursors.\n   */\n  setSelection(selection: CodeEditor.IRange): void {\n    this.setSelections([selection]);\n  }\n\n  /**\n   * Gets the selections for all the cursors, never `null` or empty.\n   */\n  getSelections(): CodeEditor.ITextSelection[] {\n    const selections = this.doc.listSelections();\n    if (selections.length > 0) {\n      return selections.map(selection => this._toSelection(selection));\n    }\n    const cursor = this.doc.getCursor();\n    const selection = this._toSelection({ anchor: cursor, head: cursor });\n    return [selection];\n  }\n\n  /**\n   * Sets the selections for all the cursors, should not be empty.\n   * Cursors will be removed or added, as necessary.\n   * Passing an empty array resets a cursor position to the start of a document.\n   */\n  setSelections(selections: CodeEditor.IRange[]): void {\n    const cmSelections = this._toCodeMirrorSelections(selections);\n    this.doc.setSelections(cmSelections, 0);\n  }\n\n  /**\n   * Execute a codemirror command on the editor.\n   *\n   * @param command - The name of the command to execute.\n   */\n  execCommand(command: string): void {\n    this._editor.execCommand(command);\n  }\n\n  /**\n   * Handle keydown events from the editor.\n   */\n  protected onKeydown(event: KeyboardEvent): boolean {\n    let position = this.getCursorPosition();\n    let { line, column } = position;\n\n    if (line === 0 && column === 0 && event.keyCode === UP_ARROW) {\n      if (!event.shiftKey) {\n        this.edgeRequested.emit('top');\n      }\n      return false;\n    }\n\n    let lastLine = this.lineCount - 1;\n    let lastCh = this.getLine(lastLine)!.length;\n    if (line === lastLine && column === lastCh\n        && event.keyCode === DOWN_ARROW) {\n      if (!event.shiftKey) {\n        this.edgeRequested.emit('bottom');\n      }\n      return false;\n    }\n    return false;\n  }\n\n  /**\n   * Converts selections to code mirror selections.\n   */\n  private _toCodeMirrorSelections(selections: CodeEditor.IRange[]): CodeMirror.Selection[] {\n    if (selections.length > 0) {\n      return selections.map(selection => this._toCodeMirrorSelection(selection));\n    }\n    const position = { line: 0, ch: 0 };\n    return [{ anchor: position, head: position }];\n  }\n\n  /**\n   * Handles a mime type change.\n   */\n  private _onMimeTypeChanged(): void {\n    const mime = this._model.mimeType;\n    let editor = this._editor;\n    Mode.ensure(mime).then(spec => {\n      editor.setOption('mode', spec.mime);\n    });\n    let extraKeys = editor.getOption('extraKeys') || {};\n    const isCode = (mime !== 'text/plain') && (mime !== 'text/x-ipythongfm');\n    if (isCode) {\n      extraKeys['Backspace'] = 'delSpaceToPrevTabStop';\n    } else {\n      delete extraKeys['Backspace'];\n    }\n    editor.setOption('extraKeys', extraKeys);\n  }\n\n  /**\n   * Handles a selections change.\n   */\n  private _onSelectionsChanged(selections: IObservableMap<CodeEditor.ITextSelection[]>, args: IObservableMap.IChangedArgs<CodeEditor.ITextSelection[]>): void {\n    const uuid = args.key;\n    if (uuid !== this.uuid) {\n      this._cleanSelections(uuid);\n      if (args.type !== 'remove' && args.newValue) {\n        this._markSelections(uuid, args.newValue);\n      }\n    }\n  }\n\n  /**\n   * Clean selections for the given uuid.\n   */\n  private _cleanSelections(uuid: string) {\n    const markers = this.selectionMarkers[uuid];\n    if (markers) {\n      markers.forEach(marker => { marker.clear(); });\n    }\n    delete this.selectionMarkers[uuid];\n  }\n\n  /**\n   * Marks selections.\n   */\n  private _markSelections(uuid: string, selections: CodeEditor.ITextSelection[]) {\n    const markers: CodeMirror.TextMarker[] = [];\n\n    // If we are marking selections corresponding to an active hover,\n    // remove it.\n    if (uuid === this._hoverId) {\n      this._clearHover();\n    }\n    // If we can id the selection to a specific collaborator,\n    // use that information.\n    let collaborator: ICollaborator | undefined;\n    if (this._model.modelDB.collaborators) {\n      collaborator = this._model.modelDB.collaborators.get(uuid);\n    }\n\n    // Style each selection for the uuid.\n    selections.forEach(selection => {\n      // Only render selections if the start is not equal to the end.\n      // In that case, we don't need to render the cursor.\n      if (!JSONExt.deepEqual(selection.start, selection.end)) {\n        const { anchor, head } = this._toCodeMirrorSelection(selection);\n        let markerOptions: CodeMirror.TextMarkerOptions;\n        if (collaborator) {\n          markerOptions = this._toTextMarkerOptions({\n            ...selection.style,\n            color: collaborator.color\n          });\n        } else {\n          markerOptions = this._toTextMarkerOptions(selection.style);\n        }\n        markers.push(this.doc.markText(anchor, head, markerOptions));\n      } else if (collaborator) {\n        let caret = this._getCaret(collaborator);\n        markers.push(this.doc.setBookmark(\n          this._toCodeMirrorPosition(selection.end), {widget: caret}));\n      }\n    });\n    this.selectionMarkers[uuid] = markers;\n  }\n\n  /**\n   * Handles a cursor activity event.\n   */\n  private _onCursorActivity(): void {\n    // Only add selections if the editor has focus. This avoids unwanted\n    // triggering of cursor activity due to collaborator actions.\n    if (this._editor.hasFocus()) {\n      const selections = this.getSelections();\n      this.model.selections.set(this.uuid, selections);\n    }\n  }\n\n  /**\n   * Converts a code mirror selection to an editor selection.\n   */\n  private _toSelection(selection: CodeMirror.Selection): CodeEditor.ITextSelection {\n    return {\n      uuid: this.uuid,\n      start: this._toPosition(selection.anchor),\n      end: this._toPosition(selection.head),\n      style: this.selectionStyle\n    };\n  }\n\n  /**\n   * Converts the selection style to a text marker options.\n   */\n  private _toTextMarkerOptions(style: CodeEditor.ISelectionStyle): CodeMirror.TextMarkerOptions {\n    let r = parseInt(style.color.slice(1, 3), 16);\n    let g  = parseInt(style.color.slice(3, 5), 16);\n    let b  = parseInt(style.color.slice(5, 7), 16);\n    let css = `background-color: rgba( ${r}, ${g}, ${b}, 0.15)`;\n    return {\n      className: style.className,\n      title: style.displayName,\n      css\n    };\n  }\n\n  /**\n   * Converts an editor selection to a code mirror selection.\n   */\n  private _toCodeMirrorSelection(selection: CodeEditor.IRange): CodeMirror.Selection {\n    // Selections only appear to render correctly if the anchor\n    // is before the head in the document. That is, reverse selections\n    // do not appear as intended.\n    let forward: boolean = (selection.start.line < selection.end.line) ||\n                           (selection.start.line === selection.end.line &&\n                            selection.start.column <= selection.end.column);\n    let anchor = forward ? selection.start : selection.end;\n    let head = forward ? selection.end : selection.start;\n    return {\n      anchor: this._toCodeMirrorPosition(anchor),\n      head: this._toCodeMirrorPosition(head)\n    };\n  }\n\n  /**\n   * Converts an editor selection to a code mirror selection.\n   */\n  private _toCodeMirrorRange(range: CodeEditor.IRange): CodeMirror.Range {\n    return {\n      from: this._toCodeMirrorPosition(range.start),\n      to: this._toCodeMirrorPosition(range.end)\n    };\n  }\n\n  /**\n   * Convert a code mirror position to an editor position.\n   */\n  private _toPosition(position: CodeMirror.Position) {\n    return {\n      line: position.line,\n      column: position.ch\n    };\n  }\n\n  /**\n   * Convert an editor position to a code mirror position.\n   */\n  private _toCodeMirrorPosition(position: CodeEditor.IPosition) {\n    return {\n      line: position.line,\n      ch: position.column\n    };\n  }\n\n  /**\n   * Handle model value changes.\n   */\n  private _onValueChanged(value: IObservableString, args: IObservableString.IChangedArgs): void {\n    if (this._changeGuard) {\n      return;\n    }\n    this._changeGuard = true;\n    let doc = this.doc;\n    switch (args.type) {\n     case 'insert':\n       let pos = doc.posFromIndex(args.start);\n       doc.replaceRange(args.value, pos, pos);\n       break;\n     case 'remove':\n       let from = doc.posFromIndex(args.start);\n       let to = doc.posFromIndex(args.end);\n       doc.replaceRange('', from, to);\n       break;\n     case 'set':\n       doc.setValue(args.value);\n       break;\n     default:\n       break;\n    }\n    this._changeGuard = false;\n  }\n\n  /**\n   * Handles document changes.\n   */\n  private _beforeDocChanged(doc: CodeMirror.Doc, change: CodeMirror.EditorChange) {\n    if (this._changeGuard) {\n      return;\n    }\n    this._changeGuard = true;\n    let value = this._model.value;\n    let start = doc.indexFromPos(change.from);\n    let end = doc.indexFromPos(change.to);\n    let inserted = change.text.join('\\n');\n\n    if (end !== start) {\n      value.remove(start, end);\n    }\n    if (inserted) {\n      value.insert(start, inserted);\n    }\n    this._changeGuard = false;\n  }\n\n  /**\n   * Handle the DOM events for the editor.\n   *\n   * @param event - The DOM event sent to the editor.\n   *\n   * #### Notes\n   * This method implements the DOM `EventListener` interface and is\n   * called in response to events on the editor's DOM node. It should\n   * not be called directly by user code.\n   */\n  handleEvent(event: Event): void {\n    switch (event.type) {\n    case 'focus':\n      this._evtFocus(event as FocusEvent);\n      break;\n    case 'blur':\n      this._evtBlur(event as FocusEvent);\n      break;\n    case 'scroll':\n      this._evtScroll();\n      break;\n    default:\n      break;\n    }\n  }\n\n  /**\n   * Handle `focus` events for the editor.\n   */\n  private _evtFocus(event: FocusEvent): void {\n    if (this._needsRefresh) {\n      this.refresh();\n    }\n    this.host.classList.add('jp-mod-focused');\n  }\n\n  /**\n   * Handle `blur` events for the editor.\n   */\n  private _evtBlur(event: FocusEvent): void {\n    this.host.classList.remove('jp-mod-focused');\n  }\n\n  /**\n   * Handle `scroll` events for the editor.\n   */\n  private _evtScroll(): void {\n    // Remove any active hover.\n    this._clearHover();\n  }\n\n  /**\n   * Clear the hover for a caret, due to things like\n   * scrolling, resizing, deactivation, etc, where\n   * the position is no longer valid.\n   */\n  private _clearHover(): void {\n    if (this._caretHover) {\n      window.clearTimeout(this._hoverTimeout);\n      document.body.removeChild(this._caretHover);\n      this._caretHover = null;\n    }\n  }\n\n  /**\n   * Construct a caret element representing the position\n   * of a collaborator's cursor.\n   */\n  private _getCaret(collaborator: ICollaborator): HTMLElement {\n    let name = collaborator ? collaborator.displayName : 'Anonymous';\n    let color = collaborator ? collaborator.color : this._selectionStyle.color;\n    let caret: HTMLElement = document.createElement('span');\n    caret.className = COLLABORATOR_CURSOR_CLASS;\n    caret.style.borderBottomColor = color;\n    caret.onmouseenter = () => {\n      this._clearHover();\n      this._hoverId = collaborator.sessionId;\n      let rect = caret.getBoundingClientRect();\n      // Construct and place the hover box.\n      let hover = document.createElement('div');\n      hover.className = COLLABORATOR_HOVER_CLASS;\n      hover.style.left = String(rect.left) + 'px';\n      hover.style.top = String(rect.bottom) + 'px';\n      hover.textContent = name;\n      hover.style.backgroundColor = color;\n\n      // If the user mouses over the hover, take over the timer.\n      hover.onmouseenter = () => {\n        window.clearTimeout(this._hoverTimeout);\n      };\n      hover.onmouseleave = () => {\n        this._hoverTimeout = window.setTimeout(() => {\n          this._clearHover();\n        }, HOVER_TIMEOUT);\n      };\n      this._caretHover = hover;\n      document.body.appendChild(hover);\n    };\n    caret.onmouseleave = () => {\n      this._hoverTimeout = window.setTimeout(() => {\n        this._clearHover();\n      }, HOVER_TIMEOUT);\n    };\n    return caret;\n  }\n\n  /**\n   * Check for an out of sync editor.\n   */\n  private _checkSync(): void {\n    let change = this._lastChange;\n    if (!change) {\n      return;\n    }\n    this._lastChange = null;\n    let editor = this._editor;\n    let doc = editor.getDoc();\n    if (doc.getValue() === this._model.value.text) {\n      return;\n    }\n\n    showDialog({\n      title: 'Code Editor out of Sync',\n      body: 'Please open your browser JavaScript console for bug report instructions'\n    });\n    console.log('Please paste the following to https://github.com/jupyterlab/jupyterlab/issues/2951');\n    console.log(JSON.stringify({\n      model: this._model.value.text,\n      view: doc.getValue(),\n      selections: this.getSelections(),\n      cursor: this.getCursorPosition(),\n      lineSep: editor.getOption('lineSeparator'),\n      mode: editor.getOption('mode'),\n      change\n    }));\n  }\n\n  private _model: CodeEditor.IModel;\n  private _editor: CodeMirror.Editor;\n  protected selectionMarkers: { [key: string]: CodeMirror.TextMarker[] | undefined } = {};\n  private _caretHover: HTMLElement | null;\n  private _hoverTimeout: number;\n  private _hoverId: string;\n  private _keydownHandlers = new Array<CodeEditor.KeydownHandler>();\n  private _changeGuard = false;\n  private _selectionStyle: CodeEditor.ISelectionStyle;\n  private _uuid = '';\n  private _needsRefresh = false;\n  private _isDisposed = false;\n  private _lastChange: CodeMirror.EditorChange | null = null;\n  private _timer = -1;\n}\n\n\n/**\n * The namespace for `CodeMirrorEditor` statics.\n */\nexport\nnamespace CodeMirrorEditor {\n  /**\n   * The options used to initialize a code mirror editor.\n   */\n  export\n  interface IOptions extends CodeEditor.IOptions {\n    /**\n     * The configuration options for the editor.\n     */\n    config?: Partial<IConfig>;\n  }\n\n  /**\n   * The configuration options for a codemirror editor.\n   */\n  export\n  interface IConfig extends CodeEditor.IConfig {\n    /**\n     * The mode to use.\n     */\n    mode?: string | Mode.ISpec;\n\n    /**\n     * The theme to style the editor with.\n     * You must make sure the CSS file defining the corresponding\n     * .cm-s-[name] styles is loaded.\n     */\n    theme?: string;\n\n    /**\n     * Whether to use the context-sensitive indentation that the mode provides\n     * (or just indent the same as the line before).\n     */\n    smartIndent?: boolean;\n\n    /**\n     * Configures whether the editor should re-indent the current line when a\n     * character is typed that might change its proper indentation\n     * (only works if the mode supports indentation).\n     */\n    electricChars?: boolean;\n\n    /**\n     * Configures the keymap to use. The default is \"default\", which is the\n     * only keymap defined in codemirror.js itself.\n     * Extra keymaps are found in the CodeMirror keymap directory.\n     */\n    keyMap?: string;\n\n    /**\n     * Can be used to specify extra keybindings for the editor, alongside the\n     * ones defined by keyMap. Should be either null, or a valid keymap value.\n     */\n    extraKeys?: any;\n\n    /**\n     * Can be used to add extra gutters (beyond or instead of the line number\n     * gutter).\n     * Should be an array of CSS class names, each of which defines a width\n     * (and optionally a background),\n     * and which will be used to draw the background of the gutters.\n     * May include the CodeMirror-linenumbers class, in order to explicitly\n     * set the position of the line number gutter\n     * (it will default to be to the right of all other gutters).\n     * These class names are the keys passed to setGutterMarker.\n     */\n    gutters?: ReadonlyArray<string>;\n\n    /**\n     * Determines whether the gutter scrolls along with the content\n     * horizontally (false)\n     * or whether it stays fixed during horizontal scrolling (true,\n     * the default).\n     */\n    fixedGutter?: boolean;\n\n    /**\n     * Whether the cursor should be drawn when a selection is active.\n     */\n    showCursorWhenSelecting?: boolean;\n\n    /**\n     * When fixedGutter is on, and there is a horizontal scrollbar, by default\n     * the gutter will be visible to the left of this scrollbar. If this\n     * option is set to true, it will be covered by an element with class\n     * CodeMirror-gutter-filler.\n     */\n    coverGutterNextToScrollbar?: boolean;\n\n    /**\n     * Controls whether drag-and-drop is enabled.\n     */\n    dragDrop?: boolean;\n\n    /**\n     * Explicitly set the line separator for the editor.\n     * By default (value null), the document will be split on CRLFs as well as\n     * lone CRs and LFs, and a single LF will be used as line separator in all\n     * output (such as getValue). When a specific string is given, lines will\n     * only be split on that string, and output will, by default, use that\n     * same separator.\n     */\n    lineSeparator?: string | null;\n\n    /**\n     * Chooses a scrollbar implementation. The default is \"native\", showing\n     * native scrollbars. The core library also provides the \"null\" style,\n     * which completely hides the scrollbars. Addons can implement additional\n     * scrollbar models.\n     */\n    scrollbarStyle?: string;\n\n    /**\n     * When enabled, which is the default, doing copy or cut when there is no\n     * selection will copy or cut the whole lines that have cursors on them.\n     */\n    lineWiseCopyCut?: boolean;\n\n    /**\n     * Whether to scroll past the end of the buffer.\n     */\n    scrollPastEnd?: boolean;\n  }\n\n  /**\n   * The default configuration options for an editor.\n   */\n  export\n  let defaultConfig: IConfig = {\n    ...CodeEditor.defaultConfig,\n    mode: 'null',\n    theme: 'jupyter',\n    smartIndent: true,\n    electricChars: true,\n    keyMap: 'default',\n    extraKeys: null,\n    gutters: Object.freeze([]),\n    fixedGutter: true,\n    showCursorWhenSelecting: false,\n    coverGutterNextToScrollbar: false,\n    dragDrop: true,\n    lineSeparator: null,\n    scrollbarStyle: 'native',\n    lineWiseCopyCut: true,\n    scrollPastEnd: false\n  };\n\n  /**\n   * Add a command to CodeMirror.\n   *\n   * @param name - The name of the command to add.\n   *\n   * @param command - The command function.\n   */\n  export\n  function addCommand(name: string, command: (cm: CodeMirror.Editor) => void) {\n    CodeMirror.commands[name] = command;\n  }\n}\n\n\n/**\n * The namespace for module private data.\n */\nnamespace Private {\n  /**\n   * Handle the codemirror configuration options.\n   */\n  export\n  function handleConfig(editor: CodeMirror.Editor, config: Partial<CodeMirrorEditor.IConfig>): void {\n    let fullConfig: CodeMirrorEditor.IConfig = {\n      ...CodeMirrorEditor.defaultConfig,\n      ...config\n    };\n    let key: keyof CodeMirrorEditor.IConfig;\n    for (key in fullConfig) {\n      Private.setOption(editor, key, fullConfig[key]);\n    }\n  }\n\n  /**\n   * Indent or insert a tab as appropriate.\n   */\n  export\n  function indentMoreOrinsertTab(cm: CodeMirror.Editor): void {\n    let doc = cm.getDoc();\n    let from = doc.getCursor('from');\n    let to = doc.getCursor('to');\n    let sel = !posEq(from, to);\n    if (sel) {\n      CodeMirror.commands['indentMore'](cm);\n      return;\n    }\n    // Check for start of line.\n    let line = doc.getLine(from.line);\n    let before = line.slice(0, from.ch);\n    if (/^\\s*$/.test(before)) {\n      CodeMirror.commands['indentMore'](cm);\n    } else {\n      CodeMirror.commands['insertSoftTab'](cm);\n    }\n  }\n\n  /**\n   * Delete spaces to the previous tab stob in a codemirror editor.\n   */\n  export\n  function delSpaceToPrevTabStop(cm: CodeMirror.Editor): void {\n    let doc = cm.getDoc();\n    let from = doc.getCursor('from');\n    let to = doc.getCursor('to');\n    let sel = !posEq(from, to);\n    if (sel) {\n      let ranges = doc.listSelections();\n      for (let i = ranges.length - 1; i >= 0; i--) {\n        let head = ranges[i].head;\n        let anchor = ranges[i].anchor;\n        doc.replaceRange('', CodeMirror.Pos(head.line, head.ch), CodeMirror.Pos(anchor.line, anchor.ch));\n      }\n      return;\n    }\n    let cur = doc.getCursor();\n    let tabsize = cm.getOption('tabSize');\n    let chToPrevTabStop = cur.ch - (Math.ceil(cur.ch / tabsize) - 1) * tabsize;\n    from = {ch: cur.ch - chToPrevTabStop, line: cur.line};\n    let select = doc.getRange(from, cur);\n    if (select.match(/^\\ +$/) !== null) {\n      doc.replaceRange('', from, cur);\n    } else {\n      CodeMirror.commands['delCharBefore'](cm);\n    }\n  }\n\n  /**\n   * Test whether two CodeMirror positions are equal.\n   */\n  export\n  function posEq(a: CodeMirror.Position, b: CodeMirror.Position): boolean {\n    return a.line === b.line && a.ch === b.ch;\n  }\n\n  /**\n   * Get a config option for the editor.\n   */\n  export\n  function getOption<K extends keyof CodeMirrorEditor.IConfig>(editor: CodeMirror.Editor, option: K): CodeMirrorEditor.IConfig[K] {\n    switch (option) {\n    case 'lineWrap':\n      return editor.getOption('lineWrapping');\n    case 'insertSpaces':\n      return !editor.getOption('indentWithTabs');\n    case 'tabSize':\n      return editor.getOption('indentUnit');\n    case 'autoClosingBrackets':\n      return editor.getOption('autoCloseBrackets');\n    default:\n      return editor.getOption(option);\n    }\n  }\n\n  /**\n   * Set a config option for the editor.\n   */\n  export\n  function setOption<K extends keyof CodeMirrorEditor.IConfig>(editor: CodeMirror.Editor, option: K, value: CodeMirrorEditor.IConfig[K]): void {\n    // Don't bother setting the option if it is already the same.\n    const oldValue = getOption(editor, option);\n    if (oldValue === value) {\n      return;\n    }\n    switch (option) {\n    case 'lineWrap':\n      editor.setOption('lineWrapping', value);\n      break;\n    case 'tabSize':\n      editor.setOption('indentUnit', value);\n      break;\n    case 'insertSpaces':\n      editor.setOption('indentWithTabs', !value);\n      break;\n    case 'autoClosingBrackets':\n      editor.setOption('autoCloseBrackets', value);\n      break;\n    case 'readOnly':\n      let el = editor.getWrapperElement();\n      el.classList.toggle(READ_ONLY_CLASS, value);\n      editor.setOption(option, value);\n      break;\n    default:\n      editor.setOption(option, value);\n      break;\n    }\n  }\n}\n\n\n/**\n * Add a CodeMirror command to delete until previous non blanking space\n * character or first multiple of tabsize tabstop.\n */\nCodeMirrorEditor.addCommand(\n  'delSpaceToPrevTabStop', Private.delSpaceToPrevTabStop\n);\n\n\n/**\n * Add a CodeMirror command to indent or insert a tab as appropriate.\n */\nCodeMirrorEditor.addCommand(\n  'indentMoreOrinsertTab', Private.indentMoreOrinsertTab\n);\n\n"]}