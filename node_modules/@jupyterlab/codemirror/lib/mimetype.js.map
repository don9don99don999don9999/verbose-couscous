{"version":3,"file":"mimetype.js","sourceRoot":"","sources":["../../../../codemirror/src/mimetype.ts"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,2DAA2D;;AAM3D,mDAE+B;AAE/B,+BAEgB;AAEhB;;GAEG;AACH;IAAA;IA8BA,CAAC;IA5BC;;;;;OAKG;IACH,yDAAqB,GAArB,UAAsB,IAAoC;QACxD,IAAI,GAAG,GAAG,IAAI,CAAC,cAAc,IAAI,EAAE,CAAC;QACpC,MAAM,CAAC,WAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,eAAsB,IAAI;YAClD,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,GAAG,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SACnC,CAAC,CAAC,IAAI,CAAC;IACV,CAAC;IAED;;;;;OAKG;IACH,yDAAqB,GAArB,UAAsB,IAAY;QAChC,EAAE,CAAC,CAAC,mBAAO,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,MAAM,CAAC,CAAC,CAAC;YACrC,MAAM,CAAC,eAAe,CAAC;QACzB,CAAC;QACD,IAAI,IAAI,GAAG,WAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,WAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAC1D,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;IACH,gCAAC;AAAD,CAAC,AA9BD,IA8BC;AA7BK,8DAAyB","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  IEditorMimeTypeService\n} from '@jupyterlab/codeeditor';\n\nimport {\n  nbformat, PathExt\n} from '@jupyterlab/coreutils';\n\nimport {\n  Mode\n} from './mode';\n\n/**\n * The mime type service for CodeMirror.\n */\nexport\nclass CodeMirrorMimeTypeService implements IEditorMimeTypeService {\n  /**\n   * Returns a mime type for the given language info.\n   *\n   * #### Notes\n   * If a mime type cannot be found returns the defaul mime type `text/plain`, never `null`.\n   */\n  getMimeTypeByLanguage(info: nbformat.ILanguageInfoMetadata): string {\n    let ext = info.file_extension || '';\n    return Mode.findBest(info.codemirror_mode as any || {\n      mimetype: info.mimetype,\n      name: info.name,\n      ext: [ext.split('.').slice(-1)[0]]\n    }).mime;\n  }\n\n  /**\n   * Returns a mime type for the given file path.\n   *\n   * #### Notes\n   * If a mime type cannot be found returns the default mime type `text/plain`, never `null`.\n   */\n  getMimeTypeByFilePath(path: string): string {\n    if (PathExt.extname(path) === '.ipy') {\n      return 'text/x-python';\n    }\n    let mode = Mode.findByFileName(path) || Mode.findBest('');\n    return mode.mime;\n  }\n}\n"]}