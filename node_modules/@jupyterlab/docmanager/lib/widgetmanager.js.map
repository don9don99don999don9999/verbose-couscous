{"version":3,"file":"widgetmanager.js","sourceRoot":"","sources":["../../../../docmanager/src/widgetmanager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  ArrayExt, each, map, find, filter, toArray\n} from '@phosphor/algorithm';\n\nimport {\n  DisposableSet, IDisposable\n} from '@phosphor/disposable';\n\nimport {\n  IMessageHandler, Message, MessageLoop\n} from '@phosphor/messaging';\n\nimport {\n  AttachedProperty\n} from '@phosphor/properties';\n\nimport {\n  ISignal, Signal\n} from '@phosphor/signaling';\n\nimport {\n  Widget\n} from '@phosphor/widgets';\n\nimport {\n  Time\n} from '@jupyterlab/coreutils';\n\nimport {\n  showDialog, Dialog\n} from '@jupyterlab/apputils';\n\nimport {\n  DocumentRegistry\n} from '@jupyterlab/docregistry';\n\nimport {\n  Contents\n} from '@jupyterlab/services';\n\n\n/**\n * The class name added to document widgets.\n */\nconst DOCUMENT_CLASS = 'jp-Document';\n\n\n/**\n * A class that maintains the lifecyle of file-backed widgets.\n */\nexport\nclass DocumentWidgetManager implements IDisposable {\n  /**\n   * Construct a new document widget manager.\n   */\n  constructor(options: DocumentWidgetManager.IOptions) {\n    this._registry = options.registry;\n  }\n\n  /**\n   * A signal emitted when one of the documents is activated.\n   */\n  get activateRequested(): ISignal<this, string> {\n    return this._activateRequested;\n  }\n\n  /**\n   * Test whether the document widget manager is disposed.\n   */\n  get isDisposed(): boolean {\n    return this._isDisposed;\n  }\n\n  /**\n   * Dispose of the resources used by the widget manager.\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    this._isDisposed = true;\n    Signal.disconnectReceiver(this);\n  }\n\n  /**\n   * Create a widget for a document and handle its lifecycle.\n   *\n   * @param factory - The widget factory.\n   *\n   * @param context - The document context object.\n   *\n   * @returns A widget created by the factory.\n   *\n   * @throws If the factory is not registered.\n   */\n  createWidget(factory: DocumentRegistry.WidgetFactory, context: DocumentRegistry.Context): DocumentRegistry.IReadyWidget {\n    let widget = factory.createNew(context);\n    Private.factoryProperty.set(widget, factory);\n\n    // Handle widget extensions.\n    let disposables = new DisposableSet();\n    each(this._registry.widgetExtensions(factory.name), extender => {\n      disposables.add(extender.createNew(widget, context));\n    });\n    Private.disposablesProperty.set(widget, disposables);\n    widget.disposed.connect(this._onWidgetDisposed, this);\n\n    this.adoptWidget(context, widget);\n    context.fileChanged.connect(this._onFileChanged, this);\n    context.pathChanged.connect(this._onPathChanged, this);\n    context.ready.then(() => {\n      this.setCaption(widget);\n    });\n    return widget;\n  }\n\n  /**\n   * Install the message hook for the widget and add to list\n   * of known widgets.\n   *\n   * @param context - The document context object.\n   *\n   * @param widget - The widget to adopt.\n   */\n  adoptWidget(context: DocumentRegistry.Context, widget: DocumentRegistry.IReadyWidget): void {\n    let widgets = Private.widgetsProperty.get(context);\n    widgets.push(widget);\n    MessageLoop.installMessageHook(widget, this);\n    widget.addClass(DOCUMENT_CLASS);\n    widget.title.closable = true;\n    widget.disposed.connect(this._widgetDisposed, this);\n    Private.contextProperty.set(widget, context);\n  }\n\n  /**\n   * See if a widget already exists for the given context and widget name.\n   *\n   * @param context - The document context object.\n   *\n   * @returns The found widget, or `undefined`.\n   *\n   * #### Notes\n   * This can be used to use an existing widget instead of opening\n   * a new widget.\n   */\n  findWidget(context: DocumentRegistry.Context, widgetName: string): DocumentRegistry.IReadyWidget | undefined {\n    let widgets = Private.widgetsProperty.get(context);\n    if (!widgets) {\n      return undefined;\n    }\n    return find(widgets, widget => {\n      let factory = Private.factoryProperty.get(widget);\n      if (!factory) {\n        return false;\n      }\n      return factory.name === widgetName;\n    });\n  }\n\n  /**\n   * Get the document context for a widget.\n   *\n   * @param widget - The widget of interest.\n   *\n   * @returns The context associated with the widget, or `undefined`.\n   */\n  contextForWidget(widget: Widget): DocumentRegistry.Context | undefined {\n    return Private.contextProperty.get(widget);\n  }\n\n  /**\n   * Clone a widget.\n   *\n   * @param widget - The source widget.\n   *\n   * @returns A new widget or `undefined`.\n   *\n   * #### Notes\n   *  Uses the same widget factory and context as the source, or throws\n   *  if the source widget is not managed by this manager.\n   */\n  cloneWidget(widget: Widget): DocumentRegistry.IReadyWidget | undefined {\n    let context = Private.contextProperty.get(widget);\n    if (!context) {\n      return undefined;\n    }\n    let factory = Private.factoryProperty.get(widget);\n    if (!factory) {\n      return undefined;\n    }\n    let newWidget = this.createWidget(factory, context);\n    this.adoptWidget(context, newWidget);\n    return newWidget;\n  }\n\n  /**\n   * Close the widgets associated with a given context.\n   *\n   * @param context - The document context object.\n   */\n  closeWidgets(context: DocumentRegistry.Context): Promise<void> {\n    let widgets = Private.widgetsProperty.get(context);\n    return Promise.all(\n      toArray(map(widgets, widget => this.onClose(widget)))\n    ).then(() => undefined);\n  }\n\n  /**\n   * Dispose of the widgets associated with a given context\n   * regardless of the widget's dirty state.\n   *\n   * @param context - The document context object.\n   */\n  deleteWidgets(context: DocumentRegistry.Context): Promise<void> {\n    let widgets = Private.widgetsProperty.get(context);\n    return Promise.all(\n      toArray(map(widgets, widget => this.onDelete(widget)))\n    ).then(() => undefined);\n  }\n\n  /**\n   * Filter a message sent to a message handler.\n   *\n   * @param handler - The target handler of the message.\n   *\n   * @param msg - The message dispatched to the handler.\n   *\n   * @returns `false` if the message should be filtered, of `true`\n   *   if the message should be dispatched to the handler as normal.\n   */\n  messageHook(handler: IMessageHandler, msg: Message): boolean {\n    switch (msg.type) {\n    case 'close-request':\n      this.onClose(handler as Widget);\n      return false;\n    case 'activate-request':\n      let context = this.contextForWidget(handler as Widget);\n      if (context) {\n        this._activateRequested.emit(context.path);\n      }\n      break;\n    default:\n      break;\n    }\n    return true;\n  }\n\n  /**\n   * Set the caption for widget title.\n   *\n   * @param widget - The target widget.\n   */\n  protected setCaption(widget: Widget): void {\n    let context = Private.contextProperty.get(widget);\n    if (!context) {\n      return;\n    }\n    let model = context.contentsModel;\n    if (!model) {\n      widget.title.caption = '';\n      return;\n    }\n    context.listCheckpoints().then((checkpoints: Contents.ICheckpointModel[]) => {\n      if (widget.isDisposed) {\n        return;\n      }\n      let last = checkpoints[checkpoints.length - 1];\n      let checkpoint = last ? Time.format(last.last_modified) : 'None';\n      let caption = `Name: ${model.name}\\nPath: ${model.path}\\n`;\n      if (context.model.readOnly) {\n        caption += 'Read-only';\n      } else {\n        caption += (\n          `Last Saved: ${Time.format(model.last_modified)}\\n` +\n          `Last Checkpoint: ${checkpoint}`\n        );\n      }\n      widget.title.caption = caption;\n    });\n  }\n\n  /**\n   * Handle `'close-request'` messages.\n   *\n   * @param widget - The target widget.\n   *\n   * @returns A promise that resolves with whether the widget was closed.\n   */\n  protected onClose(widget: Widget): Promise<boolean> {\n    // Handle dirty state.\n    return this._maybeClose(widget).then(result => {\n      if (widget.isDisposed) {\n        return true;\n      }\n      if (result) {\n        widget.dispose();\n      }\n      return result;\n    }).catch(error => {\n      widget.dispose();\n      throw error;\n    });\n  }\n\n  /**\n   * Dispose of widget regardless of widget's dirty state.\n   *\n   * @param widget - The target widget.\n   */\n  protected onDelete(widget: Widget): Promise<void> {\n    widget.dispose();\n    return Promise.resolve(void 0);\n  }\n\n  /**\n   * Ask the user whether to close an unsaved file.\n   */\n  private _maybeClose(widget: Widget): Promise<boolean> {\n    // Bail if the model is not dirty or other widgets are using the model.)\n    let context = Private.contextProperty.get(widget);\n    if (!context) {\n      return Promise.resolve(true);\n    }\n    let widgets = Private.widgetsProperty.get(context);\n    if (!widgets) {\n      return Promise.resolve(true);\n    }\n    // Filter by whether the factories are read only.\n    widgets = toArray(filter(widgets, widget => {\n      let factory = Private.factoryProperty.get(widget);\n      if (!factory) {\n        return false;\n      }\n      return factory.readOnly === false;\n    }));\n    let factory = Private.factoryProperty.get(widget);\n    if (!factory) {\n      return Promise.resolve(true);\n    }\n    let model = context.model;\n    if (!model.dirty || widgets.length > 1 || factory.readOnly) {\n      return Promise.resolve(true);\n    }\n    let fileName = widget.title.label;\n    return showDialog({\n      title: 'Close without saving?',\n      body: `File \"${fileName}\" has unsaved changes, close without saving?`,\n      buttons: [Dialog.cancelButton(), Dialog.warnButton()]\n    }).then(result => {\n      return result.button.accept;\n    });\n  }\n\n  /**\n   * Handle the disposal of a widget.\n   */\n  private _widgetDisposed(widget: Widget): void {\n    let context = Private.contextProperty.get(widget);\n    if (!context) {\n      return;\n    }\n    let widgets = Private.widgetsProperty.get(context);\n    if (!widgets) {\n      return;\n    }\n    // Remove the widget.\n    ArrayExt.removeFirstOf(widgets, widget);\n    // Dispose of the context if this is the last widget using it.\n    if (!widgets.length) {\n      context.dispose();\n    }\n  }\n\n  /**\n   * Handle the disposal of a widget.\n   */\n  private _onWidgetDisposed(widget: Widget): void {\n    let disposables = Private.disposablesProperty.get(widget);\n    disposables.dispose();\n  }\n\n  /**\n   * Handle a file changed signal for a context.\n   */\n  private _onFileChanged(context: DocumentRegistry.Context): void {\n    let widgets = Private.widgetsProperty.get(context);\n    each(widgets, widget => { this.setCaption(widget); });\n  }\n\n  /**\n   * Handle a path changed signal for a context.\n   */\n  private _onPathChanged(context: DocumentRegistry.Context): void {\n    let widgets = Private.widgetsProperty.get(context);\n    each(widgets, widget => { this.setCaption(widget); });\n  }\n\n  private _registry: DocumentRegistry;\n  private _activateRequested = new Signal<this, string>(this);\n  private _isDisposed = false;\n}\n\n\n/**\n * A namespace for document widget manager statics.\n */\nexport\nnamespace DocumentWidgetManager {\n  /**\n   * The options used to initialize a document widget manager.\n   */\n  export\n  interface IOptions {\n    /**\n     * A document registry instance.\n     */\n    registry: DocumentRegistry;\n  }\n}\n\n\n/**\n * A private namespace for DocumentManager data.\n */\nnamespace Private {\n  /**\n   * A private attached property for a widget context.\n   */\n  export\n  const contextProperty = new AttachedProperty<Widget, DocumentRegistry.Context | undefined>({\n    name: 'context',\n    create: () => undefined\n  });\n\n  /**\n   * A private attached property for a widget factory.\n   */\n  export\n  const factoryProperty = new AttachedProperty<Widget, DocumentRegistry.WidgetFactory | undefined> ({\n    name: 'factory',\n    create: () => undefined\n  });\n\n  /**\n   * A private attached property for the widgets associated with a context.\n   */\n  export\n  const widgetsProperty = new AttachedProperty<DocumentRegistry.Context, DocumentRegistry.IReadyWidget[]>({\n    name: 'widgets',\n    create: () => []\n  });\n\n  /**\n   * A private attached property for a widget's disposables.\n   */\n  export\n  const disposablesProperty = new AttachedProperty<Widget, DisposableSet>({\n    name: 'disposables',\n    create: () => new DisposableSet()\n  });\n}\n"]}