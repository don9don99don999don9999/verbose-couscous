"use strict";
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var apputils_1 = require("@jupyterlab/apputils");
var coreutils_1 = require("@jupyterlab/coreutils");
var widgets_1 = require("@phosphor/widgets");
/**
 * The class name added to file dialogs.
 */
var FILE_DIALOG_CLASS = 'jp-FileDialog';
/**
 * The class name added for the new name label in the rename dialog
 */
var RENAME_NEWNAME_TITLE_CLASS = 'jp-new-name-title';
/**
 * Rename a file with an optional dialog.
 */
function renameDialog(manager, oldPath) {
    return apputils_1.showDialog({
        title: 'Rename File',
        body: new RenameHandler(oldPath),
        focusNodeSelector: 'input',
        buttons: [apputils_1.Dialog.cancelButton(), apputils_1.Dialog.okButton({ label: 'RENAME' })]
    }).then(function (result) {
        if (!result.value) {
            return null;
        }
        var basePath = coreutils_1.PathExt.dirname(oldPath);
        var newPath = coreutils_1.PathExt.join(basePath, result.value);
        return renameFile(manager, oldPath, newPath);
    });
}
exports.renameDialog = renameDialog;
/**
 * Rename a file with optional dialog.
 */
function renameFile(manager, oldPath, newPath) {
    return manager.rename(oldPath, newPath).catch(function (error) {
        if (error.message.indexOf('409') === -1) {
            throw error;
        }
        return shouldOverwrite(newPath).then(function (value) {
            if (value) {
                return manager.overwrite(oldPath, newPath);
            }
            return Promise.reject('File not renamed');
        });
    });
}
exports.renameFile = renameFile;
/**
 * Ask the user whether to overwrite a file.
 */
function shouldOverwrite(path) {
    var options = {
        title: 'Overwrite file?',
        body: "\"" + path + "\" already exists, overwrite?",
        buttons: [apputils_1.Dialog.cancelButton(), apputils_1.Dialog.warnButton({ label: 'OVERWRITE' })]
    };
    return apputils_1.showDialog(options).then(function (result) {
        return Promise.resolve(result.button.accept);
    });
}
exports.shouldOverwrite = shouldOverwrite;
/**
 * A widget used to rename a file.
 */
var RenameHandler = /** @class */ (function (_super) {
    __extends(RenameHandler, _super);
    /**
     * Construct a new "rename" dialog.
     */
    function RenameHandler(oldPath) {
        var _this = _super.call(this, { node: Private.createRenameNode(oldPath) }) || this;
        _this.addClass(FILE_DIALOG_CLASS);
        var ext = coreutils_1.PathExt.extname(oldPath);
        var value = _this.inputNode.value = coreutils_1.PathExt.basename(oldPath);
        _this.inputNode.setSelectionRange(0, value.length - ext.length);
        return _this;
    }
    Object.defineProperty(RenameHandler.prototype, "inputNode", {
        /**
         * Get the input text node.
         */
        get: function () {
            return this.node.getElementsByTagName('input')[0];
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Get the value of the widget.
     */
    RenameHandler.prototype.getValue = function () {
        return this.inputNode.value;
    };
    return RenameHandler;
}(widgets_1.Widget));
/**
 * A namespace for private data.
 */
var Private;
(function (Private) {
    /**
     * Create the node for a rename handler.
     */
    function createRenameNode(oldPath) {
        var body = document.createElement('div');
        var existingLabel = document.createElement('label');
        existingLabel.textContent = 'File Path';
        var existingPath = document.createElement('span');
        existingPath.textContent = oldPath;
        var nameTitle = document.createElement('label');
        nameTitle.textContent = 'New Name';
        nameTitle.className = RENAME_NEWNAME_TITLE_CLASS;
        var name = document.createElement('input');
        body.appendChild(existingLabel);
        body.appendChild(existingPath);
        body.appendChild(nameTitle);
        body.appendChild(name);
        return body;
    }
    Private.createRenameNode = createRenameNode;
})(Private || (Private = {}));
