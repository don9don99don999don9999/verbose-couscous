{"version":3,"file":"savehandler.js","sourceRoot":"","sources":["../../../../docmanager/src/savehandler.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  IDisposable\n} from '@phosphor/disposable';\n\nimport {\n  Signal\n} from '@phosphor/signaling';\n\nimport {\n  DocumentRegistry\n} from '@jupyterlab/docregistry';\n\n\n/**\n * A class that manages the auto saving of a document.\n *\n * #### Notes\n * Implements https://github.com/ipython/ipython/wiki/IPEP-15:-Autosaving-the-IPython-Notebook.\n */\nexport\nclass SaveHandler implements IDisposable {\n  /**\n   * Construct a new save handler.\n   */\n  constructor(options: SaveHandler.IOptions) {\n    this._context = options.context;\n    let interval = options.saveInterval || 120;\n    this._minInterval = interval * 1000;\n    this._interval = this._minInterval;\n    // Restart the timer when the contents model is updated.\n    this._context.fileChanged.connect(this._setTimer, this);\n    this._context.disposed.connect(this.dispose, this);\n  }\n\n  /**\n   * The save interval used by the timer (in seconds).\n   */\n  get saveInterval(): number {\n    return this._interval / 1000;\n  }\n  set saveInterval(value: number) {\n    this._minInterval = this._interval = value * 1000;\n    if (this._isActive) {\n      this._setTimer();\n    }\n  }\n\n  /**\n   * Get whether the handler is active.\n   */\n  get isActive(): boolean {\n    return this._isActive;\n  }\n\n  /**\n   * Get whether the save handler is disposed.\n   */\n  get isDisposed(): boolean {\n    return this._isDisposed;\n  }\n\n  /**\n   * Dispose of the resources used by the save handler.\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    this._isDisposed = true;\n    clearTimeout(this._autosaveTimer);\n    Signal.clearData(this);\n  }\n\n  /**\n   * Start the autosaver.\n   */\n  start(): void {\n    this._isActive = true;\n    this._setTimer();\n  }\n\n  /**\n   * Stop the autosaver.\n   */\n  stop(): void {\n    this._isActive = false;\n    clearTimeout(this._autosaveTimer);\n  }\n\n  /**\n   * Set the timer.\n   */\n  private _setTimer(): void {\n    clearTimeout(this._autosaveTimer);\n    if (!this._isActive) {\n      return;\n    }\n    this._autosaveTimer = window.setTimeout(() => {\n      this._save();\n    }, this._interval);\n  }\n\n  /**\n   * Handle an autosave timeout.\n   */\n  private _save(): void {\n    let context = this._context;\n\n    // Trigger the next update.\n    this._setTimer();\n\n    if (!context) {\n      return;\n    }\n\n    // Bail if the model is not dirty or the file is not writable, or the dialog\n    // is already showing.\n    let writable = context.contentsModel && context.contentsModel.writable;\n    if (!writable || !context.model.dirty || this._inDialog) {\n      return;\n    }\n\n    let start = new Date().getTime();\n    context.save().then(() => {\n      if (this.isDisposed) {\n        return;\n      }\n      let duration = new Date().getTime() - start;\n      // New save interval: higher of 10x save duration or min interval.\n      this._interval = Math.max(this._multiplier * duration, this._minInterval);\n      // Restart the update to pick up the new interval.\n      this._setTimer();\n    }).catch(err => {\n      console.error('Error in Auto-Save', err.message);\n    });\n  }\n\n  private _autosaveTimer = -1;\n  private _minInterval = -1;\n  private _interval = -1;\n  private _context: DocumentRegistry.Context;\n  private _isActive = false;\n  private _inDialog = false;\n  private _isDisposed = false;\n  private _multiplier = 10;\n}\n\n\n/**\n * A namespace for `SaveHandler` statics.\n */\nexport\nnamespace SaveHandler {\n  /**\n   * The options used to create a save handler.\n   */\n  export\n  interface IOptions {\n    /**\n     * The context asssociated with the file.\n     */\n    context: DocumentRegistry.Context;\n\n    /**\n     * The minimum save interval in seconds (default is two minutes).\n     */\n    saveInterval?: number;\n  }\n}\n"]}