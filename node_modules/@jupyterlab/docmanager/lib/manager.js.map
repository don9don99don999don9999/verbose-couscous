{"version":3,"file":"manager.js","sourceRoot":"","sources":["../../../../docmanager/src/manager.ts"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,2DAA2D;;AAO3D,mDAE+B;AAE/B,uDAEiC;AAMjC,iDAE6B;AAE7B,iDAE6B;AAM7B,mDAE8B;AAE9B,iDAE6B;AAM7B,6CAEuB;AAEvB,iDAEyB;AAGzB,oBAAoB;AACpB;;GAEG;AAEG,QAAA,gBAAgB,GAAG,IAAI,iBAAK,CAAmB,yCAAyC,CAAC,CAAC;AAWhG;;;;;;;;;GASG;AACH;IAEE;;OAEG;IACH,yBAAY,OAAiC;QAoarC,uBAAkB,GAAG,IAAI,kBAAM,CAAe,IAAI,CAAC,CAAC;QACpD,cAAS,GAAuB,EAAE,CAAC;QAGnC,gBAAW,GAAG,KAAK,CAAC;QACpB,cAAS,GAAG,IAAI,CAAC;QAxavB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;QACjC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,OAAO,CAAC;QAEhC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC;QAE9B,IAAI,aAAa,GAAG,IAAI,qCAAqB,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC3E,aAAa,CAAC,iBAAiB,CAAC,OAAO,CAAC,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,CAAC;QACzE,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;IACtC,CAAC;IAeD,sBAAI,8CAAiB;QAHrB;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC;QACjC,CAAC;;;OAAA;IAKD,sBAAI,qCAAQ;QAHZ;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;QACxB,CAAC;aACD,UAAa,KAAc;YACzB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;YACvB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAA,OAAO;gBAC5B,IAAM,OAAO,GAAG,OAAO,CAAC,mBAAmB,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;gBACzD,EAAE,CAAC,CAAC,KAAK,KAAK,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACxC,OAAO,CAAC,KAAK,EAAE,CAAC;gBAClB,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,KAAK,KAAK,IAAI,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;oBAC/C,OAAO,CAAC,IAAI,EAAE,CAAC;gBACjB,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC;;;OAXA;IAgBD,sBAAI,uCAAU;QAHd;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;QAC1B,CAAC;;;OAAA;IAED;;OAEG;IACH,iCAAO,GAAP;QAAA,iBAWC;QAVC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACpB,MAAM,CAAC;QACT,CAAC;QACD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,kBAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QACvB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAA,OAAO;YAC5B,KAAI,CAAC,cAAc,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC;QAC9B,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;IAC5B,CAAC;IAED;;;;;;;;;;OAUG;IACH,qCAAW,GAAX,UAAY,MAAc;QACxB,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;IACjD,CAAC;IAED;;OAEG;IACH,kCAAQ,GAAR;QAAA,iBAMC;QALC,MAAM,CAAC,OAAO,CAAC,GAAG,CAChB,mBAAO,CAAC,eAAG,CAAC,IAAI,CAAC,SAAS,EAAE,UAAA,OAAO;YACjC,MAAM,CAAC,KAAI,CAAC,cAAc,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC,CACJ,CAAC,IAAI,CAAC,cAAM,OAAA,SAAS,EAAT,CAAS,CAAC,CAAC;IAC1B,CAAC;IAED;;;;OAIG;IACH,mCAAS,GAAT,UAAU,IAAY;QACpB,IAAI,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QACzC,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACZ,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;QACnD,CAAC;QACD,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;IACjC,CAAC;IAED;;;;;;OAMG;IACH,0CAAgB,GAAhB,UAAiB,MAAc;QAC7B,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;IACtD,CAAC;IAED;;;;;;;;OAQG;IACH,8BAAI,GAAJ,UAAK,QAAgB,EAAE,KAAa;QAClC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IACtD,CAAC;IAED;;;;;;;;;;;;;;OAcG;IACH,mCAAS,GAAT,UAAU,IAAY,EAAE,UAAoB,EAAE,MAA+B;QAArD,2BAAA,EAAA,sBAAoB;QAC1C,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC;IACxE,CAAC;IAED;;;;;;;;;;OAUG;IACH,oCAAU,GAAV,UAAW,IAAY;QAAvB,iBAWC;QAVC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC;YACpD,MAAM,CAAC,KAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC7C,CAAC,CAAC;aACD,IAAI,CAAC;YACJ,IAAI,OAAO,GAAG,KAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YACzC,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACZ,MAAM,CAAC,KAAI,CAAC,cAAc,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YACpD,CAAC;YACD,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;;;;;;;;;OAYG;IACH,oCAAU,GAAV,UAAW,IAAY,EAAE,UAAoB;QAApB,2BAAA,EAAA,sBAAoB;QAC3C,EAAE,CAAC,CAAC,UAAU,KAAK,SAAS,CAAC,CAAC,CAAC;YAC7B,IAAI,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;YACvD,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACb,MAAM,CAAC,SAAS,CAAC;YACnB,CAAC;YACD,UAAU,GAAG,OAAO,CAAC,IAAI,CAAC;QAC5B,CAAC;QACD,IAAI,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QACzC,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACZ,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;QAC7D,CAAC;QACD,MAAM,CAAC,SAAS,CAAC;IACnB,CAAC;IAED;;;;OAIG;IACH,qCAAW,GAAX,UAAY,OAAgC;QAC1C,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,KAAK,MAAM,CAAC,CAAC,CAAC;YAC5B,OAAO,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,IAAI,MAAM,CAAC;QACtC,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IACrD,CAAC;IAED;;;;;;;;;;;;;;OAcG;IACH,8BAAI,GAAJ,UAAK,IAAY,EAAE,UAAoB,EAAE,MAA+B,EAAE,OAAuC;QAA9F,2BAAA,EAAA,sBAAoB;QACrC,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;IAC/E,CAAC;IAED;;;;;;;;;;;;;;;OAeG;IACH,sCAAY,GAAZ,UAAa,IAAY,EAAE,UAAoB,EAAE,MAA+B,EAAE,OAAuC;QAA9F,2BAAA,EAAA,sBAAoB;QAC7C,IAAI,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;QAC/C,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACX,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,IAAI,EAAE,CAAC,CAAC;YACzC,MAAM,CAAC,MAAM,CAAC;QAChB,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,EAAE,MAAM,EAAE,OAAO,IAAI,EAAE,CAAC,CAAC;IAC5D,CAAC;IAED;;;;;;;;OAQG;IACH,mCAAS,GAAT,UAAU,OAAe,EAAE,OAAe;QAA1C,iBAQC;QAPC,yEAAyE;QACzE,gDAAgD;QAChD,IAAM,QAAQ,GAAM,OAAO,SAAI,gBAAI,EAAI,CAAC;QACxC,IAAM,EAAE,GAAG,cAAM,OAAA,KAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,OAAO,CAAC,EAA9B,CAA8B,CAAC;QAChD,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC;YACzC,MAAM,CAAC,KAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IAClB,CAAC;IAED;;;;;;;;;;OAUG;IACH,gCAAM,GAAN,UAAO,OAAe,EAAE,OAAe;QACrC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IACzD,CAAC;IAED;;OAEG;IACK,sCAAY,GAApB,UAAqB,IAAY,EAAE,WAAmB;QACpD,MAAM,CAAC,gBAAI,CAAC,IAAI,CAAC,SAAS,EAAE,UAAA,OAAO;YACjC,MAAM,CAAC,OAAO,CAAC,WAAW,KAAK,WAAW,IAAI,OAAO,CAAC,IAAI,KAAK,IAAI,CAAC;QACtE,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACK,yCAAe,GAAvB,UAAwB,IAAY;QAClC,MAAM,CAAC,gBAAI,CAAC,IAAI,CAAC,SAAS,EAAE,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,IAAI,KAAK,IAAI,EAArB,CAAqB,CAAC,CAAC;IAChE,CAAC;IAED;;OAEG;IACK,wCAAc,GAAtB,UAAuB,IAAY,EAAE,OAAsC,EAAE,gBAAkD;QAA/H,iBAyBC;QAxBC,oDAAoD;QACpD,IAAI,OAAO,GAAG,UAAC,MAAqC,EAAE,OAAuC;YAC3F,KAAI,CAAC,cAAc,CAAC,WAAW,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;YACjD,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QACrC,CAAC,CAAC;QACF,IAAI,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,SAAS,CAAC;QACjF,IAAI,OAAO,GAAG,IAAI,qBAAO,CAAC;YACxB,MAAM,EAAE,OAAO;YACf,OAAO,EAAE,IAAI,CAAC,QAAQ;YACtB,OAAO,SAAA;YACP,IAAI,MAAA;YACJ,gBAAgB,kBAAA;YAChB,cAAc,gBAAA;SACf,CAAC,CAAC;QACH,IAAI,OAAO,GAAG,IAAI,yBAAW,CAAC,EAAE,OAAO,SAAA,EAAE,CAAC,CAAC;QAC3C,OAAO,CAAC,mBAAmB,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAClD,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC;YACjB,EAAE,CAAC,CAAC,KAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAClB,OAAO,CAAC,KAAK,EAAE,CAAC;YAClB,CAAC;QACH,CAAC,CAAC,CAAC;QACH,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC;QACxD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC7B,MAAM,CAAC,OAAO,CAAC;IACjB,CAAC;IAED;;OAEG;IACK,4CAAkB,GAA1B,UAA2B,OAAyB;QAClD,oBAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IAClD,CAAC;IAED;;OAEG;IACK,2CAAiB,GAAzB,UAA0B,IAAY,EAAE,UAAkB;QAClD,IAAA,wBAAQ,CAAU;QACxB,EAAE,CAAC,CAAC,UAAU,KAAK,SAAS,CAAC,CAAC,CAAC;YAC7B,IAAI,OAAO,GAAG,QAAQ,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;YAClD,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACb,MAAM,CAAC,SAAS,CAAC;YACnB,CAAC;YACD,UAAU,GAAG,OAAO,CAAC,IAAI,CAAC;QAC5B,CAAC;QACD,MAAM,CAAC,QAAQ,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;IAC/C,CAAC;IAED;;;;;;;OAOG;IACK,+CAAqB,GAA7B,UAA8B,KAAsB,EAAE,IAAY,EAAE,UAAoB,EAAE,MAA+B,EAAE,OAAuC;QAA9F,2BAAA,EAAA,sBAAoB;QACtF,IAAI,aAAa,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;QAC7D,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;YACnB,MAAM,CAAC,SAAS,CAAC;QACnB,CAAC;QACD,IAAI,SAAS,GAAG,aAAa,CAAC,SAAS,IAAI,MAAM,CAAC;QAClD,IAAI,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;QACvD,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACb,MAAM,CAAC,SAAS,CAAC;QACnB,CAAC;QAED,iCAAiC;QACjC,IAAI,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAChD,IAAI,EAAE,aAAa,CAAC,IAAI,EAAE,MAAM,CACjC,CAAC;QAEF,IAAI,OAAO,GAA4B,IAAI,CAAC;QAC5C,IAAI,KAAK,GAAyB,IAAI,CAAC;QAEvC,iCAAiC;QACjC,EAAE,CAAC,CAAC,KAAK,KAAK,MAAM,CAAC,CAAC,CAAC;YACrB,wCAAwC;YACxC,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC;YACxD,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACb,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;gBACzD,4CAA4C;gBAC5C,iBAAiB;gBACjB,KAAK,GAAG,OAAO,CAAC,SAAS,EAAE,CAAC;YAC9B,CAAC;QACH,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC;YAC9B,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;YACzD,yCAAyC;YACzC,KAAK,GAAG,OAAO,CAAC,IAAI,EAAE,CAAC;QACzB,CAAC;QAED,IAAI,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,aAAa,EAAE,OAAQ,CAAC,CAAC;QACvE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,IAAI,EAAE,CAAC,CAAC;QAEzC,sEAAsE;QACtE,KAAK,CAAC,KAAK,CAAC,UAAA,GAAG,IAAM,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAExC,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IAED;;OAEG;IACK,8CAAoB,GAA5B,UAA6B,MAA6B,EAAE,IAAY;QACtE,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACrC,CAAC;IAQH,sBAAC;AAAD,CAAC,AA/aD,IA+aC;AA9aK,0CAAe;AAwdrB;;GAEG;AACH,IAAU,OAAO,CAehB;AAfD,WAAU,OAAO;IACf;;OAEG;IAEG,2BAAmB,GAAG,IAAI,6BAAgB,CAAoD;QAClG,IAAI,EAAE,aAAa;QACnB,MAAM,EAAE,cAAM,OAAA,SAAS,EAAT,CAAS;KACxB,CAAC,CAAC;AAOL,CAAC,EAfS,OAAO,KAAP,OAAO,QAehB","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\n\nimport {\n  IClientSession\n} from '@jupyterlab/apputils';\n\nimport {\n  uuid\n} from '@jupyterlab/coreutils';\n\nimport {\n  DocumentRegistry, Context\n} from '@jupyterlab/docregistry';\n\nimport {\n  Contents, Kernel, ServiceManager\n} from '@jupyterlab/services';\n\nimport {\n  ArrayExt, find, map, toArray\n} from '@phosphor/algorithm';\n\nimport {\n  Token\n} from '@phosphor/coreutils';\n\nimport {\n  IDisposable\n} from '@phosphor/disposable';\n\nimport {\n  AttachedProperty\n} from '@phosphor/properties';\n\nimport {\n  ISignal, Signal\n} from '@phosphor/signaling';\n\nimport {\n  Widget\n} from '@phosphor/widgets';\n\nimport {\n  SaveHandler\n} from './savehandler';\n\nimport {\n  DocumentWidgetManager\n} from './widgetmanager';\n\n\n/* tslint:disable */\n/**\n * The document registry token.\n */\nexport\nconst IDocumentManager = new Token<IDocumentManager>('@jupyterlab/docmanager:IDocumentManager');\n/* tslint:enable */\n\n\n/**\n * The interface for a document manager.\n */\nexport\ninterface IDocumentManager extends DocumentManager {}\n\n\n/**\n * The document manager.\n *\n * #### Notes\n * The document manager is used to register model and widget creators,\n * and the file browser uses the document manager to create widgets. The\n * document manager maintains a context for each path and model type that is\n * open, and a list of widgets for each context. The document manager is in\n * control of the proper closing and disposal of the widgets and contexts.\n */\nexport\nclass DocumentManager implements IDisposable {\n  /**\n   * Construct a new document manager.\n   */\n  constructor(options: DocumentManager.IOptions) {\n    this.registry = options.registry;\n    this.services = options.manager;\n\n    this._opener = options.opener;\n\n    let widgetManager = new DocumentWidgetManager({ registry: this.registry });\n    widgetManager.activateRequested.connect(this._onActivateRequested, this);\n    this._widgetManager = widgetManager;\n  }\n\n  /**\n   * The registry used by the manager.\n   */\n  readonly registry: DocumentRegistry;\n\n  /**\n   * The service manager used by the manager.\n   */\n  readonly services: ServiceManager.IManager;\n\n  /**\n   * A signal emitted when one of the documents is activated.\n   */\n  get activateRequested(): ISignal<this, string> {\n    return this._activateRequested;\n  }\n\n  /**\n   * Whether to autosave documents.\n   */\n  get autosave(): boolean {\n    return this._autosave;\n  }\n  set autosave(value: boolean) {\n    this._autosave = value;\n    this._contexts.forEach(context => {\n      const handler = Private.saveHandlerProperty.get(context);\n      if (value === true && !handler.isActive) {\n        handler.start();\n      } else if (value === false && handler.isActive) {\n        handler.stop();\n      }\n    });\n  }\n\n  /**\n   * Get whether the document manager has been disposed.\n   */\n  get isDisposed(): boolean {\n    return this._isDisposed;\n  }\n\n  /**\n   * Dispose of the resources held by the document manager.\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    this._isDisposed = true;\n    Signal.clearData(this);\n    this._contexts.forEach(context => {\n      this._widgetManager.closeWidgets(context);\n    });\n    this._widgetManager.dispose();\n    this._contexts.length = 0;\n  }\n\n  /**\n   * Clone a widget.\n   *\n   * @param widget - The source widget.\n   *\n   * @returns A new widget or `undefined`.\n   *\n   * #### Notes\n   *  Uses the same widget factory and context as the source, or returns\n   *  `undefined` if the source widget is not managed by this manager.\n   */\n  cloneWidget(widget: Widget): DocumentRegistry.IReadyWidget | undefined {\n    return this._widgetManager.cloneWidget(widget);\n  }\n\n  /**\n   * Close all of the open documents.\n   */\n  closeAll(): Promise<void> {\n    return Promise.all(\n      toArray(map(this._contexts, context => {\n        return this._widgetManager.closeWidgets(context);\n      }))\n    ).then(() => undefined);\n  }\n\n  /**\n   * Close the widgets associated with a given path.\n   *\n   * @param path - The target path.\n   */\n  closeFile(path: string): Promise<void> {\n    let context = this._contextForPath(path);\n    if (context) {\n      return this._widgetManager.closeWidgets(context);\n    }\n    return Promise.resolve(void 0);\n  }\n\n  /**\n   * Get the document context for a widget.\n   *\n   * @param widget - The widget of interest.\n   *\n   * @returns The context associated with the widget, or `undefined`.\n   */\n  contextForWidget(widget: Widget): DocumentRegistry.Context | undefined {\n    return this._widgetManager.contextForWidget(widget);\n  }\n\n  /**\n   * Copy a file.\n   *\n   * @param fromFile - The full path of the original file.\n   *\n   * @param toDir - The full path to the target directory.\n   *\n   * @returns A promise which resolves to the contents of the file.\n   */\n  copy(fromFile: string, toDir: string): Promise<Contents.IModel> {\n    return this.services.contents.copy(fromFile, toDir);\n  }\n\n  /**\n   * Create a new file and return the widget used to view it.\n   *\n   * @param path - The file path to create.\n   *\n   * @param widgetName - The name of the widget factory to use. 'default' will use the default widget.\n   *\n   * @param kernel - An optional kernel name/id to override the default.\n   *\n   * @returns The created widget, or `undefined`.\n   *\n   * #### Notes\n   * This function will return `undefined` if a valid widget factory\n   * cannot be found.\n   */\n  createNew(path: string, widgetName='default', kernel?: Partial<Kernel.IModel>): Widget {\n    return this._createOrOpenDocument('create', path, widgetName, kernel);\n  }\n\n  /**\n   * Delete a file.\n   *\n   * @param path - The full path to the file to be deleted.\n   *\n   * @returns A promise which resolves when the file is deleted.\n   *\n   * #### Notes\n   * If there is a running session associated with the file and no other\n   * sessions are using the kernel, the session will be shut down.\n   */\n  deleteFile(path: string): Promise<void> {\n    return this.services.sessions.stopIfNeeded(path).then(() => {\n      return this.services.contents.delete(path);\n    })\n    .then(() => {\n      let context = this._contextForPath(path);\n      if (context) {\n        return this._widgetManager.deleteWidgets(context);\n      }\n      return Promise.resolve(void 0);\n    });\n  }\n\n  /**\n   * See if a widget already exists for the given path and widget name.\n   *\n   * @param path - The file path to use.\n   *\n   * @param widgetName - The name of the widget factory to use. 'default' will use the default widget.\n   *\n   * @returns The found widget, or `undefined`.\n   *\n   * #### Notes\n   * This can be used to use an existing widget instead of opening\n   * a new widget.\n   */\n  findWidget(path: string, widgetName='default'): DocumentRegistry.IReadyWidget | undefined {\n    if (widgetName === 'default') {\n      let factory = this.registry.defaultWidgetFactory(path);\n      if (!factory) {\n        return undefined;\n      }\n      widgetName = factory.name;\n    }\n    let context = this._contextForPath(path);\n    if (context) {\n      return this._widgetManager.findWidget(context, widgetName);\n    }\n    return undefined;\n  }\n\n  /**\n   * Create a new untitled file.\n   *\n   * @param options - The file content creation options.\n   */\n  newUntitled(options: Contents.ICreateOptions): Promise<Contents.IModel> {\n    if (options.type === 'file') {\n      options.ext = options.ext || '.txt';\n    }\n    return this.services.contents.newUntitled(options);\n  }\n\n  /**\n   * Open a file and return the widget used to view it.\n   *\n   * @param path - The file path to open.\n   *\n   * @param widgetName - The name of the widget factory to use. 'default' will use the default widget.\n   *\n   * @param kernel - An optional kernel name/id to override the default.\n   *\n   * @returns The created widget, or `undefined`.\n   *\n   * #### Notes\n   * This function will return `undefined` if a valid widget factory\n   * cannot be found.\n   */\n  open(path: string, widgetName='default', kernel?: Partial<Kernel.IModel>, options?: DocumentRegistry.IOpenOptions ): DocumentRegistry.IReadyWidget | undefined {\n    return this._createOrOpenDocument('open', path, widgetName, kernel, options);\n  }\n\n  /**\n   * Open a file and return the widget used to view it.\n   * Reveals an already existing editor.\n   *\n   * @param path - The file path to open.\n   *\n   * @param widgetName - The name of the widget factory to use. 'default' will use the default widget.\n   *\n   * @param kernel - An optional kernel name/id to override the default.\n   *\n   * @returns The created widget, or `undefined`.\n   *\n   * #### Notes\n   * This function will return `undefined` if a valid widget factory\n   * cannot be found.\n   */\n  openOrReveal(path: string, widgetName='default', kernel?: Partial<Kernel.IModel>, options?: DocumentRegistry.IOpenOptions ): DocumentRegistry.IReadyWidget | undefined {\n    let widget = this.findWidget(path, widgetName);\n    if (widget) {\n      this._opener.open(widget, options || {});\n      return widget;\n    }\n    return this.open(path, widgetName, kernel, options || {});\n  }\n\n  /**\n   * Overwrite a file.\n   *\n   * @param oldPath - The full path to the original file.\n   *\n   * @param newPath - The full path to the new file.\n   *\n   * @returns A promise containing the new file contents model.\n   */\n  overwrite(oldPath: string, newPath: string): Promise<Contents.IModel> {\n    // Cleanly overwrite the file by moving it, making sure the original does\n    // not exist, and then renaming to the new path.\n    const tempPath = `${newPath}.${uuid()}`;\n    const cb = () => this.rename(tempPath, newPath);\n    return this.rename(oldPath, tempPath).then(() => {\n      return this.deleteFile(newPath);\n    }).then(cb, cb);\n  }\n\n  /**\n   * Rename a file or directory.\n   *\n   * @param oldPath - The full path to the original file.\n   *\n   * @param newPath - The full path to the new file.\n   *\n   * @returns A promise containing the new file contents model.  The promise\n   * will reject if the newPath already exists.  Use [[overwrite]] to overwrite\n   * a file.\n   */\n  rename(oldPath: string, newPath: string): Promise<Contents.IModel> {\n    return this.services.contents.rename(oldPath, newPath);\n  }\n\n  /**\n   * Find a context for a given path and factory name.\n   */\n  private _findContext(path: string, factoryName: string): Private.IContext | undefined {\n    return find(this._contexts, context => {\n      return context.factoryName === factoryName && context.path === path;\n    });\n  }\n\n  /**\n   * Get a context for a given path.\n   */\n  private _contextForPath(path: string): Private.IContext | undefined {\n    return find(this._contexts, context => context.path === path);\n  }\n\n  /**\n   * Create a context from a path and a model factory.\n   */\n  private _createContext(path: string, factory: DocumentRegistry.ModelFactory, kernelPreference: IClientSession.IKernelPreference): Private.IContext {\n    // Allow options to be passed when adding a sibling.\n    let adopter = (widget: DocumentRegistry.IReadyWidget, options?: DocumentRegistry.IOpenOptions) => {\n      this._widgetManager.adoptWidget(context, widget);\n      this._opener.open(widget, options);\n    };\n    let modelDBFactory = this.services.contents.getModelDBFactory(path) || undefined;\n    let context = new Context({\n      opener: adopter,\n      manager: this.services,\n      factory,\n      path,\n      kernelPreference,\n      modelDBFactory\n    });\n    let handler = new SaveHandler({ context });\n    Private.saveHandlerProperty.set(context, handler);\n    context.ready.then(() => {\n      if (this.autosave) {\n        handler.start();\n      }\n    });\n    context.disposed.connect(this._onContextDisposed, this);\n    this._contexts.push(context);\n    return context;\n  }\n\n  /**\n   * Handle a context disposal.\n   */\n  private _onContextDisposed(context: Private.IContext): void {\n    ArrayExt.removeFirstOf(this._contexts, context);\n  }\n\n  /**\n   * Get the widget factory for a given widget name.\n   */\n  private _widgetFactoryFor(path: string, widgetName: string): DocumentRegistry.WidgetFactory | undefined {\n    let { registry } = this;\n    if (widgetName === 'default') {\n      let factory = registry.defaultWidgetFactory(path);\n      if (!factory) {\n        return undefined;\n      }\n      widgetName = factory.name;\n    }\n    return registry.getWidgetFactory(widgetName);\n  }\n\n  /**\n   * Creates a new document, or loads one from disk, depending on the `which` argument.\n   * If `which==='create'`, then it creates a new document. If `which==='open'`,\n   * then it loads the document from disk.\n   *\n   * The two cases differ in how the document context is handled, but the creation\n   * of the widget and launching of the kernel are identical.\n   */\n  private _createOrOpenDocument(which: 'open'|'create', path: string, widgetName='default', kernel?: Partial<Kernel.IModel>, options?: DocumentRegistry.IOpenOptions): DocumentRegistry.IReadyWidget | undefined {\n    let widgetFactory = this._widgetFactoryFor(path, widgetName);\n    if (!widgetFactory) {\n      return undefined;\n    }\n    let modelName = widgetFactory.modelName || 'text';\n    let factory = this.registry.getModelFactory(modelName);\n    if (!factory) {\n      return undefined;\n    }\n\n    // Handle the kernel pereference.\n    let preference = this.registry.getKernelPreference(\n      path, widgetFactory.name, kernel\n    );\n\n    let context: Private.IContext | null = null;\n    let ready: Promise<void> | null = null;\n\n    // Handle the load-from-disk case\n    if (which === 'open') {\n      // Use an existing context if available.\n      context = this._findContext(path, factory.name) || null;\n      if (!context) {\n        context = this._createContext(path, factory, preference);\n        // Populate the model, either from disk or a\n        // model backend.\n        ready = context.fromStore();\n      }\n    } else if (which === 'create') {\n      context = this._createContext(path, factory, preference);\n      // Immediately save the contents to disk.\n      ready = context.save();\n    }\n\n    let widget = this._widgetManager.createWidget(widgetFactory, context!);\n    this._opener.open(widget, options || {});\n\n    // If the initial opening of the context fails, dispose of the widget.\n    ready.catch(err => { widget.close(); });\n\n    return widget;\n  }\n\n  /**\n   * Handle an activateRequested signal from the widget manager.\n   */\n  private _onActivateRequested(sender: DocumentWidgetManager, args: string): void {\n    this._activateRequested.emit(args);\n  }\n\n  private _activateRequested = new Signal<this, string>(this);\n  private _contexts: Private.IContext[] = [];\n  private _opener: DocumentManager.IWidgetOpener;\n  private _widgetManager: DocumentWidgetManager;\n  private _isDisposed = false;\n  private _autosave = true;\n}\n\n\n/**\n * A namespace for document manager statics.\n */\nexport\nnamespace DocumentManager {\n  /**\n   * The options used to initialize a document manager.\n   */\n  export\n  interface IOptions {\n    /**\n     * A document registry instance.\n     */\n    registry: DocumentRegistry;\n\n    /**\n     * A service manager instance.\n     */\n    manager: ServiceManager.IManager;\n\n    /**\n     * A widget opener for sibling widgets.\n     */\n    opener: IWidgetOpener;\n  }\n\n  /**\n   * An interface for a widget opener.\n   */\n  export\n  interface IWidgetOpener {\n    /**\n     * Open the given widget.\n     */\n    open(widget: DocumentRegistry.IReadyWidget, options?: DocumentRegistry.IOpenOptions): void;\n  }\n}\n\n\n/**\n * A namespace for private data.\n */\nnamespace Private {\n  /**\n   * An attached property for a context save handler.\n   */\n  export\n  const saveHandlerProperty = new AttachedProperty<DocumentRegistry.Context, SaveHandler | undefined>({\n    name: 'saveHandler',\n    create: () => undefined\n  });\n\n  /**\n   * A type alias for a standard context.\n   */\n  export\n  interface IContext extends Context<DocumentRegistry.IModel> { /* no op */ }\n}\n"]}