{"version":3,"file":"dialogs.js","sourceRoot":"","sources":["../../../../docmanager/src/dialogs.ts"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,2DAA2D;;;;;;;;;;;;AAE3D,iDAE8B;AAE9B,mDAE+B;AAU/B,6CAE2B;AAO3B;;GAEG;AACH,IAAM,iBAAiB,GAAG,eAAe,CAAC;AAE1C;;GAEG;AACH,IAAM,0BAA0B,GAAG,mBAAmB,CAAC;AAmBvD;;GAEG;AACH,sBACsB,OAAyB,EAAE,OAAe;IAC9D,MAAM,CAAC,qBAAU,CAAC;QAChB,KAAK,EAAE,aAAa;QACpB,IAAI,EAAE,IAAI,aAAa,CAAC,OAAO,CAAC;QAChC,iBAAiB,EAAE,OAAO;QAC1B,OAAO,EAAE,CAAC,iBAAM,CAAC,YAAY,EAAE,EAAE,iBAAM,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC;KACvE,CAAC,CAAC,IAAI,CAAC,UAAA,MAAM;QACZ,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;YAClB,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;QACD,IAAI,QAAQ,GAAG,mBAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QACxC,IAAI,OAAO,GAAG,mBAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;QACnD,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;AACL,CAAC;AAfD,oCAeC;AAGD;;GAEG;AACH,oBACoB,OAAyB,EAAE,OAAe,EAAE,OAAe;IAC7E,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,KAAK,CAAC,UAAA,KAAK;QACjD,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACxC,MAAM,KAAK,CAAC;QACd,CAAC;QACD,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAA,KAAK;YACxC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACV,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YAC7C,CAAC;YACD,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC;AAbD,gCAaC;AAGD;;GAEG;AACH,yBACyB,IAAY;IACnC,IAAI,OAAO,GAAG;QACZ,KAAK,EAAE,iBAAiB;QACxB,IAAI,EAAE,OAAI,IAAI,kCAA8B;QAC5C,OAAO,EAAE,CAAC,iBAAM,CAAC,YAAY,EAAE,EAAE,iBAAM,CAAC,UAAU,CAAC,EAAE,KAAK,EAAE,WAAW,EAAE,CAAC,CAAC;KAC5E,CAAC;IACF,MAAM,CAAC,qBAAU,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAA,MAAM;QACpC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;AACL,CAAC;AAVD,0CAUC;AAGD;;GAEG;AACH;IAA4B,iCAAM;IAChC;;OAEG;IACH,uBAAY,OAAe;QAA3B,YACE,kBAAM,EAAE,IAAI,EAAE,OAAO,CAAC,gBAAgB,CAAC,OAAO,CAAC,EAAE,CAAC,SAKnD;QAJC,KAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC;QACjC,IAAI,GAAG,GAAG,mBAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QACnC,IAAI,KAAK,GAAG,KAAI,CAAC,SAAS,CAAC,KAAK,GAAG,mBAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAC7D,KAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC,EAAE,KAAK,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;;IACjE,CAAC;IAKD,sBAAI,oCAAS;QAHb;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAqB,CAAC;QACxE,CAAC;;;OAAA;IAED;;OAEG;IACH,gCAAQ,GAAR;QACE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;IAC9B,CAAC;IACH,oBAAC;AAAD,CAAC,AAzBD,CAA4B,gBAAM,GAyBjC;AAGD;;GAEG;AACH,IAAU,OAAO,CAuBhB;AAvBD,WAAU,OAAO;IACf;;OAEG;IACH,0BAC0B,OAAe;QACvC,IAAI,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QACzC,IAAI,aAAa,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QACpD,aAAa,CAAC,WAAW,GAAG,WAAW,CAAC;QACxC,IAAI,YAAY,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QAClD,YAAY,CAAC,WAAW,GAAG,OAAO,CAAC;QAEnC,IAAI,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QAChD,SAAS,CAAC,WAAW,GAAG,UAAU,CAAC;QACnC,SAAS,CAAC,SAAS,GAAG,0BAA0B,CAAC;QACjD,IAAI,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QAE3C,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;QAChC,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;QAC/B,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QAC5B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACvB,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAjBQ,wBAAgB,mBAiBxB,CAAA;AACH,CAAC,EAvBS,OAAO,KAAP,OAAO,QAuBhB","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  Dialog, showDialog\n} from '@jupyterlab/apputils';\n\nimport {\n  PathExt\n} from '@jupyterlab/coreutils';\n\nimport {\n  Contents\n} from '@jupyterlab/services';\n\nimport {\n  JSONObject\n} from '@phosphor/coreutils';\n\nimport {\n  Widget\n} from '@phosphor/widgets';\n\nimport {\n  IDocumentManager\n} from './';\n\n\n/**\n * The class name added to file dialogs.\n */\nconst FILE_DIALOG_CLASS = 'jp-FileDialog';\n\n/**\n * The class name added for the new name label in the rename dialog\n */\nconst RENAME_NEWNAME_TITLE_CLASS = 'jp-new-name-title';\n\n\n/**\n * A stripped-down interface for a file container.\n */\nexport\ninterface IFileContainer extends JSONObject {\n  /**\n   * The list of item names in the current working directory.\n   */\n  items: string[];\n  /**\n   * The current working directory of the file container.\n   */\n  path: string;\n}\n\n\n/**\n * Rename a file with an optional dialog.\n */\nexport\nfunction renameDialog(manager: IDocumentManager, oldPath: string): Promise<Contents.IModel | null> {\n  return showDialog({\n    title: 'Rename File',\n    body: new RenameHandler(oldPath),\n    focusNodeSelector: 'input',\n    buttons: [Dialog.cancelButton(), Dialog.okButton({ label: 'RENAME' })]\n  }).then(result => {\n    if (!result.value) {\n      return null;\n    }\n    let basePath = PathExt.dirname(oldPath);\n    let newPath = PathExt.join(basePath, result.value);\n    return renameFile(manager, oldPath, newPath);\n  });\n}\n\n\n/**\n * Rename a file with optional dialog.\n */\nexport\nfunction renameFile(manager: IDocumentManager, oldPath: string, newPath: string): Promise<Contents.IModel | null> {\n  return manager.rename(oldPath, newPath).catch(error => {\n    if (error.message.indexOf('409') === -1) {\n      throw error;\n    }\n    return shouldOverwrite(newPath).then(value => {\n      if (value) {\n        return manager.overwrite(oldPath, newPath);\n      }\n      return Promise.reject('File not renamed');\n    });\n  });\n}\n\n\n/**\n * Ask the user whether to overwrite a file.\n */\nexport\nfunction shouldOverwrite(path: string): Promise<boolean> {\n  let options = {\n    title: 'Overwrite file?',\n    body: `\"${path}\" already exists, overwrite?`,\n    buttons: [Dialog.cancelButton(), Dialog.warnButton({ label: 'OVERWRITE' })]\n  };\n  return showDialog(options).then(result => {\n    return Promise.resolve(result.button.accept);\n  });\n}\n\n\n/**\n * A widget used to rename a file.\n */\nclass RenameHandler extends Widget {\n  /**\n   * Construct a new \"rename\" dialog.\n   */\n  constructor(oldPath: string) {\n    super({ node: Private.createRenameNode(oldPath) });\n    this.addClass(FILE_DIALOG_CLASS);\n    let ext = PathExt.extname(oldPath);\n    let value = this.inputNode.value = PathExt.basename(oldPath);\n    this.inputNode.setSelectionRange(0, value.length - ext.length);\n  }\n\n  /**\n   * Get the input text node.\n   */\n  get inputNode(): HTMLInputElement {\n    return this.node.getElementsByTagName('input')[0] as HTMLInputElement;\n  }\n\n  /**\n   * Get the value of the widget.\n   */\n  getValue(): string {\n    return this.inputNode.value;\n  }\n}\n\n\n/**\n * A namespace for private data.\n */\nnamespace Private {\n  /**\n   * Create the node for a rename handler.\n   */\n  export\n  function createRenameNode(oldPath: string): HTMLElement {\n    let body = document.createElement('div');\n    let existingLabel = document.createElement('label');\n    existingLabel.textContent = 'File Path';\n    let existingPath = document.createElement('span');\n    existingPath.textContent = oldPath;\n\n    let nameTitle = document.createElement('label');\n    nameTitle.textContent = 'New Name';\n    nameTitle.className = RENAME_NEWNAME_TITLE_CLASS;\n    let name = document.createElement('input');\n\n    body.appendChild(existingLabel);\n    body.appendChild(existingPath);\n    body.appendChild(nameTitle);\n    body.appendChild(name);\n    return body;\n  }\n}\n"]}