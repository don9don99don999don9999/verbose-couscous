{"version":3,"file":"widget.js","sourceRoot":"","sources":["../../../../codeeditor/src/widget.ts"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,2DAA2D;;;;;;;;;;;;AAM3D,6CAE2B;AAO3B;;GAEG;AACH,IAAM,mBAAmB,GAAG,8BAA8B,CAAC;AAG3D;;GAEG;AACH;IACgC,qCAAM;IACpC;;OAEG;IACH,2BAAY,OAAmC;QAA/C,YACE,iBAAO,SASR;QARC,IAAM,MAAM,GAAG,KAAI,CAAC,MAAM,GAAG,OAAO,CAAC,OAAO,CAAC;YAC3C,IAAI,EAAE,KAAI,CAAC,IAAI;YACf,KAAK,EAAE,OAAO,CAAC,KAAK;YACpB,IAAI,EAAE,OAAO,CAAC,IAAI;YAClB,MAAM,EAAE,OAAO,CAAC,MAAM;YACtB,cAAc,EAAE,OAAO,CAAC,cAAc;SACvC,CAAC,CAAC;QACH,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,KAAI,CAAC,oBAAoB,EAAE,KAAI,CAAC,CAAC;;IAC3E,CAAC;IAUD,sBAAI,oCAAK;QAHT;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;QAC3B,CAAC;;;OAAA;IAED;;OAEG;IACH,mCAAO,GAAP;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACpB,MAAM,CAAC;QACT,CAAC;QACD,iBAAM,OAAO,WAAE,CAAC;QAChB,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;IACxB,CAAC;IAED;;OAEG;IACO,6CAAiB,GAA3B,UAA4B,GAAY;QACtC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;IACtB,CAAC;IAED;;OAEG;IACO,yCAAa,GAAvB,UAAwB,GAAY;QAClC,iBAAM,aAAa,YAAC,GAAG,CAAC,CAAC;QACzB,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACnB,IAAI,CAAC,MAAM,EAAE,CAAC;QAChB,CAAC;IACH,CAAC;IAED;;OAEG;IACO,uCAAW,GAArB,UAAsB,GAAY;QAChC,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;IAED;;OAEG;IACO,oCAAQ,GAAlB,UAAmB,GAAyB;QAC1C,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,IAAI,CAAC,IAAI,GAAG,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC;YACtC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAC3B,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YAC1B,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;QAC5B,CAAC;IACH,CAAC;IAED;;OAEG;IACO,2CAAe,GAAzB,UAA0B,GAAY;QACpC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;IACxB,CAAC;IAED;;OAEG;IACK,gDAAoB,GAA5B;QACQ,IAAA,+BAA2C,EAAzC,gBAAK,EAAE,YAAG,CAAgC;QAElD,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,KAAK,GAAG,CAAC,MAAM,IAAI,KAAK,CAAC,IAAI,KAAK,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;YAC3D,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,CAAC;QACrC,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,WAAW,CAAC,mBAAmB,CAAC,CAAC;QACxC,CAAC;IACH,CAAC;IACH,wBAAC;AAAD,CAAC,AA9FD,CACgC,gBAAM,GA6FrC;AA7FK,8CAAiB","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  Message\n} from '@phosphor/messaging';\n\nimport {\n  Widget\n} from '@phosphor/widgets';\n\nimport {\n  CodeEditor\n} from './';\n\n\n/**\n * The class name added to an editor widget that has a primary selection.\n */\nconst HAS_SELECTION_CLASS = 'jp-mod-has-primary-selection';\n\n\n/**\n * A widget which hosts a code editor.\n */\nexport\nclass CodeEditorWrapper extends Widget {\n  /**\n   * Construct a new code editor widget.\n   */\n  constructor(options: CodeEditorWrapper.IOptions) {\n    super();\n    const editor = this.editor = options.factory({\n      host: this.node,\n      model: options.model,\n      uuid: options.uuid,\n      config: options.config,\n      selectionStyle: options.selectionStyle\n    });\n    editor.model.selections.changed.connect(this._onSelectionsChanged, this);\n  }\n\n  /**\n   * Get the editor wrapped by the widget.\n   */\n  readonly editor: CodeEditor.IEditor;\n\n  /**\n   * Get the model used by the widget.\n   */\n  get model(): CodeEditor.IModel {\n    return this.editor.model;\n  }\n\n  /**\n   * Dispose of the resources held by the widget.\n   */\n  dispose() {\n    if (this.isDisposed) {\n      return;\n    }\n    super.dispose();\n    this.editor.dispose();\n  }\n\n  /**\n   * Handle `'activate-request'` messages.\n   */\n  protected onActivateRequest(msg: Message): void {\n    this.editor.focus();\n  }\n\n  /**\n   * A message handler invoked on an `'after-attach'` message.\n   */\n  protected onAfterAttach(msg: Message): void {\n    super.onAfterAttach(msg);\n    if (this.isVisible) {\n      this.update();\n    }\n  }\n\n  /**\n   * A message handler invoked on an `'after-show'` message.\n   */\n  protected onAfterShow(msg: Message): void {\n    this.update();\n  }\n\n  /**\n   * A message handler invoked on a `'resize'` message.\n   */\n  protected onResize(msg: Widget.ResizeMessage): void {\n    if (msg.width >= 0 && msg.height >= 0) {\n      this.editor.setSize(msg);\n    } else if (this.isVisible) {\n      this.editor.resizeToFit();\n    }\n  }\n\n  /**\n   * A message handler invoked on an `'update-request'` message.\n   */\n  protected onUpdateRequest(msg: Message): void {\n    this.editor.refresh();\n  }\n\n  /**\n   * Handle a change in model selections.\n   */\n  private _onSelectionsChanged(): void {\n    const { start, end } = this.editor.getSelection();\n\n    if (start.column !== end.column || start.line !== end.line) {\n      this.addClass(HAS_SELECTION_CLASS);\n    } else {\n      this.removeClass(HAS_SELECTION_CLASS);\n    }\n  }\n}\n\n\n/**\n * The namespace for the `CodeEditorWrapper` statics.\n */\nexport\nnamespace CodeEditorWrapper {\n  /**\n   * The options used to initialize a code editor widget.\n   */\n  export\n  interface IOptions {\n    /**\n     * A code editor factory.\n     *\n     * #### Notes\n     * The widget needs a factory and a model instead of a `CodeEditor.IEditor`\n     * object because it needs to provide its own node as the host.\n     */\n    factory: CodeEditor.Factory;\n\n    /**\n     * The model used to initialize the code editor.\n     */\n    model: CodeEditor.IModel;\n\n    /**\n     * The desired uuid for the editor.\n     */\n    uuid?: string;\n\n    /**\n     * The configuration options for the editor.\n     */\n    config?: Partial<CodeEditor.IConfig>;\n\n   /**\n    * The default selection style for the editor.\n    */\n    selectionStyle?: CodeEditor.ISelectionStyle;\n  }\n}\n"]}