{"version":3,"file":"thememanager.js","sourceRoot":"","sources":["../../../../apputils/src/thememanager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  ISettingRegistry, URLExt\n} from '@jupyterlab/coreutils';\n\nimport {\n  each\n} from '@phosphor/algorithm';\n\nimport {\n  PromiseDelegate, Token\n} from '@phosphor/coreutils';\n\nimport {\n  DisposableDelegate, IDisposable\n} from '@phosphor/disposable';\n\nimport {\n  Widget\n} from '@phosphor/widgets';\n\nimport {\n  Dialog, showDialog\n} from './dialog';\n\nimport {\n  ISplashScreen\n} from './splash';\n\n\n/* tslint:disable */\n/**\n * The theme manager token.\n */\nexport\nconst IThemeManager = new Token<IThemeManager>('@jupyterlab/apputils:IThemeManager');\n/* tslint:enable */\n\n\n/**\n * An interface for a theme manager.\n */\nexport\ninterface IThemeManager extends ThemeManager {}\n\n\n/**\n * A class that provides theme management.\n */\nexport\nclass ThemeManager {\n  /**\n   * Construct a new theme manager.\n   */\n  constructor(options: ThemeManager.IOptions) {\n    const { key, when, url, splash } = options;\n    const registry = options.settingRegistry;\n    const promises = Promise.all([registry.load(key), when]);\n    this._splash = splash;\n\n    this._baseUrl = url;\n\n    when.then(() => { this._sealed = true; });\n\n    this._host = options.host;\n    this._splashDisposable = splash.show();\n    this.ready = promises.then(([settings]) => {\n      this._settings = settings;\n      this._settings.changed.connect(this._onSettingsChanged, this);\n\n      return this._handleSettings();\n    });\n  }\n\n  /**\n   * A promise that resolves when the theme manager is ready.\n   */\n  readonly ready: Promise<void>;\n\n  /**\n   * Get the name of the current theme.\n   */\n  get theme(): string | null {\n    return this._loadedTheme;\n  }\n\n  /**\n   * The names of the registered themes.\n   */\n  get themes(): ReadonlyArray<string> {\n    return Object.keys(this._themes);\n  }\n\n  /**\n   * Set the current theme.\n   */\n  setTheme(name: string): Promise<void> {\n    return this.ready.then(() => this._settings.set('theme', name));\n  }\n\n  /**\n   * Register a theme with the theme manager.\n   *\n   * @param theme - The theme to register.\n   *\n   * @returns A disposable that can be used to unregister the theme.\n   */\n  register(theme: ThemeManager.ITheme): IDisposable {\n    if (this._sealed) {\n      throw new Error('Cannot register themes after startup');\n    }\n\n    const name = theme.name;\n\n    if (this._themes[name]) {\n      throw new Error(`Theme already registered for ${name}`);\n    }\n    this._themes[name] = theme;\n\n    return new DisposableDelegate(() => { delete this._themes[name]; });\n  }\n\n  /**\n   * Load a theme CSS file by path.\n   *\n   * @param path - The path of the file to load.\n   */\n  loadCSS(path: string): Promise<void> {\n    const link = document.createElement('link');\n    const delegate = new PromiseDelegate<void>();\n    const href = URLExt.isLocal(path) ? URLExt.join(this._baseUrl, path) : path;\n\n    link.rel = 'stylesheet';\n    link.type = 'text/css';\n    link.href = href;\n    link.addEventListener('load', () => { delegate.resolve(undefined); });\n    link.addEventListener('error', () => {\n      delegate.reject(`Stylesheet failed to load: ${href}`);\n    });\n    document.body.appendChild(link);\n    this._links.push(link);\n\n    return delegate.promise;\n  }\n\n  /**\n   * Handle a change to the settings.\n   */\n  private _onSettingsChanged(sender: ISettingRegistry.ISettings): void {\n    this._pendingTheme = sender.composite['theme'] as string;\n    if (!this._themes[this._pendingTheme]) {\n      return;\n    }\n    if (this._pendingTheme === this._loadedTheme) {\n      return;\n    }\n    if (this._loadPromise) {\n      return;\n    }\n    this._loadTheme();\n  }\n\n  /**\n   * Handle the current settings.\n   */\n  private _handleSettings(): Promise<void> {\n    const settings = this._settings;\n    let theme = settings.composite['theme'] as string;\n\n    if (!this._themes[theme]) {\n      const old = theme;\n\n      theme = settings.default('theme') as string;\n      if (!this._themes[theme]) {\n        this._onError(new Error(`Default theme \"${theme}\" did not load.`));\n      }\n      console.warn(`Could not load theme \"${old}\", using default \"${theme}\".`);\n    }\n    this._pendingTheme = theme;\n\n    return this._loadTheme().catch(reason => { this._onError(reason); });\n  }\n\n  /**\n   * Load the theme.\n   */\n  private _loadTheme(): Promise<void> {\n    let newTheme = this._themes[this._pendingTheme];\n    let oldPromise = Promise.resolve(void 0);\n    let oldTheme = this._themes[this._loadedTheme];\n    if (oldTheme) {\n      this._splashDisposable = this._splash.show();\n      oldPromise = oldTheme.unload();\n    }\n    this._pendingTheme = '';\n    this._loadPromise = oldPromise.then(() => {\n      this._links.forEach(link => {\n        if (link.parentElement) {\n          link.parentElement.removeChild(link);\n        }\n      });\n      this._links.length = 0;\n      return newTheme.load();\n    }).then(() => {\n      this._loadedTheme = newTheme.name;\n      this._finishLoad();\n    }).then(() => {\n      this._splashDisposable.dispose();\n    }).catch(error => {\n      this._onError(error);\n    });\n    return this._loadPromise;\n  }\n\n  /**\n   * Handle a load finished.\n   */\n  private _finishLoad(): void {\n    Private.fitAll(this._host);\n    this._loadPromise = null;\n\n    if (this._pendingTheme) {\n      this._loadTheme();\n    }\n  }\n\n  /**\n   * Handle a theme error.\n   */\n  private _onError(reason: any): void {\n    this._splashDisposable.dispose();\n    showDialog({\n      title: 'Error Loading Theme',\n      body: String(reason),\n      buttons: [Dialog.okButton({ label: 'OK' })]\n    });\n  }\n\n  private _baseUrl: string;\n  private _themes: { [key: string]: ThemeManager.ITheme } = {};\n  private _links: HTMLLinkElement[] = [];\n  private _host: Widget;\n  private _settings: ISettingRegistry.ISettings;\n  private _pendingTheme = '';\n  private _loadedTheme: string | null = null;\n  private _loadPromise: Promise<void> | null = null;\n  private _sealed = false;\n  private _splash: ISplashScreen;\n  private _splashDisposable: IDisposable;\n}\n\n\n/**\n * A namespace for `ThemeManager` statics.\n */\nexport\nnamespace ThemeManager {\n  /**\n   * The options used to create a theme manager.\n   */\n  export\n  interface IOptions {\n    /**\n     * The setting registry key that holds theme setting data.\n     */\n    key: string;\n\n    /**\n     * The url for local theme loading.\n     */\n    url: string;\n\n    /**\n     * The settings registry.\n     */\n    settingRegistry: ISettingRegistry;\n\n    /**\n     * The host widget for the theme manager.\n     */\n    host: Widget;\n\n    /**\n     * A promise for when all themes should have been registered.\n     */\n    when: Promise<void>;\n\n    /**\n     * The splash screen to show when loading themes.\n     */\n    splash: ISplashScreen;\n  }\n\n  /**\n   * An interface for a theme.\n   */\n  export\n  interface ITheme {\n    /**\n     * The display name of the theme.\n     */\n    name: string;\n\n    /**\n     * Load the theme.\n     *\n     * @returns A promise that resolves when the theme has loaded.\n     */\n    load(): Promise<void>;\n\n    /**\n     * Unload the theme.\n     *\n     * @returns A promise that resolves when the theme has unloaded.\n     */\n    unload(): Promise<void>;\n  }\n}\n\n\n/**\n * A namespace for module private data.\n */\nnamespace Private {\n  /**\n   * Fit a widget and all of its children, recursively.\n   */\n  export\n  function fitAll(widget: Widget): void {\n    each(widget.children(), fitAll);\n    widget.fit();\n  }\n}\n"]}