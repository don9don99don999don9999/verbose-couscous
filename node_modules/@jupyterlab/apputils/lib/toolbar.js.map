{"version":3,"file":"toolbar.js","sourceRoot":"","sources":["../../../../apputils/src/toolbar.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  IIterator, find, map\n} from '@phosphor/algorithm';\n\nimport {\n  CommandRegistry\n} from '@phosphor/commands';\n\nimport {\n  Message\n} from '@phosphor/messaging';\n\nimport {\n  AttachedProperty\n} from '@phosphor/properties';\n\nimport {\n  PanelLayout, Widget\n} from '@phosphor/widgets';\n\nimport {\n  IClientSession\n} from './clientsession';\n\nimport {\n  Styling\n} from './styling';\n\n\n/**\n * The class name added to toolbars.\n */\nconst TOOLBAR_CLASS = 'jp-Toolbar';\n\n/**\n * The class name added to toolbar items.\n */\nconst TOOLBAR_ITEM_CLASS = 'jp-Toolbar-item';\n\n/**\n * The class name added to toolbar buttons.\n */\nconst TOOLBAR_BUTTON_CLASS = 'jp-Toolbar-button';\n\n/**\n * The class name added to a pressed button.\n */\nconst TOOLBAR_PRESSED_CLASS = 'jp-mod-pressed';\n\n/**\n * The class name added to toolbar interrupt button.\n */\nconst TOOLBAR_INTERRUPT_CLASS = 'jp-StopIcon';\n\n/**\n * The class name added to toolbar restart button.\n */\nconst TOOLBAR_RESTART_CLASS = 'jp-RefreshIcon';\n\n/**\n * The class name added to toolbar kernel name text.\n */\nconst TOOLBAR_KERNEL_NAME_CLASS = 'jp-Toolbar-kernelName';\n\n/**\n * The class name added to toolbar spacer.\n */\nconst TOOLBAR_SPACER_CLASS = 'jp-Toolbar-spacer';\n\n/**\n * The class name added to toolbar kernel status icon.\n */\nconst TOOLBAR_KERNEL_STATUS_CLASS = 'jp-Toolbar-kernelStatus';\n\n/**\n * The class name added to a busy kernel indicator.\n */\nconst TOOLBAR_BUSY_CLASS = 'jp-FilledCircleIcon';\n\n\nconst TOOLBAR_IDLE_CLASS = 'jp-CircleIcon';\n\n\n\n/**\n * A class which provides a toolbar widget.\n */\nexport\nclass Toolbar<T extends Widget> extends Widget {\n  /**\n   * Construct a new toolbar widget.\n   */\n  constructor() {\n    super();\n    this.addClass(TOOLBAR_CLASS);\n    this.layout = new PanelLayout();\n  }\n\n  /**\n   * Get an iterator over the ordered toolbar item names.\n   *\n   * @returns An iterator over the toolbar item names.\n   */\n  names(): IIterator<string> {\n    let layout = this.layout as PanelLayout;\n    return map(layout.widgets, widget => {\n      return Private.nameProperty.get(widget);\n    });\n  }\n\n  /**\n   * Add an item to the end of the toolbar.\n   *\n   * @param name - The name of the widget to add to the toolbar.\n   *\n   * @param widget - The widget to add to the toolbar.\n   *\n   * @param index - The optional name of the item to insert after.\n   *\n   * @returns Whether the item was added to toolbar.  Returns false if\n   *   an item of the same name is already in the toolbar.\n   *\n   * #### Notes\n   * The item can be removed from the toolbar by setting its parent to `null`.\n   */\n  addItem(name: string, widget: T): boolean {\n    let layout = this.layout as PanelLayout;\n    return this.insertItem(layout.widgets.length, name, widget);\n  }\n\n  /**\n   * Insert an item into the toolbar at the specified index.\n   *\n   * @param index - The index at which to insert the item.\n   *\n   * @param name - The name of the item.\n   *\n   * @param widget - The widget to add.\n   *\n   * @returns Whether the item was added to the toolbar. Returns false if\n   *   an item of the same name is already in the toolbar.\n   *\n   * #### Notes\n   * The index will be clamped to the bounds of the items.\n   * The item can be removed from the toolbar by setting its parent to `null`.\n   */\n  insertItem(index: number, name: string, widget: T): boolean {\n    let existing = find(this.names(), value => value === name);\n    if (existing) {\n      return false;\n    }\n    widget.addClass(TOOLBAR_ITEM_CLASS);\n    let layout = this.layout as PanelLayout;\n    layout.insertWidget(index, widget);\n    Private.nameProperty.set(widget, name);\n    return true;\n  }\n\n  /**\n   * Handle the DOM events for the widget.\n   *\n   * @param event - The DOM event sent to the widget.\n   *\n   * #### Notes\n   * This method implements the DOM `EventListener` interface and is\n   * called in response to events on the dock panel's node. It should\n   * not be called directly by user code.\n   */\n  handleEvent(event: Event): void {\n    switch (event.type) {\n    case 'click':\n      if (!this.node.contains(document.activeElement) && this.parent) {\n        this.parent.activate();\n      }\n      break;\n    default:\n      break;\n    }\n  }\n\n  /**\n   * Handle `after-attach` messages for the widget.\n   */\n  protected onAfterAttach(msg: Message): void {\n    this.node.addEventListener('click', this);\n  }\n\n  /**\n   * Handle `before-detach` messages for the widget.\n   */\n  protected onBeforeDetach(msg: Message): void {\n    this.node.removeEventListener('click', this);\n  }\n}\n\n\n/**\n * The namespace for Toolbar class statics.\n */\nexport\nnamespace Toolbar {\n  /**\n   * Create a toolbar item for a command or `null` if the command does not exist\n   * in the registry.\n   *\n   * Notes:\n   * If the command has an icon label it will be added to the button.\n   * If there is no icon label, and no icon class, the main label will\n   * be added.\n   */\n  export\n  function createFromCommand(commands: CommandRegistry, id: string): ToolbarButton | null {\n    if (!commands.hasCommand(id)) {\n      return null;\n    }\n\n    const button = new ToolbarButton({\n      onClick: () => {\n        commands.execute(id);\n        button.node.blur();\n      },\n      className: Private.commandClassName(commands, id),\n      tooltip: Private.commandTooltip(commands, id)\n    });\n    let oldClasses = Private.commandClassName(commands, id).split(/\\s/);\n\n    (button.node as HTMLButtonElement).disabled = !commands.isEnabled(id);\n    Private.setNodeContentFromCommand(button.node, commands, id);\n\n    // Ensure that we pick up relevant changes to the command:\n    function onChange(sender: CommandRegistry, args: CommandRegistry.ICommandChangedArgs) {\n      if (args.id !== id) {\n        return;  // Not our command\n      }\n\n      if (args.type === 'removed') {\n        // Dispose of button\n        button.dispose();\n        return;\n      }\n\n      if (args.type !== 'changed') {\n        return;\n      }\n\n      // Update all fields (onClick is already indirected)\n      const newClasses = Private.commandClassName(sender, id).split(/\\s/);\n\n      for (let cls of oldClasses) {\n        if (cls && newClasses.indexOf(cls) === -1) {\n          button.removeClass(cls);\n        }\n      }\n      for (let cls of newClasses) {\n        if (cls && oldClasses.indexOf(cls) === -1) {\n          button.addClass(cls);\n        }\n      }\n      oldClasses = newClasses;\n      button.node.title = Private.commandTooltip(sender, id);\n      Private.setNodeContentFromCommand(button.node, sender, id);\n      (button.node as HTMLButtonElement).disabled = !sender.isEnabled(id);\n    }\n    commands.commandChanged.connect(onChange, button);\n\n    return button;\n  }\n\n\n  /**\n   * Create an interrupt toolbar item.\n   */\n  export\n  function createInterruptButton(session: IClientSession): ToolbarButton {\n    return new ToolbarButton({\n      className: TOOLBAR_INTERRUPT_CLASS,\n      onClick: () => {\n        if (session.kernel) {\n          session.kernel.interrupt();\n        }\n      },\n      tooltip: 'Interrupt the kernel'\n    });\n  }\n\n\n  /**\n   * Create a restart toolbar item.\n   */\n  export\n  function createRestartButton(session: IClientSession): ToolbarButton {\n    return new ToolbarButton({\n      className: TOOLBAR_RESTART_CLASS,\n      onClick: () => {\n        session.restart();\n      },\n      tooltip: 'Restart the kernel'\n    });\n  }\n\n\n  /**\n   * Create a toolbar spacer item.\n   *\n   * #### Notes\n   * It is a flex spacer that separates the left toolbar items\n   * from the right toolbar items.\n   */\n  export\n  function createSpacerItem(): Widget {\n    return new Private.Spacer();\n  }\n\n\n  /**\n   * Create a kernel name indicator item.\n   *\n   * #### Notes\n   * It will display the `'display_name`' of the current kernel,\n   * or `'No Kernel!'` if there is no kernel.\n   * It can handle a change in context or kernel.\n   */\n  export\n  function createKernelNameItem(session: IClientSession): ToolbarButton {\n    return new Private.KernelName(session);\n  }\n\n\n  /**\n   * Create a kernel status indicator item.\n   *\n   * #### Notes\n   * It show display a busy status if the kernel status is\n   * not idle.\n   * It will show the current status in the node title.\n   * It can handle a change to the context or the kernel.\n   */\n  export\n  function createKernelStatusItem(session: IClientSession): Widget {\n    return new Private.KernelStatus(session);\n  }\n}\n\n\n/**\n * A widget which acts as a button in a toolbar.\n */\nexport\nclass ToolbarButton extends Widget {\n  /**\n   * Construct a new toolbar button.\n   */\n  constructor(options: ToolbarButton.IOptions = {}) {\n    super({ node: document.createElement('button') });\n    Styling.styleNodeByTag(this.node, 'button');\n    this.addClass(TOOLBAR_BUTTON_CLASS);\n    this._onClick = options.onClick || Private.noOp;\n\n    const classes = options.className ?\n      options.className.trim().replace(/\\s{2,}/g, ' ').split(/\\s/) : null;\n\n    if (classes) {\n      classes.forEach(name => { this.addClass(name); });\n    }\n\n    this.node.title = options.tooltip || '';\n  }\n\n  /**\n   * Handle the DOM events for the widget.\n   *\n   * @param event - The DOM event sent to the widget.\n   *\n   * #### Notes\n   * This method implements the DOM `EventListener` interface and is\n   * called in response to events on the dock panel's node. It should\n   * not be called directly by user code.\n   */\n  handleEvent(event: Event): void {\n    switch (event.type) {\n    case 'click':\n      if ((event as MouseEvent).button === 0) {\n        this._onClick();\n      }\n      break;\n    case 'mousedown':\n      this.addClass(TOOLBAR_PRESSED_CLASS);\n      break;\n    case 'mouseup':\n    case 'mouseout':\n      this.removeClass(TOOLBAR_PRESSED_CLASS);\n      break;\n    default:\n      break;\n    }\n  }\n\n  /**\n   * Handle `after-attach` messages for the widget.\n   */\n  protected onAfterAttach(msg: Message): void {\n    this.node.addEventListener('click', this);\n    this.node.addEventListener('mousedown', this);\n    this.node.addEventListener('mouseup', this);\n    this.node.addEventListener('mouseout', this);\n  }\n\n  /**\n   * Handle `before-detach` messages for the widget.\n   */\n  protected onBeforeDetach(msg: Message): void {\n    this.node.removeEventListener('click', this);\n    this.node.removeEventListener('mousedown', this);\n    this.node.removeEventListener('mouseup', this);\n    this.node.removeEventListener('mouseout', this);\n  }\n\n  private _onClick: () => void;\n}\n\n\n/**\n * A namespace for `ToolbarButton` statics.\n */\nexport\nnamespace ToolbarButton {\n  /**\n   * The options used to construct a toolbar button.\n   */\n  export\n  interface IOptions {\n    /**\n     * The callback for a click event.\n     */\n    onClick?: () => void;\n\n    /**\n     * The class name added to the button.\n     */\n    className?: string;\n\n    /**\n     * The tooltip added to the button node.\n     */\n    tooltip?: string;\n  }\n}\n\n\n/**\n * A namespace for private data.\n */\nnamespace Private {\n  /**\n   * An attached property for the name of a toolbar item.\n   */\n  export\n  const nameProperty = new AttachedProperty<Widget, string>({\n    name: 'name',\n    create: () => ''\n  });\n\n  /**\n   * ToolbarButton tooltip formatter for a command.\n   */\n  export\n  function commandTooltip(commands: CommandRegistry, id: string): string {\n    return commands.caption(id);\n  }\n\n  /**\n   * A no-op function.\n   */\n  export\n  function noOp() { /* no-op */ }\n\n  /**\n   * Get the class names for a command based ToolBarButton\n   */\n  export\n  function commandClassName(commands: CommandRegistry, id: string): string {\n    let name = commands.className(id);\n    // Add the boolean state classes.\n    if (commands.isToggled(id)) {\n      name += ' p-mod-toggled';\n    }\n    if (!commands.isVisible(id)) {\n      name += ' p-mod-hidden';\n    }\n    return name;\n  }\n\n  /**\n   * Fill the node of a command based ToolBarButton.\n   */\n  export\n  function setNodeContentFromCommand(node: HTMLElement, commands: CommandRegistry, id: string): void {\n    const iconClass = commands.iconClass(id);\n    const iconLabel = commands.iconLabel(id);\n    const label = commands.label(id);\n\n    node.innerHTML = '';\n    if (iconClass) {\n      node.className += ` ${iconClass}`;\n      node.setAttribute('title', iconLabel || label);\n    } else {\n      node.innerText = label;\n    }\n  }\n\n  /**\n   * A spacer widget.\n   */\n  export\n  class Spacer extends Widget {\n    /**\n     * Construct a new spacer widget.\n     */\n    constructor() {\n      super();\n      this.addClass(TOOLBAR_SPACER_CLASS);\n    }\n  }\n\n  /**\n   * A kernel name widget.\n   */\n  export\n  class KernelName extends ToolbarButton {\n    /**\n     * Construct a new kernel name widget.\n     */\n    constructor(session: IClientSession) {\n      super({\n        className: TOOLBAR_KERNEL_NAME_CLASS,\n        onClick: () => {\n          session.selectKernel();\n        },\n        tooltip: 'Switch kernel'\n        });\n      this._onKernelChanged(session);\n      session.kernelChanged.connect(this._onKernelChanged, this);\n    }\n\n    /**\n     * Update the text of the kernel name item.\n     */\n    private _onKernelChanged(session: IClientSession): void {\n      this.node.textContent = session.kernelDisplayName;\n    }\n  }\n\n  /**\n   * A toolbar item that displays kernel status.\n   */\n  export\n  class KernelStatus extends Widget {\n    /**\n     * Construct a new kernel status widget.\n     */\n    constructor(session: IClientSession) {\n      super();\n      this.addClass(TOOLBAR_KERNEL_STATUS_CLASS);\n      this._onStatusChanged(session);\n      session.statusChanged.connect(this._onStatusChanged, this);\n    }\n\n    /**\n     * Handle a status on a kernel.\n     */\n    private _onStatusChanged(session: IClientSession) {\n      if (this.isDisposed) {\n        return;\n      }\n      let status = session.status;\n      this.toggleClass(TOOLBAR_IDLE_CLASS, status === 'idle');\n      this.toggleClass(TOOLBAR_BUSY_CLASS, status !== 'idle');\n      let title = 'Kernel ' + status[0].toUpperCase() + status.slice(1);\n      this.node.title = title;\n    }\n  }\n}\n"]}