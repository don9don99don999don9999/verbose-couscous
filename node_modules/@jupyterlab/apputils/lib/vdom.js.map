{"version":3,"file":"vdom.js","sourceRoot":"","sources":["../../../../apputils/src/vdom.ts"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,2DAA2D;;;;;;;;;;;;AAU3D,iDAE6B;AAE7B,6CAE2B;AAI3B,oCAAsC;AAGtC;;GAEG;AACH;IAC0E,gCAAM;IADhF;QAAA,qEA+EC;QADS,mBAAa,GAAG,IAAI,kBAAM,CAAa,KAAI,CAAC,CAAC;;IACvD,CAAC;IA1EC,sBAAI,sCAAY;QAHhB;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;QAC5B,CAAC;;;OAAA;IAKD,sBAAI,+BAAK;QAgBT;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QACrB,CAAC;QAxBD;;WAEG;aACH,UAAU,QAAkB;YAC1B,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,QAAQ,CAAC,CAAC,CAAC;gBAC7B,MAAM,CAAC;YACT,CAAC;YAED,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gBAChB,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;YACzD,CAAC;YACD,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC;YACvB,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACb,QAAQ,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;YACnD,CAAC;YACD,IAAI,CAAC,MAAM,EAAE,CAAC;YACd,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;QAClC,CAAC;;;OAAA;IASD;;OAEG;IACH,8BAAO,GAAP;QACE,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACnB,iBAAM,OAAO,WAAE,CAAC;IAClB,CAAC;IAED;;;;;OAKG;IACO,sCAAe,GAAzB,UAA0B,GAAY;QACpC,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;QAC1B,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACzB,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QACpC,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,QAAQ,CAAC,MAAM,CAAM,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QACzC,CAAC;IACH,CAAC;IAED;;;OAGG;IACO,oCAAa,GAAvB,UAAwB,GAAY;QAClC,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;IAeH,mBAAC;AAAD,CAAC,AA/ED,CAC0E,gBAAM,GA8E/E;AA9Ec,oCAAY;AAmG3B;;GAEG;AACH;IAAA;QAEE;;WAEG;QACM,iBAAY,GAAG,IAAI,kBAAM,CAAa,IAAI,CAAC,CAAC;QAoB7C,gBAAW,GAAG,KAAK,CAAC;IAC9B,CAAC;IAhBC,sBAAI,iCAAU;QAHd;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;QAC1B,CAAC;;;OAAA;IAED;;OAEG;IACH,2BAAO,GAAP;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACpB,MAAM,CAAC;QACT,CAAC;QACD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,kBAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IACzB,CAAC;IAGH,gBAAC;AAAD,CAAC,AA1BD,IA0BC;AAzBK,8BAAS","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  IDisposable\n} from '@phosphor/disposable';\n\nimport {\n  Message\n} from '@phosphor/messaging';\n\nimport {\n  ISignal, Signal\n} from '@phosphor/signaling';\n\nimport {\n  Widget\n} from '@phosphor/widgets';\n\nimport * as React from 'react';\n\nimport * as ReactDOM from 'react-dom';\n\n\n/**\n * Phosphor widget that encodes best practices for VDOM based rendering.\n */\nexport\nabstract class VDomRenderer<T extends VDomRenderer.IModel | null> extends Widget {\n  /**\n   * A signal emited when the model changes.\n   */\n  get modelChanged(): ISignal<this, void> {\n    return this._modelChanged;\n  }\n\n  /**\n   * Set the model and fire changed signals.\n   */\n  set model(newValue: T | null) {\n    if (this._model === newValue) {\n      return;\n    }\n\n    if (this._model) {\n      this._model.stateChanged.disconnect(this.update, this);\n    }\n    this._model = newValue;\n    if (newValue) {\n      newValue.stateChanged.connect(this.update, this);\n    }\n    this.update();\n    this._modelChanged.emit(void 0);\n  }\n\n  /**\n   * Get the current model.\n   */\n  get model(): T | null {\n    return this._model;\n  }\n\n  /**\n   * Dispose this widget.\n   */\n  dispose() {\n    this._model = null;\n    super.dispose();\n  }\n\n  /**\n   * Called to update the state of the widget.\n   *\n   * The default implementation of this method triggers\n   * VDOM based rendering by calling the this.render() method.\n   */\n  protected onUpdateRequest(msg: Message): void {\n    let vnode = this.render();\n    if (Array.isArray(vnode)) {\n      ReactDOM.render(vnode, this.node);\n    } else {\n      ReactDOM.render<any>(vnode, this.node);\n    }\n  }\n\n  /* Called after the widget is attached to the DOM\n   *\n   * Make sure the widget is rendered, even if the model has not changed.\n   */\n  protected onAfterAttach(msg: Message): void {\n    this.update();\n  }\n\n  /**\n   * Render the content of this widget using the virtual DOM.\n   *\n   * This method will be called anytime the widget needs to be rendered,\n   * which includes layout triggered rendering and all model changes.\n   *\n   * Subclasses should define this method and use the current model state\n   * to create a virtual node or nodes to render.\n   */\n  protected abstract render(): Array<React.ReactElement<any>> | React.ReactElement<any> | null;\n\n  private _model: T | null;\n  private _modelChanged = new Signal<this, void>(this);\n}\n\n\n/**\n * The namespace for VDomRenderer statics.\n */\nexport\nnamespace VDomRenderer {\n  /**\n   * An interface for a model to be used with vdom rendering.\n   */\n  export\n  interface IModel extends IDisposable {\n    /**\n     * A signal emited when any model state changes.\n     */\n    readonly stateChanged: ISignal<this, void>;\n  }\n}\n\n\n/**\n * Concrete implementation of VDomRenderer model.\n */\nexport\nclass VDomModel implements VDomRenderer.IModel {\n  /**\n   * A signal emitted when any model state changes.\n   */\n  readonly stateChanged = new Signal<this, void>(this);\n\n  /**\n   * Test whether the model is disposed.\n   */\n  get isDisposed(): boolean {\n    return this._isDisposed;\n  }\n\n  /**\n   * Dispose the model.\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    this._isDisposed = true;\n    Signal.clearData(this);\n  }\n\n  private _isDisposed = false;\n}\n"]}