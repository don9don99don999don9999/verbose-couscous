{"version":3,"file":"mainareawidget.js","sourceRoot":"","sources":["../../../../apputils/src/mainareawidget.ts"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,2DAA2D;;;;;;;;;;;;AAM3D,6CAE2B;AAG3B;;GAEG;AACH;IAC6B,kCAAM;IACjC;;;;OAIG;IACH,wBAAY,OAAqC;QAArC,wBAAA,EAAA,YAAqC;QAAjD,YACE,kBAAM,OAAO,CAAC,SAIf;QAHC,KAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC;QACxB,KAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,CAAC;QACnC,KAAI,CAAC,MAAM,GAAG,OAAO,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;;IAC9C,CAAC;IAED;;OAEG;IACO,0CAAiB,GAA3B,UAA4B,GAAY;QACtC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;IACpB,CAAC;IAED;;OAEG;IACO,uCAAc,GAAxB,UAAyB,GAAY;QACnC,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IACH,qBAAC;AAAD,CAAC,AA3BD,CAC6B,gBAAM,GA0BlC;AA1BK,wCAAc;AA+CpB;;GAEG;AACH,IAAU,OAAO,CAQhB;AARD,WAAU,OAAO;IACf;;OAEG;IACH,sBACsB,OAAgC;QACpD,MAAM,CAAC,OAAO,CAAC,MAAM,IAAI,IAAI,qBAAW,EAAE,CAAC;IAC7C,CAAC;IAFQ,oBAAY,eAEpB,CAAA;AACH,CAAC,EARS,OAAO,KAAP,OAAO,QAQhB","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  Message\n} from '@phosphor/messaging';\n\nimport {\n  Layout, PanelLayout, Widget\n} from '@phosphor/widgets';\n\n\n/**\n * A widget which handles tab events according to JupyterLab convention.\n */\nexport\nclass MainAreaWidget extends Widget {\n  /**\n   * Construct a new main area widget.\n   *\n   * @param options - The options for initializing the widget.\n   */\n  constructor(options: MainAreaWidget.IOptions = {}) {\n    super(options);\n    this.node.tabIndex = -1;\n    this.addClass('jp-MainAreaWidget');\n    this.layout = Private.createLayout(options);\n  }\n\n  /**\n   * Handle `'activate-request'` messages.\n   */\n  protected onActivateRequest(msg: Message): void {\n    this.node.focus();\n  }\n\n  /**\n   * Handle `'close-request'` messages.\n   */\n  protected onCloseRequest(msg: Message): void {\n    this.dispose();\n  }\n}\n\n/**\n * The namespace for the `MainAreaWidget` class statics.\n */\nexport\nnamespace MainAreaWidget {\n  /**\n   * An options object for creating a main area widget.\n   */\n  export\n  interface IOptions extends Widget.IOptions {\n    /**\n     * The layout to use for the main area widget.\n     *\n     * The default is a new `PanelLayout`.\n     */\n    layout?: Layout;\n  }\n}\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * Create a layout for the given options.\n   */\n  export\n  function createLayout(options: MainAreaWidget.IOptions): Layout {\n    return options.layout || new PanelLayout();\n  }\n}\n"]}