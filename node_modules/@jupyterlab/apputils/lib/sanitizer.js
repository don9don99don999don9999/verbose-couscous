"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
var sanitize = require("sanitize-html");
/**
 * A class to sanitize HTML strings.
 */
var Sanitizer = /** @class */ (function () {
    function Sanitizer() {
        this._options = {
            allowedTags: sanitize.defaults.allowedTags
                .concat('h1', 'h2', 'img', 'span', 'audio', 'video', 'del'),
            allowedAttributes: {
                // Allow the "rel" attribute for <a> tags.
                'a': sanitize.defaults.allowedAttributes['a'].concat('rel'),
                // Allow the "src" attribute for <img> tags.
                'img': ['src', 'height', 'width', 'alt'],
                // Allow "class" attribute for <code> tags.
                'code': ['class'],
                // Allow "class" attribute for <span> tags.
                'span': ['class'],
                // Allow "class" attribute for <div> tags.
                'div': ['class'],
                // Allow "class" attribute for <p> tags.
                'p': ['class'],
                // Allow "class" attribute for <pre> tags.
                'pre': ['class'],
                // Allow the "src" attribute for <audio> tags.
                'audio': ['src', 'autoplay', 'loop', 'muted', 'controls'],
                // Allow the "src" attribute for <video> tags.
                'video': ['src', 'height', 'width', 'autoplay',
                    'loop', 'muted', 'controls']
            },
            transformTags: {
                // Set the "rel" attribute for <a> tags to "nofollow".
                'a': sanitize.simpleTransform('a', { 'rel': 'nofollow' })
            }
        };
    }
    /**
     * Sanitize an HTML string.
     *
     * @param dirty - The dirty text.
     *
     * @param options - The optional sanitization options.
     *
     * @returns The sanitized string.
     */
    Sanitizer.prototype.sanitize = function (dirty, options) {
        return sanitize(dirty, __assign({}, this._options, options || {}));
    };
    return Sanitizer;
}());
/**
 * The default instance of an `ISanitizer` meant for use by user code.
 */
exports.defaultSanitizer = new Sanitizer();
