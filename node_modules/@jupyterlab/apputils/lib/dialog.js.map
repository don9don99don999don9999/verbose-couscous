{"version":3,"file":"dialog.js","sourceRoot":"","sources":["../../../../apputils/src/dialog.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  ArrayExt, each, map, toArray\n} from '@phosphor/algorithm';\n\nimport {\n  PromiseDelegate\n} from '@phosphor/coreutils';\n\nimport {\n  Message\n} from '@phosphor/messaging';\n\nimport {\n  VirtualDOM, VirtualElement, h\n} from '@phosphor/virtualdom';\n\nimport {\n  PanelLayout, Panel, Widget\n} from '@phosphor/widgets';\n\nimport {\n  Styling\n} from './styling';\n\n\n/**\n * Create and show a dialog.\n *\n * @param options - The dialog setup options.\n *\n * @returns A promise that resolves with whether the dialog was accepted.\n */\nexport\nfunction showDialog<T>(options: Partial<Dialog.IOptions<T>>={}): Promise<Dialog.IResult<T>> {\n  let dialog = new Dialog(options);\n  return dialog.launch();\n}\n\n/**\n * Show an error message dialog.\n *\n * @param title - The title of the dialog box.\n *\n * @param error - the error to show in the dialog body (either a string\n *   or an object with a string `message` property).\n */\nexport\nfunction showErrorMessage(title: string, error: any): Promise<void> {\n  console.error(error);\n  let options = {\n    title: title,\n    body: error.message || title,\n    buttons: [Dialog.okButton()],\n    okText: 'DISMISS'\n  };\n  return showDialog(options).then(() => { /* no-op */ });\n}\n\n/**\n * A modal dialog widget.\n */\nexport\nclass Dialog<T> extends Widget {\n  /**\n   * Create a dialog panel instance.\n   *\n   * @param options - The dialog setup options.\n   */\n  constructor(options: Partial<Dialog.IOptions<T>> = { }) {\n    super();\n    this.addClass('jp-Dialog');\n    let normalized = Private.handleOptions(options);\n    let renderer = normalized.renderer;\n\n    this._host = normalized.host;\n    this._defaultButton = normalized.defaultButton;\n    this._buttons = normalized.buttons;\n    this._buttonNodes = toArray(map(this._buttons, button => {\n      return renderer.createButtonNode(button);\n    }));\n\n    let layout = this.layout = new PanelLayout();\n    let content = new Panel();\n    content.addClass('jp-Dialog-content');\n    layout.addWidget(content);\n\n    this._body = normalized.body;\n\n    let header = renderer.createHeader(normalized.title);\n    let body = renderer.createBody(normalized.body);\n    let footer = renderer.createFooter(this._buttonNodes);\n    content.addWidget(header);\n    content.addWidget(body);\n    content.addWidget(footer);\n\n    this._primary = this._buttonNodes[this._defaultButton];\n\n    if (options.focusNodeSelector) {\n      let el = body.node.querySelector(options.focusNodeSelector);\n      if (el) {\n        this._primary = el as HTMLElement;\n      }\n    }\n  }\n\n  /**\n   * Dispose of the resources used by the dialog.\n   */\n  dispose(): void {\n    const promise = this._promise;\n    if (promise) {\n      this._promise = null;\n      promise.reject(void 0);\n      ArrayExt.removeFirstOf(Private.launchQueue, promise.promise);\n    }\n    super.dispose();\n  }\n\n  /**\n   * Launch the dialog as a modal window.\n   *\n   * @returns a promise that resolves with the result of the dialog.\n   */\n  launch(): Promise<Dialog.IResult<T>> {\n    // Return the existing dialog if already open.\n    if (this._promise) {\n      return this._promise.promise;\n    }\n    const promise = this._promise = new PromiseDelegate<Dialog.IResult<T>>();\n    let promises = Promise.all(Private.launchQueue);\n    Private.launchQueue.push(this._promise.promise);\n    return promises.then(() => {\n      Widget.attach(this, this._host);\n      return promise.promise;\n    });\n  }\n\n  /**\n   * Resolve the current dialog.\n   *\n   * @param index - An optional index to the button to resolve.\n   *\n   * #### Notes\n   * Will default to the defaultIndex.\n   * Will resolve the current `show()` with the button value.\n   * Will be a no-op if the dialog is not shown.\n   */\n  resolve(index?: number): void {\n    if (!this._promise) {\n      return;\n    }\n    if (index === undefined) {\n      index = this._defaultButton;\n    }\n    this._resolve(this._buttons[index]);\n  }\n\n  /**\n   * Reject the current dialog with a default reject value.\n   *\n   * #### Notes\n   * Will be a no-op if the dialog is not shown.\n   */\n  reject(): void {\n    if (!this._promise) {\n      return;\n    }\n    this._resolve(Dialog.cancelButton());\n  }\n\n  /**\n   * Handle the DOM events for the directory listing.\n   *\n   * @param event - The DOM event sent to the widget.\n   *\n   * #### Notes\n   * This method implements the DOM `EventListener` interface and is\n   * called in response to events on the panel's DOM node. It should\n   * not be called directly by user code.\n   */\n  handleEvent(event: Event): void {\n    switch (event.type) {\n    case 'keydown':\n      this._evtKeydown(event as KeyboardEvent);\n      break;\n    case 'click':\n      this._evtClick(event as MouseEvent);\n      break;\n    case 'focus':\n      this._evtFocus(event as FocusEvent);\n      break;\n    case 'contextmenu':\n      event.preventDefault();\n      event.stopPropagation();\n      break;\n    default:\n      break;\n    }\n  }\n\n  /**\n   *  A message handler invoked on a `'before-attach'` message.\n   */\n  protected onAfterAttach(msg: Message): void {\n    let node = this.node;\n    node.addEventListener('keydown', this, true);\n    node.addEventListener('contextmenu', this, true);\n    node.addEventListener('click', this, true);\n    document.addEventListener('focus', this, true);\n    this._first = Private.findFirstFocusable(this.node);\n    this._original = document.activeElement as HTMLElement;\n    this._primary.focus();\n  }\n\n  /**\n   *  A message handler invoked on a `'after-detach'` message.\n   */\n  protected onAfterDetach(msg: Message): void {\n    let node = this.node;\n    node.removeEventListener('keydown', this, true);\n    node.removeEventListener('contextmenu', this, true);\n    node.removeEventListener('click', this, true);\n    document.removeEventListener('focus', this, true);\n    this._original.focus();\n  }\n\n  /**\n   * A message handler invoked on a `'close-request'` message.\n   */\n  protected onCloseRequest(msg: Message): void {\n    if (this._promise) {\n      this.reject();\n    }\n    super.onCloseRequest(msg);\n  }\n\n  /**\n   * Handle the `'click'` event for a dialog button.\n   *\n   * @param event - The DOM event sent to the widget\n   */\n  protected _evtClick(event: MouseEvent): void {\n    let content = this.node.getElementsByClassName('jp-Dialog-content')[0] as HTMLElement;\n    if (!content.contains(event.target as HTMLElement)) {\n      event.stopPropagation();\n      event.preventDefault();\n      return;\n    }\n    for (let buttonNode of this._buttonNodes) {\n      if (buttonNode.contains(event.target as HTMLElement)) {\n        let index = this._buttonNodes.indexOf(buttonNode);\n        this.resolve(index);\n      }\n    }\n  }\n\n  /**\n   * Handle the `'keydown'` event for the widget.\n   *\n   * @param event - The DOM event sent to the widget\n   */\n  protected _evtKeydown(event: KeyboardEvent): void {\n    // Check for escape key\n    switch (event.keyCode) {\n    case 27:  // Escape.\n      event.stopPropagation();\n      event.preventDefault();\n      this.reject();\n      break;\n    case 9:  // Tab.\n      // Handle a tab on the last button.\n      let node = this._buttonNodes[this._buttons.length - 1];\n      if (document.activeElement === node && !event.shiftKey) {\n        event.stopPropagation();\n        event.preventDefault();\n        this._first.focus();\n      }\n      break;\n    case 13:  // Enter.\n      event.stopPropagation();\n      event.preventDefault();\n      this.resolve();\n      break;\n    default:\n      break;\n    }\n  }\n\n  /**\n   * Handle the `'focus'` event for the widget.\n   *\n   * @param event - The DOM event sent to the widget\n   */\n  protected _evtFocus(event: FocusEvent): void {\n    let target = event.target as HTMLElement;\n    if (!this.node.contains(target as HTMLElement)) {\n      event.stopPropagation();\n      this._buttonNodes[this._defaultButton].focus();\n    }\n  }\n\n  /**\n   * Resolve a button item.\n   */\n  private _resolve(button: Dialog.IButton): void {\n    // Prevent loopback.\n    const promise = this._promise;\n    if (!promise) {\n      this.dispose();\n      return;\n    }\n    this._promise = null;\n    ArrayExt.removeFirstOf(Private.launchQueue, promise.promise);\n    let body = this._body;\n    let value: T | null = null;\n    if (button.accept && body instanceof Widget && typeof body.getValue === 'function') {\n      value = body.getValue();\n    }\n    this.dispose();\n    promise.resolve({ button, value });\n  }\n\n  private _buttonNodes: ReadonlyArray<HTMLElement>;\n  private _buttons: ReadonlyArray<Dialog.IButton>;\n  private _original: HTMLElement;\n  private _first: HTMLElement;\n  private _primary: HTMLElement;\n  private _promise: PromiseDelegate<Dialog.IResult<T>> | null;\n  private _defaultButton: number;\n  private _host: HTMLElement;\n  private _body: Dialog.BodyType<T>;\n}\n\n\n/**\n * The namespace for Dialog class statics.\n */\nexport\nnamespace Dialog {\n  /**\n   * The options used to create a dialog.\n   */\n  export\n  interface IOptions<T> {\n    /**\n     * The top level text for the dialog.  Defaults to an empty string.\n     */\n    title: HeaderType;\n\n    /**\n     * The main body element for the dialog or a message to display.\n     * Defaults to an empty string.\n     *\n     * #### Notes\n     * If a widget is given as the body, it will be disposed after the\n     * dialog is resolved.  If the widget has a `getValue()` method,\n     * the method will be called prior to disposal and the value\n     * will be provided as part of the dialog result.\n     * A string argument will be used as raw `textContent`.\n     * All `input` and `select` nodes will be wrapped and styled.\n     */\n    body: BodyType<T>;\n\n    /**\n     * The host element for the dialog. Defaults to `document.body`.\n     */\n    host: HTMLElement;\n\n    /**\n     * The to buttons to display. Defaults to cancel and accept buttons.\n     */\n    buttons: ReadonlyArray<IButton>;\n\n    /**\n     * The index of the default button.  Defaults to the last button.\n     */\n    defaultButton: number;\n\n    /**\n     * A selector for the primary element that should take focus in the dialog.\n     * Defaults to an empty string, causing the [[defaultButton]] to take\n     * focus.\n     */\n    focusNodeSelector: string;\n\n    /**\n     * An optional renderer for dialog items.  Defaults to a shared\n     * default renderer.\n     */\n    renderer: IRenderer;\n  }\n\n  /**\n   * The options used to make a button item.\n   */\n  export\n  interface IButton {\n    /**\n     * The label for the button.\n     */\n    label: string;\n\n    /**\n     * The icon class for the button.\n     */\n    iconClass: string;\n\n    /**\n     * The icon label for the button.\n     */\n    iconLabel: string;\n\n    /**\n     * The caption for the button.\n     */\n    caption: string;\n\n    /**\n     * The extra class name for the button.\n     */\n    className: string;\n\n    /**\n     * The dialog action to perform when the button is clicked.\n     */\n    accept: boolean;\n\n    /**\n     * The button display type.\n     */\n    displayType: 'default' | 'warn';\n  }\n\n  /**\n   * The options used to create a button.\n   */\n  export\n  type ButtonOptions = Partial<IButton>;\n\n  /**\n   * The header input types.\n   */\n  export\n  type HeaderType = VirtualElement | string;\n\n  /**\n   * The result of a dialog.\n   */\n  export\n  interface IResult<T> {\n    /**\n     * The button that was pressed.\n     */\n    button: IButton;\n\n    /**\n     * The value retrieved from `.getValue()` if given on the widget.\n     */\n    value: T | null;\n  }\n\n  /**\n   * A widget used as a dialog body.\n   */\n  export\n  interface IBodyWidget<T = string> extends Widget {\n    /**\n     * Get the serialized value of the widget.\n     */\n    getValue?(): T;\n  }\n\n  /**\n   * The body input types.\n   */\n  export\n  type BodyType<T> = IBodyWidget<T> | VirtualElement | string;\n\n  /**\n   * Create an accept button.\n   */\n  export\n  function okButton(options: ButtonOptions = {}): Readonly<IButton> {\n    options.accept = true;\n    return createButton(options);\n  }\n\n  /**\n   * Create a reject button.\n   */\n  export\n  function cancelButton(options: ButtonOptions = {}): Readonly<IButton>  {\n    options.accept = false;\n    return createButton(options);\n  }\n\n  /**\n   * Create a warn button.\n   */\n  export\n  function warnButton(options: ButtonOptions = {}): Readonly<IButton>  {\n    options.displayType = 'warn';\n    return createButton(options);\n  }\n\n  /**\n   * Create a button item.\n   */\n  export\n  function createButton(value: Dialog.ButtonOptions): Readonly<IButton>  {\n    value.accept = value.accept !== false;\n    let defaultLabel = value.accept ? 'OK' : 'CANCEL';\n    return {\n      label: value.label || defaultLabel,\n      iconClass: value.iconClass || '',\n      iconLabel: value.iconLabel || '',\n      caption: value.caption || '',\n      className: value.className || '',\n      accept: value.accept,\n      displayType: value.displayType || 'default'\n    };\n  }\n\n  /**\n   * A dialog renderer.\n   */\n  export\n  interface IRenderer {\n    /**\n     * Create the header of the dialog.\n     *\n     * @param title - The title of the dialog.\n     *\n     * @returns A widget for the dialog header.\n     */\n    createHeader(title: HeaderType): Widget;\n\n    /**\n     * Create the body of the dialog.\n     *\n     * @param value - The input value for the body.\n     *\n     * @returns A widget for the body.\n     */\n    createBody(body: BodyType<any>): Widget;\n\n    /**\n     * Create the footer of the dialog.\n     *\n     * @param buttons - The button nodes to add to the footer.\n     *\n     * @returns A widget for the footer.\n     */\n    createFooter(buttons: ReadonlyArray<HTMLElement>): Widget;\n\n    /**\n     * Create a button node for the dialog.\n     *\n     * @param button - The button data.\n     *\n     * @returns A node for the button.\n     */\n    createButtonNode(button: IButton): HTMLElement;\n  }\n\n  /**\n   * The default implementation of a dialog renderer.\n   */\n  export\n  class Renderer {\n    /**\n     * Create the header of the dialog.\n     *\n     * @param title - The title of the dialog.\n     *\n     * @returns A widget for the dialog header.\n     */\n    createHeader(title: HeaderType): Widget {\n      let header: Widget;\n      if (typeof title === 'string') {\n        header = new Widget({ node: document.createElement('span') });\n        header.node.textContent = title;\n      } else {\n        header = new Widget({ node: VirtualDOM.realize(title) });\n      }\n      header.addClass('jp-Dialog-header');\n      Styling.styleNode(header.node);\n      return header;\n    }\n\n    /**\n     * Create the body of the dialog.\n     *\n     * @param value - The input value for the body.\n     *\n     * @returns A widget for the body.\n     */\n    createBody(value: BodyType<any>): Widget {\n      let body: Widget;\n      if (typeof value === 'string') {\n        body = new Widget({ node: document.createElement('span') });\n        body.node.textContent = value;\n      } else if (value instanceof Widget) {\n        body = value;\n      } else {\n        body = new Widget({ node: VirtualDOM.realize(value) });\n      }\n      body.addClass('jp-Dialog-body');\n      Styling.styleNode(body.node);\n      return body;\n    }\n\n    /**\n     * Create the footer of the dialog.\n     *\n     * @param buttonNodes - The buttons nodes to add to the footer.\n     *\n     * @returns A widget for the footer.\n     */\n    createFooter(buttons: ReadonlyArray<HTMLElement>): Widget {\n      let footer = new Widget();\n      footer.addClass('jp-Dialog-footer');\n      each(buttons, button => {\n        footer.node.appendChild(button);\n      });\n      Styling.styleNode(footer.node);\n      return footer;\n    }\n\n    /**\n     * Create a button node for the dialog.\n     *\n     * @param button - The button data.\n     *\n     * @returns A node for the button.\n     */\n    createButtonNode(button: IButton): HTMLElement {\n      let className = this.createItemClass(button);\n      // We use realize here instead of creating\n      // nodes with document.createElement as a\n      // shorthand, and only because this is not\n      // called often.\n      return VirtualDOM.realize(\n        h.button({ className },\n              this.renderIcon(button),\n              this.renderLabel(button))\n      );\n    }\n\n    /**\n     * Create the class name for the button.\n     *\n     * @param data - The data to use for the class name.\n     *\n     * @returns The full class name for the button.\n     */\n    createItemClass(data: IButton): string {\n      // Setup the initial class name.\n      let name = 'jp-Dialog-button';\n\n      // Add the other state classes.\n      if (data.accept) {\n        name += ' jp-mod-accept';\n      } else {\n        name += ' jp-mod-reject';\n      }\n      if (data.displayType === 'warn') {\n        name += ' jp-mod-warn';\n      }\n\n      // Add the extra class.\n      let extra = data.className;\n      if (extra) {\n        name += ` ${extra}`;\n      }\n\n      // Return the complete class name.\n      return name;\n    }\n\n    /**\n     * Render an icon element for a dialog item.\n     *\n     * @param data - The data to use for rendering the icon.\n     *\n     * @returns A virtual element representing the icon.\n     */\n    renderIcon(data: IButton): VirtualElement {\n      return h.div({ className: this.createIconClass(data) },\n                   data.iconLabel);\n    }\n\n    /**\n     * Create the class name for the button icon.\n     *\n     * @param data - The data to use for the class name.\n     *\n     * @returns The full class name for the item icon.\n     */\n    createIconClass(data: IButton): string {\n      let name = 'jp-Dialog-buttonIcon';\n      let extra = data.iconClass;\n      return extra ? `${name} ${extra}` : name;\n    }\n\n    /**\n     * Render the label element for a button.\n     *\n     * @param data - The data to use for rendering the label.\n     *\n     * @returns A virtual element representing the item label.\n     */\n    renderLabel(data: IButton): VirtualElement {\n      let className = 'jp-Dialog-buttonLabel';\n      let title = data.caption;\n      return h.div({ className, title }, data.label);\n    }\n  }\n\n  /**\n   * The default renderer instance.\n   */\n  export\n  const defaultRenderer = new Renderer();\n}\n\n\n/**\n * The namespace for module private data.\n */\nnamespace Private {\n  /**\n   * The queue for launching dialogs.\n   */\n  export\n  let launchQueue: Promise<Dialog.IResult<any>>[] = [];\n\n  /**\n   * Handle the input options for a dialog.\n   *\n   * @param options - The input options.\n   *\n   * @returns A new options object with defaults applied.\n   */\n  export\n  function handleOptions<T>(options: Partial<Dialog.IOptions<T>>={}): Dialog.IOptions<T> {\n    let buttons = (\n      options.buttons || [Dialog.cancelButton(), Dialog.okButton()]\n    );\n    let defaultButton = buttons.length - 1;\n    if (options.defaultButton !== undefined) {\n      defaultButton = options.defaultButton;\n    }\n    return {\n      title: options.title || '',\n      body: options.body || '',\n      host: options.host || document.body,\n      buttons,\n      defaultButton,\n      renderer: options.renderer || Dialog.defaultRenderer,\n      focusNodeSelector: options.focusNodeSelector || ''\n    };\n  }\n\n  /**\n   *  Find the first focusable item in the dialog.\n   */\n  export\n  function findFirstFocusable(node: HTMLElement): HTMLElement {\n    let candidateSelectors = [\n      'input',\n      'select',\n      'a[href]',\n      'textarea',\n      'button',\n      '[tabindex]',\n    ].join(',');\n    return node.querySelectorAll(candidateSelectors)[0] as HTMLElement;\n  }\n}\n"]}