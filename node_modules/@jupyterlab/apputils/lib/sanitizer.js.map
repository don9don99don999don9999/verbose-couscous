{"version":3,"file":"sanitizer.js","sourceRoot":"","sources":["../../../../apputils/src/sanitizer.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,0CAA0C;AAC1C,2DAA2D;AAC3D,wCAA0C;AA0C1C;;GAEG;AACH;IAAA;QAcU,aAAQ,GAAsB;YACpC,WAAW,EAAE,QAAQ,CAAC,QAAQ,CAAC,WAAW;iBACvC,MAAM,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,CAAC;YAC7D,iBAAiB,EAAE;gBACjB,0CAA0C;gBAC1C,GAAG,EAAE,QAAQ,CAAC,QAAQ,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC;gBAC3D,4CAA4C;gBAC5C,KAAK,EAAE,CAAC,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,KAAK,CAAC;gBACxC,2CAA2C;gBAC3C,MAAM,EAAE,CAAC,OAAO,CAAC;gBACjB,2CAA2C;gBAC3C,MAAM,EAAE,CAAC,OAAO,CAAC;gBACjB,0CAA0C;gBAC1C,KAAK,EAAE,CAAC,OAAO,CAAC;gBAChB,wCAAwC;gBACxC,GAAG,EAAE,CAAC,OAAO,CAAC;gBACd,0CAA0C;gBAC1C,KAAK,EAAE,CAAC,OAAO,CAAC;gBAChB,8CAA8C;gBAC9C,OAAO,EAAE,CAAC,KAAK,EAAE,UAAU,EAAE,MAAM,EAAE,OAAO,EAAE,UAAU,CAAC;gBACzD,8CAA8C;gBAC9C,OAAO,EAAE,CAAC,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,UAAU;oBACpC,MAAM,EAAE,OAAO,EAAE,UAAU,CAAC;aACvC;YACD,aAAa,EAAE;gBACb,sDAAsD;gBACtD,GAAG,EAAE,QAAQ,CAAC,eAAe,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,UAAU,EAAE,CAAC;aAC1D;SACF,CAAC;IACJ,CAAC;IA1CC;;;;;;;;OAQG;IACH,4BAAQ,GAAR,UAAS,KAAa,EAAE,OAA6B;QACnD,MAAM,CAAC,QAAQ,CAAC,KAAK,eAAO,IAAI,CAAC,QAAQ,EAAK,OAAO,IAAI,EAAE,EAAG,CAAC;IACjE,CAAC;IA+BH,gBAAC;AAAD,CAAC,AA3CD,IA2CC;AAGD;;GAEG;AAEG,QAAA,gBAAgB,GAAe,IAAI,SAAS,EAAE,CAAC","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport * as sanitize from 'sanitize-html';\n\n\nexport\ninterface ISanitizer {\n  /**\n   * Sanitize an HTML string.\n   *\n   * @param dirty - The dirty text.\n   *\n   * @param options - The optional sanitization options.\n   *\n   * @returns The sanitized string.\n   */\n  sanitize(dirty: string, options?: ISanitizer.IOptions): string;\n}\n\n\n/**\n * The namespace for `ISanitizer` related interfaces.\n */\nexport\nnamespace ISanitizer {\n  /**\n   * The options used to sanitize.\n   */\n  export\n  interface IOptions {\n    /**\n     * The allowed tags.\n     */\n    allowedTags?: string[];\n\n    /**\n     * The allowed attributes for a given tag.\n     */\n    allowedAttributes?: { [key: string]: string[] };\n  }\n}\n\n\n\n/**\n * A class to sanitize HTML strings.\n */\nclass Sanitizer implements ISanitizer {\n  /**\n   * Sanitize an HTML string.\n   *\n   * @param dirty - The dirty text.\n   *\n   * @param options - The optional sanitization options.\n   *\n   * @returns The sanitized string.\n   */\n  sanitize(dirty: string, options?: ISanitizer.IOptions): string {\n    return sanitize(dirty, { ...this._options, ...options || {} });\n  }\n\n  private _options: sanitize.IOptions = {\n    allowedTags: sanitize.defaults.allowedTags\n      .concat('h1', 'h2', 'img', 'span', 'audio', 'video', 'del'),\n    allowedAttributes: {\n      // Allow the \"rel\" attribute for <a> tags.\n      'a': sanitize.defaults.allowedAttributes['a'].concat('rel'),\n      // Allow the \"src\" attribute for <img> tags.\n      'img': ['src', 'height', 'width', 'alt'],\n      // Allow \"class\" attribute for <code> tags.\n      'code': ['class'],\n      // Allow \"class\" attribute for <span> tags.\n      'span': ['class'],\n      // Allow \"class\" attribute for <div> tags.\n      'div': ['class'],\n      // Allow \"class\" attribute for <p> tags.\n      'p': ['class'],\n      // Allow \"class\" attribute for <pre> tags.\n      'pre': ['class'],\n      // Allow the \"src\" attribute for <audio> tags.\n      'audio': ['src', 'autoplay', 'loop', 'muted', 'controls'],\n      // Allow the \"src\" attribute for <video> tags.\n      'video': ['src', 'height', 'width', 'autoplay',\n                'loop', 'muted', 'controls']\n    },\n    transformTags: {\n      // Set the \"rel\" attribute for <a> tags to \"nofollow\".\n      'a': sanitize.simpleTransform('a', { 'rel': 'nofollow' })\n    }\n  };\n}\n\n\n/**\n * The default instance of an `ISanitizer` meant for use by user code.\n */\nexport\nconst defaultSanitizer: ISanitizer = new Sanitizer();\n"]}