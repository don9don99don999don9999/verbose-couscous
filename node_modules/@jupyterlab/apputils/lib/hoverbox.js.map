{"version":3,"file":"hoverbox.js","sourceRoot":"","sources":["../../../../apputils/src/hoverbox.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\n/**\n * The class name added to all hover boxes.\n */\nconst HOVERBOX_CLASS = 'jp-HoverBox';\n\n/**\n * The class name added to a hovering node that is scrolled out of view.\n */\nconst OUTOFVIEW_CLASS = 'jp-mod-outofview';\n\n\n/**\n * A namespace for `HoverBox` members.\n */\nexport\nnamespace HoverBox {\n  /**\n   * Options for setting the geometry of a hovering node and its anchor node.\n   */\n  export\n  interface IOptions {\n    /**\n     * The referent anchor rectangle to which the hover box is bound.\n     *\n     * #### Notes\n     * In an editor context, this value will typically be the cursor's\n     * coordinate position, which can be retrieved via calling the\n     * `getCoordinateForPosition` method.\n     */\n    anchor: ClientRect;\n\n    /**\n     * The node that hosts the anchor.\n     *\n     * #### Notes\n     * The visibility of the anchor rectangle within this host node is the\n     * heuristic that determines whether the hover box ought to be visible.\n     */\n    host: HTMLElement;\n\n    /**\n     * The maximum height of a hover box.\n     *\n     * #### Notes\n     * This value is only used if a CSS max-height attribute is not set for the\n     * hover box. It is a fallback value.\n     */\n    maxHeight: number;\n\n    /**\n     * The minimum height of a hover box.\n     */\n    minHeight: number;\n\n    /**\n     * The hover box node.\n     */\n    node: HTMLElement;\n\n    /**\n     * Optional pixel offset values added to where the hover box should render.\n     *\n     * #### Notes\n     * This option is useful for passing in values that may pertain to CSS\n     * borders or padding in cases where the text inside the hover box may need\n     * to align with the text of the referent editor.\n     *\n     * Because the hover box calculation may render a box either above or below\n     * the cursor, the `vertical` offset accepts `above` and `below` values for\n     * the different render modes.\n     */\n    offset?: {\n      horizontal?: number,\n      vertical?: { above?: number, below?: number }\n    };\n\n    /**\n     * If space is available both above and below the anchor, denote which\n     * location is privileged. Use forceBelow and forceAbove to mandate where\n     * hover box should render relative to anchor.\n     *\n     * #### Notes\n     * The default value is `'below'`.\n     */\n    privilege?: 'above' | 'below' | 'forceAbove' | 'forceBelow';\n\n    /**\n     * If the style of the node has already been computed, it can be passed into\n     * the hover box for geometry calculation.\n     */\n    style?: CSSStyleDeclaration;\n  }\n\n\n  /**\n   * Set the visible dimensions of a hovering box anchored to an editor cursor.\n   *\n   * @param options - The hover box geometry calculation options.\n   */\n  export\n  function setGeometry(options: IOptions): void {\n    const { anchor, host, node, privilege } = options;\n\n    // Add hover box class if it does not exist.\n    node.classList.add(HOVERBOX_CLASS);\n\n    // Hide the hover box before querying the DOM for the anchor coordinates.\n    node.classList.add(OUTOFVIEW_CLASS);\n\n    // If the current coordinates are not visible, bail.\n    if (!host.contains(document.elementFromPoint(anchor.left, anchor.top))) {\n      return;\n    }\n\n    // Clear any previously set max-height.\n    node.style.maxHeight = '';\n\n    // Clear any programmatically set margin-top.\n    node.style.marginTop = '';\n\n    // Make sure the node is visible so that its dimensions can be queried.\n    node.classList.remove(OUTOFVIEW_CLASS);\n\n    const style = options.style || window.getComputedStyle(node);\n    const innerHeight = window.innerHeight;\n    const spaceAbove = anchor.top;\n    const spaceBelow = innerHeight - anchor.bottom;\n    const marginTop = parseInt(style.marginTop!, 10) || 0;\n    const minHeight = parseInt(style.minHeight!, 10) || options.minHeight;\n\n    let maxHeight = parseInt(style.maxHeight!, 10) || options.maxHeight;\n\n    // Determine whether to render above or below; check privilege.\n    const renderBelow = privilege === 'forceAbove' ? false\n      : privilege === 'forceBelow' ? true\n        : privilege === 'above' ?\n          spaceAbove < maxHeight && spaceAbove < spaceBelow\n            : spaceBelow >= maxHeight || spaceBelow >= spaceAbove;\n\n    if (renderBelow) {\n      maxHeight = Math.min(spaceBelow - marginTop, maxHeight);\n    } else {\n      maxHeight = Math.min(spaceAbove, maxHeight);\n      // If the box renders above the text, its top margin is irrelevant.\n      node.style.marginTop = '0px';\n    }\n    node.style.maxHeight = `${maxHeight}px`;\n\n    // Make sure the box ought to be visible.\n    const withinBounds = maxHeight > minHeight &&\n      (spaceBelow >= minHeight || spaceAbove >= minHeight);\n\n    if (!withinBounds) {\n      node.classList.add(OUTOFVIEW_CLASS);\n      return;\n    }\n\n    // Position the box vertically.\n    const offsetAbove = options.offset && options.offset.vertical &&\n      options.offset.vertical.above || 0;\n    const offsetBelow = options.offset && options.offset.vertical &&\n      options.offset.vertical.below || 0;\n    const top = renderBelow ? (innerHeight - spaceBelow) + offsetBelow\n      : (spaceAbove - node.getBoundingClientRect().height) + offsetAbove;\n    node.style.top = `${Math.floor(top)}px`;\n\n    // Position the box horizontally.\n    const offsetHorizontal = options.offset && options.offset.horizontal || 0;\n    let left = anchor.left + offsetHorizontal;\n\n    node.style.left = `${Math.ceil(left)}px`;\n    node.style.width = 'auto';\n\n    // Expand the menu width by the scrollbar size, if present.\n    if (node.scrollHeight >= maxHeight) {\n      node.style.width = `${2 * node.offsetWidth - node.clientWidth}`;\n      node.scrollTop = 0;\n    }\n\n    // Move left to fit in the window.\n    let right = node.getBoundingClientRect().right;\n    if (right > window.innerWidth) {\n      left -= right - window.innerWidth;\n      node.style.left = `${Math.ceil(left)}px`;\n    }\n  }\n}\n"]}