{"version":3,"file":"default.js","sourceRoot":"","sources":["../../../../docregistry/src/default.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  Mode\n} from '@jupyterlab/codemirror';\n\nimport {\n  Contents\n} from '@jupyterlab/services';\n\nimport {\n  JSONValue\n} from '@phosphor/coreutils';\n\nimport {\n  ISignal, Signal\n} from '@phosphor/signaling';\n\nimport {\n  CodeEditor\n} from '@jupyterlab/codeeditor';\n\nimport {\n  IChangedArgs\n} from '@jupyterlab/coreutils';\n\nimport {\n  IModelDB\n} from '@jupyterlab/observables';\n\nimport {\n  DocumentRegistry\n} from './index';\n\n\n/**\n * The default implementation of a document model.\n */\nexport\nclass DocumentModel extends CodeEditor.Model implements DocumentRegistry.ICodeModel  {\n  /**\n   * Construct a new document model.\n   */\n  constructor(languagePreference?: string, modelDB?: IModelDB) {\n    super({modelDB});\n    this._defaultLang = languagePreference || '';\n    this.value.changed.connect(this.triggerContentChange, this);\n  }\n\n  /**\n   * A signal emitted when the document content changes.\n   */\n  get contentChanged(): ISignal<this, void> {\n    return this._contentChanged;\n  }\n\n  /**\n   * A signal emitted when the document state changes.\n   */\n  get stateChanged(): ISignal<this, IChangedArgs<any>> {\n    return this._stateChanged;\n  }\n\n  /**\n   * The dirty state of the document.\n   */\n  get dirty(): boolean {\n    return this._dirty;\n  }\n  set dirty(newValue: boolean) {\n    if (newValue === this._dirty) {\n      return;\n    }\n    let oldValue = this._dirty;\n    this._dirty = newValue;\n    this.triggerStateChange({ name: 'dirty', oldValue, newValue });\n  }\n\n  /**\n   * The read only state of the document.\n   */\n  get readOnly(): boolean {\n    return this._readOnly;\n  }\n  set readOnly(newValue: boolean) {\n    if (newValue === this._readOnly) {\n      return;\n    }\n    let oldValue = this._readOnly;\n    this._readOnly = newValue;\n    this.triggerStateChange({ name: 'readOnly', oldValue, newValue });\n  }\n\n  /**\n   * The default kernel name of the document.\n   *\n   * #### Notes\n   * This is a read-only property.\n   */\n  get defaultKernelName(): string {\n    return '';\n  }\n\n  /**\n   * The default kernel language of the document.\n   *\n   * #### Notes\n   * This is a read-only property.\n   */\n  get defaultKernelLanguage(): string {\n    return this._defaultLang;\n  }\n\n  /**\n   * Serialize the model to a string.\n   */\n  toString(): string {\n    return this.value.text;\n  }\n\n  /**\n   * Deserialize the model from a string.\n   *\n   * #### Notes\n   * Should emit a [contentChanged] signal.\n   */\n  fromString(value: string): void {\n    this.value.text = value;\n  }\n\n  /**\n   * Serialize the model to JSON.\n   */\n  toJSON(): JSONValue {\n    return JSON.parse(this.value.text || 'null');\n  }\n\n  /**\n   * Deserialize the model from JSON.\n   *\n   * #### Notes\n   * Should emit a [contentChanged] signal.\n   */\n  fromJSON(value: JSONValue): void {\n    this.fromString(JSON.stringify(value));\n  }\n\n  /**\n   * Trigger a state change signal.\n   */\n  protected triggerStateChange(args: IChangedArgs<any>): void {\n    this._stateChanged.emit(args);\n  }\n\n  /**\n   * Trigger a content changed signal.\n   */\n  protected triggerContentChange(): void {\n    this._contentChanged.emit(void 0);\n    this.dirty = true;\n  }\n\n  private _defaultLang = '';\n  private _dirty = false;\n  private _readOnly = false;\n  private _contentChanged = new Signal<this, void>(this);\n  private _stateChanged = new Signal<this, IChangedArgs<any>>(this);\n}\n\n\n/**\n * An implementation of a model factory for text files.\n */\nexport\nclass TextModelFactory implements DocumentRegistry.CodeModelFactory {\n  /**\n   * The name of the model type.\n   *\n   * #### Notes\n   * This is a read-only property.\n   */\n  get name(): string {\n    return 'text';\n  }\n\n  /**\n   * The type of the file.\n   *\n   * #### Notes\n   * This is a read-only property.\n   */\n  get contentType(): Contents.ContentType {\n    return 'file';\n  }\n\n  /**\n   * The format of the file.\n   *\n   * This is a read-only property.\n   */\n  get fileFormat(): Contents.FileFormat {\n    return 'text';\n  }\n\n  /**\n   * Get whether the model factory has been disposed.\n   */\n  get isDisposed(): boolean {\n    return this._isDisposed;\n  }\n\n  /**\n   * Dispose of the resources held by the model factory.\n   */\n  dispose(): void {\n    this._isDisposed = true;\n  }\n\n  /**\n   * Create a new model.\n   *\n   * @param languagePreference - An optional kernel language preference.\n   *\n   * @returns A new document model.\n   */\n  createNew(languagePreference?: string, modelDB?: IModelDB): DocumentRegistry.ICodeModel {\n    return new DocumentModel(languagePreference, modelDB);\n  }\n\n  /**\n   * Get the preferred kernel language given a file path.\n   */\n  preferredLanguage(path: string): string {\n    let mode = Mode.findByFileName(path);\n    return mode && mode.mode;\n  }\n\n  private _isDisposed = false;\n}\n\n\n/**\n * An implementation of a model factory for base64 files.\n */\nexport\nclass Base64ModelFactory extends TextModelFactory {\n  /**\n   * The name of the model type.\n   *\n   * #### Notes\n   * This is a read-only property.\n   */\n  get name(): string {\n    return 'base64';\n  }\n\n  /**\n   * The type of the file.\n   *\n   * #### Notes\n   * This is a read-only property.\n   */\n  get contentType(): Contents.ContentType {\n    return 'file';\n  }\n\n  /**\n   * The format of the file.\n   *\n   * This is a read-only property.\n   */\n  get fileFormat(): Contents.FileFormat {\n    return 'base64';\n  }\n}\n\n\n/**\n * The default implemetation of a widget factory.\n */\nexport\nabstract class ABCWidgetFactory<T extends DocumentRegistry.IReadyWidget, U extends DocumentRegistry.IModel> implements DocumentRegistry.IWidgetFactory<T, U> {\n  /**\n   * Construct a new `ABCWidgetFactory`.\n   */\n  constructor(options: DocumentRegistry.IWidgetFactoryOptions) {\n    this._name = options.name;\n    this._readOnly = options.readOnly === undefined ? false : options.readOnly;\n    this._defaultFor = options.defaultFor ? options.defaultFor.slice() : [];\n    this._fileTypes = options.fileTypes.slice();\n    this._modelName = options.modelName || 'text';\n    this._preferKernel = !!options.preferKernel;\n    this._canStartKernel = !!options.canStartKernel;\n  }\n\n  /**\n   * A signal emitted when a widget is created.\n   */\n  get widgetCreated(): ISignal<DocumentRegistry.IWidgetFactory<T, U>, T> {\n    return this._widgetCreated;\n  }\n\n  /**\n   * Get whether the model factory has been disposed.\n   */\n  get isDisposed(): boolean {\n    return this._isDisposed;\n  }\n\n  /**\n   * Dispose of the resources held by the document manager.\n   */\n  dispose(): void {\n    this._isDisposed = true;\n  }\n\n  /**\n   * Whether the widget factory is read only.\n   */\n  get readOnly(): boolean {\n    return this._readOnly;\n  }\n\n  /**\n   * The name of the widget to display in dialogs.\n   */\n  get name(): string {\n    return this._name;\n  }\n\n  /**\n   * The file types the widget can view.\n   */\n  get fileTypes(): string[] {\n    return this._fileTypes.slice();\n  }\n\n  /**\n   * The registered name of the model type used to create the widgets.\n   */\n  get modelName(): string {\n    return this._modelName;\n  }\n\n  /**\n   * The file types for which the factory should be the default.\n   */\n  get defaultFor(): string[] {\n    return this._defaultFor.slice();\n  }\n\n  /**\n   * Whether the widgets prefer having a kernel started.\n   */\n  get preferKernel(): boolean {\n    return this._preferKernel;\n  }\n\n  /**\n   * Whether the widgets can start a kernel when opened.\n   */\n  get canStartKernel(): boolean {\n    return this._canStartKernel;\n  }\n\n  /**\n   * Create a new widget given a document model and a context.\n   *\n   * #### Notes\n   * It should emit the [widgetCreated] signal with the new widget.\n   */\n  createNew(context: DocumentRegistry.IContext<U>): T {\n    let widget = this.createNewWidget(context);\n    this._widgetCreated.emit(widget);\n    return widget;\n  }\n\n  /**\n   * Create a widget for a context.\n   */\n  protected abstract createNewWidget(context: DocumentRegistry.IContext<U>): T;\n\n  private _isDisposed = false;\n  private _name: string;\n  private _readOnly: boolean;\n  private _canStartKernel: boolean;\n  private _preferKernel: boolean;\n  private _modelName: string;\n  private _fileTypes: string[];\n  private _defaultFor: string[];\n  private _widgetCreated = new Signal<DocumentRegistry.IWidgetFactory<T, U>, T>(this);\n}\n"]}