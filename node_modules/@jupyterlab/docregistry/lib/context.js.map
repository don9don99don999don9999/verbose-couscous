{"version":3,"file":"context.js","sourceRoot":"","sources":["../../../../docregistry/src/context.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  Contents, ServiceManager, ServerConnection\n} from '@jupyterlab/services';\n\nimport {\n  JSONValue, PromiseDelegate\n} from '@phosphor/coreutils';\n\nimport {\n  IDisposable, DisposableDelegate\n} from '@phosphor/disposable';\n\nimport {\n  ISignal, Signal\n} from '@phosphor/signaling';\n\nimport {\n  Widget\n} from '@phosphor/widgets';\n\nimport {\n  showDialog, ClientSession, Dialog, IClientSession\n} from '@jupyterlab/apputils';\n\nimport {\n  PathExt\n} from '@jupyterlab/coreutils';\n\nimport {\n  IModelDB, ModelDB\n} from '@jupyterlab/observables';\n\nimport {\n  RenderMimeRegistry\n} from '@jupyterlab/rendermime';\n\nimport {\n  IRenderMime\n} from '@jupyterlab/rendermime-interfaces';\n\nimport {\n  DocumentRegistry\n} from './registry';\n\n\n/**\n * An implementation of a document context.\n *\n * This class is typically instantiated by the document manger.\n */\nexport\nclass Context<T extends DocumentRegistry.IModel> implements DocumentRegistry.IContext<T> {\n  /**\n   * Construct a new document context.\n   */\n  constructor(options: Context.IOptions<T>) {\n    let manager = this._manager = options.manager;\n    this._factory = options.factory;\n    this._opener = options.opener || Private.noOp;\n    this._path = options.path;\n    const localPath = this._manager.contents.localPath(this._path);\n    let lang = this._factory.preferredLanguage(PathExt.basename(localPath));\n\n    let dbFactory = options.modelDBFactory;\n    if (dbFactory) {\n      const localPath = manager.contents.localPath(this._path);\n      this._modelDB = dbFactory.createNew(localPath);\n      this._model = this._factory.createNew(lang, this._modelDB);\n    } else {\n      this._model = this._factory.createNew(lang);\n    }\n\n    this._readyPromise = manager.ready.then(() => {\n      return this._populatedPromise.promise;\n    });\n\n    let ext = PathExt.extname(this._path);\n    this.session = new ClientSession({\n      manager: manager.sessions,\n      path: this._path,\n      type: ext === '.ipynb' ? 'notebook' : 'file',\n      name: PathExt.basename(localPath),\n      kernelPreference: options.kernelPreference || { shouldStart: false }\n    });\n    this.session.propertyChanged.connect(this._onSessionChanged, this);\n    manager.contents.fileChanged.connect(this._onFileChanged, this);\n\n    this.urlResolver = new RenderMimeRegistry.UrlResolver({\n      session: this.session,\n      contents: manager.contents\n    });\n  }\n\n  /**\n   * A signal emitted when the path changes.\n   */\n  get pathChanged(): ISignal<this, string> {\n    return this._pathChanged;\n  }\n\n  /**\n   * A signal emitted when the model is saved or reverted.\n   */\n  get fileChanged(): ISignal<this, Contents.IModel> {\n    return this._fileChanged;\n  }\n\n  /**\n   * A signal emitted when the context is disposed.\n   */\n  get disposed(): ISignal<this, void> {\n    return this._disposed;\n  }\n\n  /**\n   * Get the model associated with the document.\n   */\n  get model(): T {\n    return this._model;\n  }\n\n  /**\n   * The client session object associated with the context.\n   */\n  readonly session: ClientSession;\n\n  /**\n   * The current path associated with the document.\n   */\n  get path(): string {\n    return this._path;\n  }\n\n  /**\n   * The current local path associated with the document.\n   * If the document is in the default notebook file browser,\n   * this is the same as the path.\n   */\n  get localPath(): string {\n    return this._manager.contents.localPath(this._path);\n  }\n\n  /**\n   * The current contents model associated with the document.\n   *\n   * #### Notes\n   * The contents model will be null until the context is populated.\n   * It will have an  empty `contents` field.\n   */\n  get contentsModel(): Contents.IModel | null {\n    return this._contentsModel;\n  }\n\n  /**\n   * Get the model factory name.\n   *\n   * #### Notes\n   * This is not part of the `IContext` API.\n   */\n  get factoryName(): string {\n    return this.isDisposed ? '' : this._factory.name;\n  }\n\n  /**\n   * Test whether the context is disposed.\n   */\n  get isDisposed(): boolean {\n    return this._isDisposed;\n  }\n\n  /**\n   * Dispose of the resources held by the context.\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    this._isDisposed = true;\n    this.session.dispose();\n    if (this._modelDB) {\n      this._modelDB.dispose();\n    }\n    this._model.dispose();\n    this._disposed.emit(void 0);\n    Signal.clearData(this);\n  }\n\n  /**\n   * Whether the context is ready.\n   */\n  get isReady(): boolean {\n    return this._isReady;\n  }\n\n /**\n  * A promise that is fulfilled when the context is ready.\n  */\n  get ready(): Promise<void> {\n    return this._readyPromise;\n  }\n\n  /**\n   * The url resolver for the context.\n   */\n  readonly urlResolver: IRenderMime.IResolver;\n\n  /**\n   * Populate the contents of the model, either from\n   * disk or from the modelDB backend.\n   *\n   * @returns a promise that resolves upon model population.\n   */\n  fromStore(): Promise<void> {\n    if (this._modelDB) {\n      return this._modelDB.connected.then(() => {\n        if (this._modelDB.isPrepopulated) {\n          this.save();\n          return void 0;\n        } else {\n          return this.revert();\n        }\n      });\n    } else {\n      return this.revert();\n    }\n  }\n\n  /**\n   * Save the document contents to disk.\n   */\n  save(): Promise<void> {\n    let model = this._model;\n    let content: JSONValue;\n    if (this._factory.fileFormat === 'json') {\n      content = model.toJSON();\n    } else {\n      content = model.toString();\n    }\n\n    let options = {\n      type: this._factory.contentType,\n      format: this._factory.fileFormat,\n      content\n    };\n\n    return this._manager.ready.then(() => {\n      if (!model.modelDB.isCollaborative) {\n        return this._maybeSave(options);\n      }\n      return this._manager.contents.save(this._path, options);\n    }).then(value => {\n      if (this.isDisposed) {\n        return;\n      }\n      model.dirty = false;\n      this._updateContentsModel(value);\n\n      if (!this._isPopulated) {\n        return this._populate();\n      }\n    }).catch(err => {\n      const localPath = this._manager.contents.localPath(this._path);\n      const name = PathExt.basename(localPath);\n      this._handleError(err, `File Save Error for ${name}`);\n      throw err;\n    });\n  }\n\n  /**\n   * Save the document to a different path chosen by the user.\n   */\n  saveAs(): Promise<void> {\n    return Private.getSavePath(this._path).then(newPath => {\n      if (this.isDisposed || !newPath) {\n        return;\n      }\n      if (newPath === this._path) {\n        return this.save();\n      }\n      // Make sure the path does not exist.\n      return this._manager.ready.then(() => {\n        return this._manager.contents.get(newPath);\n      }).then(() => {\n        return this._maybeOverWrite(newPath);\n      }).catch(err => {\n        if (!err.response || err.response.status !== 404) {\n          throw err;\n        }\n        return this._finishSaveAs(newPath);\n      });\n    });\n  }\n\n  /**\n   * Revert the document contents to disk contents.\n   */\n  revert(): Promise<void> {\n    let opts: Contents.IFetchOptions = {\n      format: this._factory.fileFormat,\n      type: this._factory.contentType,\n      content: true\n    };\n    let path = this._path;\n    let model = this._model;\n    return this._manager.ready.then(() => {\n      return this._manager.contents.get(path, opts);\n    }).then(contents => {\n      if (this.isDisposed) {\n        return;\n      }\n      let dirty = false;\n      if (contents.format === 'json') {\n        model.fromJSON(contents.content);\n      } else {\n        let content = contents.content;\n        // Convert line endings if necessary, marking the file\n        // as dirty.\n        if (content.indexOf('\\r') !== -1) {\n          dirty = true;\n          content = content.replace(/\\r\\n|\\r/g, '\\n');\n        }\n        model.fromString(content);\n      }\n      this._updateContentsModel(contents);\n      model.dirty = dirty;\n      if (!this._isPopulated) {\n        return this._populate();\n      }\n    }).catch(err => {\n      const localPath = this._manager.contents.localPath(this._path);\n      const name = PathExt.basename(localPath);\n      this._handleError(err, `File Load Error for ${name}`);\n      throw err;\n    });\n  }\n\n  /**\n   * Create a checkpoint for the file.\n   */\n  createCheckpoint(): Promise<Contents.ICheckpointModel> {\n    let contents = this._manager.contents;\n    return this._manager.ready.then(() => {\n      return contents.createCheckpoint(this._path);\n    });\n  }\n\n  /**\n   * Delete a checkpoint for the file.\n   */\n  deleteCheckpoint(checkpointId: string): Promise<void> {\n    let contents = this._manager.contents;\n    return this._manager.ready.then(() => {\n      return contents.deleteCheckpoint(this._path, checkpointId);\n    });\n  }\n\n  /**\n   * Restore the file to a known checkpoint state.\n   */\n  restoreCheckpoint(checkpointId?: string): Promise<void> {\n    let contents = this._manager.contents;\n    let path = this._path;\n    return this._manager.ready.then(() => {\n      if (checkpointId) {\n        return contents.restoreCheckpoint(path, checkpointId);\n      }\n      return this.listCheckpoints().then(checkpoints => {\n        if (this.isDisposed || !checkpoints.length) {\n          return;\n        }\n        checkpointId = checkpoints[checkpoints.length - 1].id;\n        return contents.restoreCheckpoint(path, checkpointId);\n      });\n    });\n  }\n\n  /**\n   * List available checkpoints for a file.\n   */\n  listCheckpoints(): Promise<Contents.ICheckpointModel[]> {\n    let contents = this._manager.contents;\n    return this._manager.ready.then(() => {\n      return contents.listCheckpoints(this._path);\n    });\n  }\n\n  /**\n   * Add a sibling widget to the document manager.\n   *\n   * @param widget - The widget to add to the document manager.\n   *\n   * @param options - The desired options for adding the sibling.\n   *\n   * @returns A disposable used to remove the sibling if desired.\n   *\n   * #### Notes\n   * It is assumed that the widget has the same model and context\n   * as the original widget.\n   */\n  addSibling(widget: Widget, options: DocumentRegistry.IOpenOptions = {}): IDisposable {\n    let opener = this._opener;\n    if (opener) {\n      opener(widget, options);\n    }\n    return new DisposableDelegate(() => {\n      widget.close();\n    });\n  }\n\n  /**\n   * Handle a change on the contents manager.\n   */\n  private _onFileChanged(sender: Contents.IManager, change: Contents.IChangedArgs): void {\n    if (change.type !== 'rename') {\n      return;\n    }\n    let oldPath = change.oldValue && change.oldValue.path;\n    let newPath = change.newValue && change.newValue.path;\n    if (newPath && oldPath === this._path) {\n      this.session.setPath(newPath);\n      const localPath = this._manager.contents.localPath(newPath);\n      this.session.setName(PathExt.basename(localPath));\n      this._path = newPath;\n      this._updateContentsModel(change.newValue as Contents.IModel);\n      this._pathChanged.emit(this._path);\n    }\n  }\n\n  /**\n   * Handle a change to a session property.\n   */\n  private _onSessionChanged(sender: IClientSession, type: string): void {\n    if (type !== 'path') {\n      return;\n    }\n    let path = this.session.path;\n    if (path !== this._path) {\n      this._path = path;\n      this._pathChanged.emit(path);\n    }\n  }\n\n  /**\n   * Update our contents model, without the content.\n   */\n  private _updateContentsModel(model: Contents.IModel): void {\n    let newModel: Contents.IModel = {\n      path: model.path,\n      name: model.name,\n      type: model.type,\n      content: undefined,\n      writable: model.writable,\n      created: model.created,\n      last_modified: model.last_modified,\n      mimetype: model.mimetype,\n      format: model.format\n    };\n    let mod = this._contentsModel ? this._contentsModel.last_modified : null;\n    this._contentsModel = newModel;\n    if (!mod || newModel.last_modified !== mod) {\n      this._fileChanged.emit(newModel);\n    }\n  }\n\n  /**\n   * Handle an initial population.\n   */\n  private _populate(): Promise<void> {\n    this._isPopulated = true;\n\n    // Add a checkpoint if none exists and the file is writable.\n    return this._maybeCheckpoint(false).then(() => {\n      if (this.isDisposed) {\n        return;\n      }\n      // Update the kernel preference.\n      let name = (\n        this._model.defaultKernelName || this.session.kernelPreference.name\n      );\n      this.session.kernelPreference = {\n        ...this.session.kernelPreference,\n        name,\n        language: this._model.defaultKernelLanguage,\n      };\n      return this.session.initialize();\n    }).then(() => {\n      this._isReady = true;\n      this._populatedPromise.resolve(void 0);\n    });\n  }\n\n  /**\n   * Save a file, dealing with conflicts.\n   */\n  private _maybeSave(options: Partial<Contents.IModel>): Promise<Contents.IModel> {\n    let path = this._path;\n    // Make sure the file has not changed on disk.\n    let promise = this._manager.contents.get(path, { content: false });\n    return promise.then(model => {\n      if (this.isDisposed) {\n        return Promise.reject('Disposed');\n      }\n      // We want to check last_modified (disk) > last_modified (client)\n      // (our last save)\n      // In some cases the filesystem reports an inconsistent time,\n      // so we allow 0.5 seconds difference before complaining.\n      let modified = this.contentsModel && this.contentsModel.last_modified;\n      let tClient = new Date(modified);\n      let tDisk = new Date(model.last_modified);\n      if (modified && (tDisk.getTime() - tClient.getTime()) > 500) {  // 500 ms\n        return this._timeConflict(tClient, model, options);\n      }\n      return this._manager.contents.save(path, options);\n    }, (err) => {\n      if (err.response && err.response.status === 404) {\n        return this._manager.contents.save(path, options);\n      }\n      throw err;\n    });\n  }\n\n  /**\n   * Handle a save/load error with a dialog.\n   */\n  private _handleError(err: Error | ServerConnection.ResponseError, title: string): void {\n    let buttons = [Dialog.okButton()];\n\n    // Check for a more specific error message.\n    if (err instanceof ServerConnection.ResponseError) {\n      err.response.text().then(text => {\n        let body = '';\n        try {\n          body = JSON.parse(text).message;\n        } catch (e) {\n          body = text;\n        }\n        body = body || err.message;\n        showDialog({ title, body, buttons });\n      });\n    } else {\n      let body = err.message;\n      showDialog({ title, body, buttons });\n    }\n  }\n\n  /**\n   * Add a checkpoint the file is writable.\n   */\n  private _maybeCheckpoint(force: boolean): Promise<void> {\n    let writable = this._contentsModel && this._contentsModel.writable;\n    let promise = Promise.resolve(void 0);\n    if (!writable) {\n      return promise;\n    }\n    if (force) {\n      promise = this.createCheckpoint();\n    } else {\n      promise = this.listCheckpoints().then(checkpoints => {\n        writable = this._contentsModel && this._contentsModel.writable;\n        if (!this.isDisposed && !checkpoints.length && writable) {\n          return this.createCheckpoint().then(() => { /* no-op */ });\n        }\n      });\n    }\n    return promise.catch(err => {\n      // Handle a read-only folder.\n      if (!err.response || err.response.status !== 403) {\n        throw err;\n      }\n    });\n  }\n\n  /**\n   * Handle a time conflict.\n   */\n  private _timeConflict(tClient: Date, model: Contents.IModel, options: Partial<Contents.IModel>): Promise<Contents.IModel> {\n    let tDisk = new Date(model.last_modified);\n    console.warn(`Last saving peformed ${tClient} ` +\n                 `while the current file seems to have been saved ` +\n                 `${tDisk}`);\n    let body = `The file has changed on disk since the last time it ` +\n               `ws opened or saved. ` +\n               `Do you want to overwrite the file on disk with the version ` +\n               ` open here, or load the version on disk (revert)?`;\n    let revertBtn = Dialog.okButton({ label: 'REVERT' });\n    let overwriteBtn = Dialog.warnButton({ label: 'OVERWRITE' });\n    return showDialog({\n      title: 'File Changed', body,\n      buttons: [Dialog.cancelButton(), revertBtn, overwriteBtn]\n    }).then(result => {\n      if (this.isDisposed) {\n        return Promise.reject('Disposed');\n      }\n      if (result.button.label === 'OVERWRITE') {\n        return this._manager.contents.save(this._path, options);\n      } else if (result.button.label === 'REVERT') {\n        return this.revert().then(() => { return model; });\n      }\n    });\n  }\n\n  /**\n   * Handle a time conflict.\n   */\n  private _maybeOverWrite(path: string): Promise<void> {\n    let body = `\"${path}\" already exists. Do you want to replace it?`;\n    let overwriteBtn = Dialog.warnButton({ label: 'OVERWRITE' });\n    return showDialog({\n      title: 'File Overwrite?', body,\n      buttons: [Dialog.cancelButton(), overwriteBtn]\n    }).then(result => {\n      if (this.isDisposed) {\n        return Promise.reject('Disposed');\n      }\n      if (result.button.label === 'OVERWRITE') {\n        return this._manager.contents.delete(path).then(() => {\n          this._finishSaveAs(path);\n        });\n      }\n    });\n  }\n\n  /**\n   * Finish a saveAs operation given a new path.\n   */\n  private _finishSaveAs(newPath: string): Promise<void> {\n    this._path = newPath;\n    return this.session.setPath(newPath).then(() => {\n      this.session.setName(newPath.split('/').pop()!);\n      return this.save();\n    }).then(() => {\n      this._pathChanged.emit(this._path);\n      return this._maybeCheckpoint(true);\n    });\n  }\n\n  private _manager: ServiceManager.IManager;\n  private _opener: (widget: Widget, options?: DocumentRegistry.IOpenOptions) => void;\n  private _model: T;\n  private _modelDB: IModelDB;\n  private _path = '';\n  private _factory: DocumentRegistry.IModelFactory<T>;\n  private _contentsModel: Contents.IModel | null = null;\n  private _readyPromise: Promise<void>;\n  private _populatedPromise = new PromiseDelegate<void>();\n  private _isPopulated = false;\n  private _isReady = false;\n  private _isDisposed = false;\n  private _pathChanged = new Signal<this, string>(this);\n  private _fileChanged = new Signal<this, Contents.IModel>(this);\n  private _disposed = new Signal<this, void>(this);\n}\n\n\n/**\n * A namespace for `Context` statics.\n */\nexport namespace Context {\n  /**\n   * The options used to initialize a context.\n   */\n  export\n  interface IOptions<T extends DocumentRegistry.IModel> {\n    /**\n     * A service manager instance.\n     */\n    manager: ServiceManager.IManager;\n\n    /**\n     * The model factory used to create the model.\n     */\n    factory: DocumentRegistry.IModelFactory<T>;\n\n    /**\n     * The initial path of the file.\n     */\n    path: string;\n\n    /**\n     * The kernel preference associated with the context.\n     */\n    kernelPreference?: IClientSession.IKernelPreference;\n\n    /**\n     * An IModelDB factory method which may be used for the document.\n     */\n    modelDBFactory?: ModelDB.IFactory;\n\n    /**\n     * An optional callback for opening sibling widgets.\n     */\n    opener?: (widget: Widget) => void;\n  }\n}\n\n\n/**\n * A namespace for private data.\n */\nnamespace Private {\n  /**\n   * Get a new file path from the user.\n   */\n  export\n  function getSavePath(path: string): Promise<string | undefined> {\n    let saveBtn = Dialog.okButton({ label: 'SAVE' });\n    return showDialog({\n      title: 'Save File As..',\n      body: new SaveWidget(path),\n      buttons: [Dialog.cancelButton(), saveBtn]\n    }).then(result => {\n      if (result.button.label === 'SAVE') {\n        return result.value;\n      }\n      return;\n    });\n  }\n\n  /**\n   * A no-op function.\n   */\n  export\n  function noOp() { /* no-op */ }\n\n  /*\n   * A widget that gets a file path from a user.\n   */\n  class SaveWidget extends Widget {\n    /**\n     * Construct a new save widget.\n     */\n    constructor(path: string) {\n      super({ node: createSaveNode(path) });\n    }\n\n    /**\n     * Get the value for the widget.\n     */\n    getValue(): string {\n      return (this.node as HTMLInputElement).value;\n    }\n  }\n\n  /**\n   * Create the node for a save widget.\n   */\n  function createSaveNode(path: string): HTMLElement {\n    let input = document.createElement('input');\n    input.value = path;\n    return input;\n  }\n}\n"]}