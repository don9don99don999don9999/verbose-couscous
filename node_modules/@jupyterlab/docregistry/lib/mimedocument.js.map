{"version":3,"file":"mimedocument.js","sourceRoot":"","sources":["../../../../docregistry/src/mimedocument.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  showErrorMessage\n} from '@jupyterlab/apputils';\n\nimport {\n  ActivityMonitor, PathExt\n} from '@jupyterlab/coreutils';\n\nimport {\n  IRenderMime, RenderMimeRegistry, MimeModel\n} from '@jupyterlab/rendermime';\n\nimport {\n  JSONObject, PromiseDelegate\n} from '@phosphor/coreutils';\n\nimport {\n  Message, MessageLoop\n} from '@phosphor/messaging';\n\nimport {\n  BoxLayout, Widget\n} from '@phosphor/widgets';\n\nimport {\n  ABCWidgetFactory\n} from './default';\n\nimport {\n  DocumentRegistry\n} from './registry';\n\n\n/**\n * A widget for rendered mimetype document.\n */\nexport\nclass MimeDocument extends Widget implements DocumentRegistry.IReadyWidget {\n  /**\n   * Construct a new markdown widget.\n   */\n  constructor(options: MimeDocument.IOptions) {\n    super();\n    this.addClass('jp-MimeDocument');\n    this.node.tabIndex = -1;\n    let layout = this.layout = new BoxLayout();\n    let toolbar = new Widget();\n    toolbar.addClass('jp-Toolbar');\n    layout.addWidget(toolbar);\n    BoxLayout.setStretch(toolbar, 0);\n    let context = options.context;\n    this.rendermime = options.rendermime.clone({\n      resolver: context.urlResolver\n    });\n\n    this._context = context;\n    this._mimeType = options.mimeType;\n    this._dataType = options.dataType || 'string';\n\n    this._renderer = this.rendermime.createRenderer(this._mimeType);\n    layout.addWidget(this._renderer);\n    BoxLayout.setStretch(this._renderer, 1);\n\n    context.pathChanged.connect(this._onPathChanged, this);\n    this._onPathChanged();\n\n    this._context.ready.then(() => {\n      if (this.isDisposed) {\n        return;\n      }\n      return this._render();\n    }).then(() => {\n      // Throttle the rendering rate of the widget.\n      this._monitor = new ActivityMonitor({\n        signal: context.model.contentChanged,\n        timeout: options.renderTimeout\n      });\n      this._monitor.activityStopped.connect(this.update, this);\n\n      this._ready.resolve(undefined);\n    });\n  }\n\n  /**\n   * The markdown widget's context.\n   */\n  get context(): DocumentRegistry.Context {\n    return this._context;\n  }\n\n  /**\n   * The rendermime instance associated with the widget.\n   */\n  readonly rendermime: RenderMimeRegistry;\n\n  /**\n   * A promise that resolves when the widget is ready.\n   */\n  get ready(): Promise<void> {\n    return this._ready.promise;\n  }\n\n  /**\n   * Dispose of the resources held by the widget.\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    if (this._monitor) {\n      this._monitor.dispose();\n    }\n    this._monitor = null;\n    super.dispose();\n  }\n\n  /**\n   * Handle `'activate-request'` messages.\n   */\n  protected onActivateRequest(msg: Message): void {\n    if (!this._hasRendered) {\n      this.node.focus();\n      return;\n    }\n    MessageLoop.sendMessage(this._renderer, Widget.Msg.ActivateRequest);\n    if (!this.node.contains(document.activeElement)) {\n      this.node.focus();\n    }\n  }\n\n  /**\n   * Handle an `update-request` message to the widget.\n   */\n  protected onUpdateRequest(msg: Message): void {\n    if (this._context.isReady) {\n      this._render();\n    }\n  }\n\n  /**\n   * Render the mime content.\n   */\n  private _render(): Promise<void> {\n    if (this._isRendering) {\n      this._renderRequested = true;\n      return;\n    }\n    this._renderRequested = false;\n    let context = this._context;\n    let model = context.model;\n    let data: JSONObject = {};\n    if (this._dataType === 'string') {\n      data[this._mimeType] = model.toString();\n    } else {\n      data[this._mimeType] = model.toJSON();\n    }\n    let mimeModel = new MimeModel({ data, callback: this._changeCallback });\n\n    this._isRendering = true;\n    return this._renderer.renderModel(mimeModel).then(() => {\n      // Handle the first render after an activation.\n      if (!this._hasRendered && this.node === document.activeElement) {\n        MessageLoop.sendMessage(this._renderer, Widget.Msg.ActivateRequest);\n      }\n      this._hasRendered = true;\n      this._isRendering = false;\n      if (this._renderRequested) {\n        return this._render();\n      }\n    }).catch(reason => {\n      // Dispose the document if rendering fails.\n      requestAnimationFrame(() => { this.dispose(); });\n\n      showErrorMessage(`Renderer Failure: ${context.path}`, reason);\n    });\n  }\n\n  /**\n   * Handle a path change.\n   */\n  private _onPathChanged(): void {\n    this.title.label = PathExt.basename(this._context.localPath);\n  }\n\n  /**\n   * A bound change callback.\n   */\n  private _changeCallback = (options: IRenderMime.IMimeModel.ISetDataOptions) => {\n    if (!options.data || !options.data[this._mimeType]) {\n      return;\n    }\n    let data = options.data[this._mimeType];\n    if (typeof data === 'string') {\n      this._context.model.fromString(data);\n    } else {\n      this._context.model.fromJSON(data);\n    }\n  }\n\n  private _context: DocumentRegistry.Context;\n  private _monitor: ActivityMonitor<any, any> | null;\n  private _renderer: IRenderMime.IRenderer;\n  private _mimeType: string;\n  private _ready = new PromiseDelegate<void>();\n  private _dataType: 'string' | 'json';\n  private _hasRendered = false;\n  private _isRendering = false;\n  private _renderRequested = false;\n}\n\n\n/**\n * The namespace for MimeDocument class statics.\n */\nexport\nnamespace MimeDocument {\n  /**\n   * The options used to initialize a MimeDocument.\n   */\n  export\n  interface IOptions {\n    /**\n     * The document context.\n     */\n    context: DocumentRegistry.Context;\n\n    /**\n     * The rendermime instance.\n     */\n    rendermime: RenderMimeRegistry;\n\n    /**\n     * The mime type.\n     */\n    mimeType: string;\n\n    /**\n     * The render timeout.\n     */\n    renderTimeout: number;\n\n    /**\n     * Preferred data type from the model.\n     */\n    dataType?: 'string' | 'json';\n  }\n}\n\n\n/**\n * An implementation of a widget factory for a rendered mimetype document.\n */\nexport\nclass MimeDocumentFactory extends ABCWidgetFactory<MimeDocument, DocumentRegistry.IModel> {\n  /**\n   * Construct a new markdown widget factory.\n   */\n  constructor(options: MimeDocumentFactory.IOptions) {\n    super(Private.createRegistryOptions(options));\n    this._rendermime = options.rendermime;\n    this._renderTimeout = options.renderTimeout || 1000;\n    this._dataType = options.dataType || 'string';\n    this._fileType = options.primaryFileType;\n  }\n\n  /**\n   * Create a new widget given a context.\n   */\n  protected createNewWidget(context: DocumentRegistry.Context): MimeDocument {\n    let ft = this._fileType;\n    let mimeType = ft.mimeTypes.length ? ft.mimeTypes[0] : 'text/plain';\n    let widget = new MimeDocument({\n      context,\n      mimeType,\n      rendermime: this._rendermime.clone(),\n      renderTimeout: this._renderTimeout,\n      dataType: this._dataType,\n    });\n\n    widget.title.iconClass = ft.iconClass;\n    widget.title.iconLabel = ft.iconLabel;\n    return widget;\n  }\n\n  private _rendermime: RenderMimeRegistry;\n  private _renderTimeout: number;\n  private _dataType: 'string' | 'json';\n  private _fileType: DocumentRegistry.IFileType;\n}\n\n\n/**\n * The namespace for MimeDocumentFactory class statics.\n */\nexport\nnamespace MimeDocumentFactory {\n  /**\n   * The options used to initialize a MimeDocumentFactory.\n   */\n  export\n  interface IOptions extends DocumentRegistry.IWidgetFactoryOptions {\n    /**\n     * The primary file type associated with the document.\n     */\n    primaryFileType: DocumentRegistry.IFileType;\n\n    /**\n     * The rendermime instance.\n     */\n    rendermime: RenderMimeRegistry;\n\n    /**\n     * The render timeout.\n     */\n    renderTimeout?: number;\n\n    /**\n     * Preferred data type from the model.\n     */\n    dataType?: 'string' | 'json';\n  }\n}\n\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * Create the document registry options.\n   */\n  export\n  function createRegistryOptions(options: MimeDocumentFactory.IOptions): DocumentRegistry.IWidgetFactoryOptions {\n    return { ...options, readOnly: true } as DocumentRegistry.IWidgetFactoryOptions;\n  }\n}\n"]}