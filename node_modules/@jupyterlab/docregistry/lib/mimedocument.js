"use strict";
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var apputils_1 = require("@jupyterlab/apputils");
var coreutils_1 = require("@jupyterlab/coreutils");
var rendermime_1 = require("@jupyterlab/rendermime");
var coreutils_2 = require("@phosphor/coreutils");
var messaging_1 = require("@phosphor/messaging");
var widgets_1 = require("@phosphor/widgets");
var default_1 = require("./default");
/**
 * A widget for rendered mimetype document.
 */
var MimeDocument = /** @class */ (function (_super) {
    __extends(MimeDocument, _super);
    /**
     * Construct a new markdown widget.
     */
    function MimeDocument(options) {
        var _this = _super.call(this) || this;
        /**
         * A bound change callback.
         */
        _this._changeCallback = function (options) {
            if (!options.data || !options.data[_this._mimeType]) {
                return;
            }
            var data = options.data[_this._mimeType];
            if (typeof data === 'string') {
                _this._context.model.fromString(data);
            }
            else {
                _this._context.model.fromJSON(data);
            }
        };
        _this._ready = new coreutils_2.PromiseDelegate();
        _this._hasRendered = false;
        _this._isRendering = false;
        _this._renderRequested = false;
        _this.addClass('jp-MimeDocument');
        _this.node.tabIndex = -1;
        var layout = _this.layout = new widgets_1.BoxLayout();
        var toolbar = new widgets_1.Widget();
        toolbar.addClass('jp-Toolbar');
        layout.addWidget(toolbar);
        widgets_1.BoxLayout.setStretch(toolbar, 0);
        var context = options.context;
        _this.rendermime = options.rendermime.clone({
            resolver: context.urlResolver
        });
        _this._context = context;
        _this._mimeType = options.mimeType;
        _this._dataType = options.dataType || 'string';
        _this._renderer = _this.rendermime.createRenderer(_this._mimeType);
        layout.addWidget(_this._renderer);
        widgets_1.BoxLayout.setStretch(_this._renderer, 1);
        context.pathChanged.connect(_this._onPathChanged, _this);
        _this._onPathChanged();
        _this._context.ready.then(function () {
            if (_this.isDisposed) {
                return;
            }
            return _this._render();
        }).then(function () {
            // Throttle the rendering rate of the widget.
            _this._monitor = new coreutils_1.ActivityMonitor({
                signal: context.model.contentChanged,
                timeout: options.renderTimeout
            });
            _this._monitor.activityStopped.connect(_this.update, _this);
            _this._ready.resolve(undefined);
        });
        return _this;
    }
    Object.defineProperty(MimeDocument.prototype, "context", {
        /**
         * The markdown widget's context.
         */
        get: function () {
            return this._context;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MimeDocument.prototype, "ready", {
        /**
         * A promise that resolves when the widget is ready.
         */
        get: function () {
            return this._ready.promise;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Dispose of the resources held by the widget.
     */
    MimeDocument.prototype.dispose = function () {
        if (this.isDisposed) {
            return;
        }
        if (this._monitor) {
            this._monitor.dispose();
        }
        this._monitor = null;
        _super.prototype.dispose.call(this);
    };
    /**
     * Handle `'activate-request'` messages.
     */
    MimeDocument.prototype.onActivateRequest = function (msg) {
        if (!this._hasRendered) {
            this.node.focus();
            return;
        }
        messaging_1.MessageLoop.sendMessage(this._renderer, widgets_1.Widget.Msg.ActivateRequest);
        if (!this.node.contains(document.activeElement)) {
            this.node.focus();
        }
    };
    /**
     * Handle an `update-request` message to the widget.
     */
    MimeDocument.prototype.onUpdateRequest = function (msg) {
        if (this._context.isReady) {
            this._render();
        }
    };
    /**
     * Render the mime content.
     */
    MimeDocument.prototype._render = function () {
        var _this = this;
        if (this._isRendering) {
            this._renderRequested = true;
            return;
        }
        this._renderRequested = false;
        var context = this._context;
        var model = context.model;
        var data = {};
        if (this._dataType === 'string') {
            data[this._mimeType] = model.toString();
        }
        else {
            data[this._mimeType] = model.toJSON();
        }
        var mimeModel = new rendermime_1.MimeModel({ data: data, callback: this._changeCallback });
        this._isRendering = true;
        return this._renderer.renderModel(mimeModel).then(function () {
            // Handle the first render after an activation.
            if (!_this._hasRendered && _this.node === document.activeElement) {
                messaging_1.MessageLoop.sendMessage(_this._renderer, widgets_1.Widget.Msg.ActivateRequest);
            }
            _this._hasRendered = true;
            _this._isRendering = false;
            if (_this._renderRequested) {
                return _this._render();
            }
        }).catch(function (reason) {
            // Dispose the document if rendering fails.
            requestAnimationFrame(function () { _this.dispose(); });
            apputils_1.showErrorMessage("Renderer Failure: " + context.path, reason);
        });
    };
    /**
     * Handle a path change.
     */
    MimeDocument.prototype._onPathChanged = function () {
        this.title.label = coreutils_1.PathExt.basename(this._context.localPath);
    };
    return MimeDocument;
}(widgets_1.Widget));
exports.MimeDocument = MimeDocument;
/**
 * An implementation of a widget factory for a rendered mimetype document.
 */
var MimeDocumentFactory = /** @class */ (function (_super) {
    __extends(MimeDocumentFactory, _super);
    /**
     * Construct a new markdown widget factory.
     */
    function MimeDocumentFactory(options) {
        var _this = _super.call(this, Private.createRegistryOptions(options)) || this;
        _this._rendermime = options.rendermime;
        _this._renderTimeout = options.renderTimeout || 1000;
        _this._dataType = options.dataType || 'string';
        _this._fileType = options.primaryFileType;
        return _this;
    }
    /**
     * Create a new widget given a context.
     */
    MimeDocumentFactory.prototype.createNewWidget = function (context) {
        var ft = this._fileType;
        var mimeType = ft.mimeTypes.length ? ft.mimeTypes[0] : 'text/plain';
        var widget = new MimeDocument({
            context: context,
            mimeType: mimeType,
            rendermime: this._rendermime.clone(),
            renderTimeout: this._renderTimeout,
            dataType: this._dataType,
        });
        widget.title.iconClass = ft.iconClass;
        widget.title.iconLabel = ft.iconLabel;
        return widget;
    };
    return MimeDocumentFactory;
}(default_1.ABCWidgetFactory));
exports.MimeDocumentFactory = MimeDocumentFactory;
/**
 * The namespace for the module implementation details.
 */
var Private;
(function (Private) {
    /**
     * Create the document registry options.
     */
    function createRegistryOptions(options) {
        return __assign({}, options, { readOnly: true });
    }
    Private.createRegistryOptions = createRegistryOptions;
})(Private || (Private = {}));
