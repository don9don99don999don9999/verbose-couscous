"use strict";
// Copyright 2018 Wolf Vollprecht
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
var application_1 = require("@jupyterlab/application");
var apputils_1 = require("@jupyterlab/apputils");
var filebrowser_1 = require("@jupyterlab/filebrowser");
var launcher_1 = require("@jupyterlab/launcher");
var mainmenu_1 = require("@jupyterlab/mainmenu");
var coreutils_1 = require("@phosphor/coreutils");
var editor_1 = require("./editor");
/**
 * The name of the factory that creates editor widgets.
 */
var FACTORY = 'Drawio';
exports.IDrawioTracker = new coreutils_1.Token('drawio/tracki');
/**
 * The editor tracker extension.
 */
var plugin = {
    activate: activate,
    id: '@jupyterlab/drawio-extension:plugin',
    requires: [filebrowser_1.IFileBrowserFactory, application_1.ILayoutRestorer, mainmenu_1.IMainMenu, apputils_1.ICommandPalette],
    optional: [launcher_1.ILauncher],
    provides: exports.IDrawioTracker,
    autoStart: true
};
exports.default = plugin;
function activate(app, browserFactory, restorer, menu, palette, launcher) {
    var namespace = 'drawio';
    var factory = new editor_1.DrawioFactory({ name: FACTORY, fileTypes: ['dio'], defaultFor: ['dio'] });
    var commands = app.commands;
    var tracker = new apputils_1.InstanceTracker({ namespace: namespace });
    /**
     * Whether there is an active DrawIO editor.
     */
    function isEnabled() {
        return tracker.currentWidget !== null &&
            tracker.currentWidget === app.shell.currentWidget;
    }
    // Handle state restoration.
    restorer.restore(tracker, {
        command: 'docmanager:open',
        args: function (widget) { return ({ path: widget.context.path, factory: FACTORY }); },
        name: function (widget) { return widget.context.path; }
    });
    factory.widgetCreated.connect(function (sender, widget) {
        widget.title.icon = 'jp-MaterialIcon jp-ImageIcon'; // TODO change
        // Notify the instance tracker if restore data needs to update.
        widget.context.pathChanged.connect(function () { tracker.save(widget); });
        tracker.add(widget);
    });
    app.docRegistry.addWidgetFactory(factory);
    // register the filetype
    app.docRegistry.addFileType({
        name: 'dio',
        displayName: 'Diagram',
        mimeTypes: ['application/dio'],
        extensions: ['.dio'],
        iconClass: 'jp-MaterialIcon jp-ImageIcon',
        fileFormat: 'text'
    });
    // Function to create a new untitled diagram file, given
    // the current working directory.
    var createNewDIO = function (cwd) {
        return commands.execute('docmanager:new-untitled', {
            path: cwd, type: 'file', ext: '.dio'
        }).then(function (model) {
            return commands.execute('docmanager:open', {
                path: model.path, factory: FACTORY
            });
        });
    };
    var createNewSVG = function (cwd) {
        return commands.execute('docmanager:new-untitled', {
            path: cwd, type: 'file', ext: '.svg'
        }).then(function (model) {
            var wdg = app.shell.currentWidget;
            model.content = wdg.getSVG();
            model.format = 'text';
            app.serviceManager.contents.save(model.path, model);
        });
    };
    // Add a command for creating a new diagram file.
    commands.addCommand('drawio:create-new', {
        label: 'Diagram',
        caption: 'Create a new diagram file',
        execute: function () {
            var cwd = browserFactory.defaultBrowser.model.path;
            return createNewDIO(cwd);
        }
    });
    commands.addCommand('drawio:export-svg', {
        label: 'Export diagram as SVG',
        caption: 'Export diagram as SVG',
        execute: function () {
            var cwd = browserFactory.defaultBrowser.model.path;
            return createNewSVG(cwd);
        },
        isEnabled: isEnabled
    });
    // Add a launcher item if the launcher is available.
    if (launcher) {
        launcher.add({
            displayName: 'Diagram',
            name: 'diagram',
            iconClass: 'jp-MaterialIcon jp-ImageIcon',
            callback: createNewDIO,
            rank: 1,
            category: 'Other'
        });
    }
    if (menu) {
        // Add new text file creation to the file menu.
        menu.fileMenu.newMenu.addGroup([{ command: 'drawio:create-new' }], 40);
        //palette.addItem({ command: 'drawio:export-svg', category: 'Notebook Operations', args: args });
        menu.fileMenu.addGroup([{ command: 'drawio:export-svg' }], 40);
    }
    if (palette) {
        var args = { 'format': 'SVG', 'label': 'SVG', 'isPalette': true };
        palette.addItem({ command: 'drawio:export-svg', category: 'Notebook Operations', args: args });
    }
    return tracker;
}
